                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _dataout
                                     13 	.globl __sdcc_external_startup
                                     14 	.globl _free
                                     15 	.globl _malloc
                                     16 	.globl _printf_tiny
                                     17 	.globl _TF1
                                     18 	.globl _TR1
                                     19 	.globl _TF0
                                     20 	.globl _TR0
                                     21 	.globl _IE1
                                     22 	.globl _IT1
                                     23 	.globl _IE0
                                     24 	.globl _IT0
                                     25 	.globl _SM0
                                     26 	.globl _SM1
                                     27 	.globl _SM2
                                     28 	.globl _REN
                                     29 	.globl _TB8
                                     30 	.globl _RB8
                                     31 	.globl _TI
                                     32 	.globl _RI
                                     33 	.globl _CY
                                     34 	.globl _AC
                                     35 	.globl _F0
                                     36 	.globl _RS1
                                     37 	.globl _RS0
                                     38 	.globl _OV
                                     39 	.globl _F1
                                     40 	.globl _P
                                     41 	.globl _RD
                                     42 	.globl _WR
                                     43 	.globl _T1
                                     44 	.globl _T0
                                     45 	.globl _INT1
                                     46 	.globl _INT0
                                     47 	.globl _TXD0
                                     48 	.globl _TXD
                                     49 	.globl _RXD0
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _P2_7
                                     60 	.globl _P2_6
                                     61 	.globl _P2_5
                                     62 	.globl _P2_4
                                     63 	.globl _P2_3
                                     64 	.globl _P2_2
                                     65 	.globl _P2_1
                                     66 	.globl _P2_0
                                     67 	.globl _P1_7
                                     68 	.globl _P1_6
                                     69 	.globl _P1_5
                                     70 	.globl _P1_4
                                     71 	.globl _P1_3
                                     72 	.globl _P1_2
                                     73 	.globl _P1_1
                                     74 	.globl _P1_0
                                     75 	.globl _P0_7
                                     76 	.globl _P0_6
                                     77 	.globl _P0_5
                                     78 	.globl _P0_4
                                     79 	.globl _P0_3
                                     80 	.globl _P0_2
                                     81 	.globl _P0_1
                                     82 	.globl _P0_0
                                     83 	.globl _PS
                                     84 	.globl _PT1
                                     85 	.globl _PX1
                                     86 	.globl _PT0
                                     87 	.globl _PX0
                                     88 	.globl _EA
                                     89 	.globl _ES
                                     90 	.globl _ET1
                                     91 	.globl _EX1
                                     92 	.globl _ET0
                                     93 	.globl _EX0
                                     94 	.globl _BREG_F7
                                     95 	.globl _BREG_F6
                                     96 	.globl _BREG_F5
                                     97 	.globl _BREG_F4
                                     98 	.globl _BREG_F3
                                     99 	.globl _BREG_F2
                                    100 	.globl _BREG_F1
                                    101 	.globl _BREG_F0
                                    102 	.globl _P5_7
                                    103 	.globl _P5_6
                                    104 	.globl _P5_5
                                    105 	.globl _P5_4
                                    106 	.globl _P5_3
                                    107 	.globl _P5_2
                                    108 	.globl _P5_1
                                    109 	.globl _P5_0
                                    110 	.globl _P4_7
                                    111 	.globl _P4_6
                                    112 	.globl _P4_5
                                    113 	.globl _P4_4
                                    114 	.globl _P4_3
                                    115 	.globl _P4_2
                                    116 	.globl _P4_1
                                    117 	.globl _P4_0
                                    118 	.globl _PX0L
                                    119 	.globl _PT0L
                                    120 	.globl _PX1L
                                    121 	.globl _PT1L
                                    122 	.globl _PSL
                                    123 	.globl _PT2L
                                    124 	.globl _PPCL
                                    125 	.globl _EC
                                    126 	.globl _CCF0
                                    127 	.globl _CCF1
                                    128 	.globl _CCF2
                                    129 	.globl _CCF3
                                    130 	.globl _CCF4
                                    131 	.globl _CR
                                    132 	.globl _CF
                                    133 	.globl _TF2
                                    134 	.globl _EXF2
                                    135 	.globl _RCLK
                                    136 	.globl _TCLK
                                    137 	.globl _EXEN2
                                    138 	.globl _TR2
                                    139 	.globl _C_T2
                                    140 	.globl _CP_RL2
                                    141 	.globl _T2CON_7
                                    142 	.globl _T2CON_6
                                    143 	.globl _T2CON_5
                                    144 	.globl _T2CON_4
                                    145 	.globl _T2CON_3
                                    146 	.globl _T2CON_2
                                    147 	.globl _T2CON_1
                                    148 	.globl _T2CON_0
                                    149 	.globl _PT2
                                    150 	.globl _ET2
                                    151 	.globl _TMOD
                                    152 	.globl _TL1
                                    153 	.globl _TL0
                                    154 	.globl _TH1
                                    155 	.globl _TH0
                                    156 	.globl _TCON
                                    157 	.globl _SP
                                    158 	.globl _SCON
                                    159 	.globl _SBUF0
                                    160 	.globl _SBUF
                                    161 	.globl _PSW
                                    162 	.globl _PCON
                                    163 	.globl _P3
                                    164 	.globl _P2
                                    165 	.globl _P1
                                    166 	.globl _P0
                                    167 	.globl _IP
                                    168 	.globl _IE
                                    169 	.globl _DP0L
                                    170 	.globl _DPL
                                    171 	.globl _DP0H
                                    172 	.globl _DPH
                                    173 	.globl _B
                                    174 	.globl _ACC
                                    175 	.globl _EECON
                                    176 	.globl _KBF
                                    177 	.globl _KBE
                                    178 	.globl _KBLS
                                    179 	.globl _BRL
                                    180 	.globl _BDRCON
                                    181 	.globl _T2MOD
                                    182 	.globl _SPDAT
                                    183 	.globl _SPSTA
                                    184 	.globl _SPCON
                                    185 	.globl _SADEN
                                    186 	.globl _SADDR
                                    187 	.globl _WDTPRG
                                    188 	.globl _WDTRST
                                    189 	.globl _P5
                                    190 	.globl _P4
                                    191 	.globl _IPH1
                                    192 	.globl _IPL1
                                    193 	.globl _IPH0
                                    194 	.globl _IPL0
                                    195 	.globl _IEN1
                                    196 	.globl _IEN0
                                    197 	.globl _CMOD
                                    198 	.globl _CL
                                    199 	.globl _CH
                                    200 	.globl _CCON
                                    201 	.globl _CCAPM4
                                    202 	.globl _CCAPM3
                                    203 	.globl _CCAPM2
                                    204 	.globl _CCAPM1
                                    205 	.globl _CCAPM0
                                    206 	.globl _CCAP4L
                                    207 	.globl _CCAP3L
                                    208 	.globl _CCAP2L
                                    209 	.globl _CCAP1L
                                    210 	.globl _CCAP0L
                                    211 	.globl _CCAP4H
                                    212 	.globl _CCAP3H
                                    213 	.globl _CCAP2H
                                    214 	.globl _CCAP1H
                                    215 	.globl _CCAP0H
                                    216 	.globl _CKCON1
                                    217 	.globl _CKCON0
                                    218 	.globl _CKRL
                                    219 	.globl _AUXR1
                                    220 	.globl _AUXR
                                    221 	.globl _TH2
                                    222 	.globl _TL2
                                    223 	.globl _RCAP2H
                                    224 	.globl _RCAP2L
                                    225 	.globl _T2CON
                                    226 	.globl _putchar
                                    227 	.globl _getchar
                                    228 	.globl _num_input
                                    229 ;--------------------------------------------------------
                                    230 ; special function registers
                                    231 ;--------------------------------------------------------
                                    232 	.area RSEG    (ABS,DATA)
      000000                        233 	.org 0x0000
                           0000C8   234 _T2CON	=	0x00c8
                           0000CA   235 _RCAP2L	=	0x00ca
                           0000CB   236 _RCAP2H	=	0x00cb
                           0000CC   237 _TL2	=	0x00cc
                           0000CD   238 _TH2	=	0x00cd
                           00008E   239 _AUXR	=	0x008e
                           0000A2   240 _AUXR1	=	0x00a2
                           000097   241 _CKRL	=	0x0097
                           00008F   242 _CKCON0	=	0x008f
                           0000AF   243 _CKCON1	=	0x00af
                           0000FA   244 _CCAP0H	=	0x00fa
                           0000FB   245 _CCAP1H	=	0x00fb
                           0000FC   246 _CCAP2H	=	0x00fc
                           0000FD   247 _CCAP3H	=	0x00fd
                           0000FE   248 _CCAP4H	=	0x00fe
                           0000EA   249 _CCAP0L	=	0x00ea
                           0000EB   250 _CCAP1L	=	0x00eb
                           0000EC   251 _CCAP2L	=	0x00ec
                           0000ED   252 _CCAP3L	=	0x00ed
                           0000EE   253 _CCAP4L	=	0x00ee
                           0000DA   254 _CCAPM0	=	0x00da
                           0000DB   255 _CCAPM1	=	0x00db
                           0000DC   256 _CCAPM2	=	0x00dc
                           0000DD   257 _CCAPM3	=	0x00dd
                           0000DE   258 _CCAPM4	=	0x00de
                           0000D8   259 _CCON	=	0x00d8
                           0000F9   260 _CH	=	0x00f9
                           0000E9   261 _CL	=	0x00e9
                           0000D9   262 _CMOD	=	0x00d9
                           0000A8   263 _IEN0	=	0x00a8
                           0000B1   264 _IEN1	=	0x00b1
                           0000B8   265 _IPL0	=	0x00b8
                           0000B7   266 _IPH0	=	0x00b7
                           0000B2   267 _IPL1	=	0x00b2
                           0000B3   268 _IPH1	=	0x00b3
                           0000C0   269 _P4	=	0x00c0
                           0000E8   270 _P5	=	0x00e8
                           0000A6   271 _WDTRST	=	0x00a6
                           0000A7   272 _WDTPRG	=	0x00a7
                           0000A9   273 _SADDR	=	0x00a9
                           0000B9   274 _SADEN	=	0x00b9
                           0000C3   275 _SPCON	=	0x00c3
                           0000C4   276 _SPSTA	=	0x00c4
                           0000C5   277 _SPDAT	=	0x00c5
                           0000C9   278 _T2MOD	=	0x00c9
                           00009B   279 _BDRCON	=	0x009b
                           00009A   280 _BRL	=	0x009a
                           00009C   281 _KBLS	=	0x009c
                           00009D   282 _KBE	=	0x009d
                           00009E   283 _KBF	=	0x009e
                           0000D2   284 _EECON	=	0x00d2
                           0000E0   285 _ACC	=	0x00e0
                           0000F0   286 _B	=	0x00f0
                           000083   287 _DPH	=	0x0083
                           000083   288 _DP0H	=	0x0083
                           000082   289 _DPL	=	0x0082
                           000082   290 _DP0L	=	0x0082
                           0000A8   291 _IE	=	0x00a8
                           0000B8   292 _IP	=	0x00b8
                           000080   293 _P0	=	0x0080
                           000090   294 _P1	=	0x0090
                           0000A0   295 _P2	=	0x00a0
                           0000B0   296 _P3	=	0x00b0
                           000087   297 _PCON	=	0x0087
                           0000D0   298 _PSW	=	0x00d0
                           000099   299 _SBUF	=	0x0099
                           000099   300 _SBUF0	=	0x0099
                           000098   301 _SCON	=	0x0098
                           000081   302 _SP	=	0x0081
                           000088   303 _TCON	=	0x0088
                           00008C   304 _TH0	=	0x008c
                           00008D   305 _TH1	=	0x008d
                           00008A   306 _TL0	=	0x008a
                           00008B   307 _TL1	=	0x008b
                           000089   308 _TMOD	=	0x0089
                                    309 ;--------------------------------------------------------
                                    310 ; special function bits
                                    311 ;--------------------------------------------------------
                                    312 	.area RSEG    (ABS,DATA)
      000000                        313 	.org 0x0000
                           0000AD   314 _ET2	=	0x00ad
                           0000BD   315 _PT2	=	0x00bd
                           0000C8   316 _T2CON_0	=	0x00c8
                           0000C9   317 _T2CON_1	=	0x00c9
                           0000CA   318 _T2CON_2	=	0x00ca
                           0000CB   319 _T2CON_3	=	0x00cb
                           0000CC   320 _T2CON_4	=	0x00cc
                           0000CD   321 _T2CON_5	=	0x00cd
                           0000CE   322 _T2CON_6	=	0x00ce
                           0000CF   323 _T2CON_7	=	0x00cf
                           0000C8   324 _CP_RL2	=	0x00c8
                           0000C9   325 _C_T2	=	0x00c9
                           0000CA   326 _TR2	=	0x00ca
                           0000CB   327 _EXEN2	=	0x00cb
                           0000CC   328 _TCLK	=	0x00cc
                           0000CD   329 _RCLK	=	0x00cd
                           0000CE   330 _EXF2	=	0x00ce
                           0000CF   331 _TF2	=	0x00cf
                           0000DF   332 _CF	=	0x00df
                           0000DE   333 _CR	=	0x00de
                           0000DC   334 _CCF4	=	0x00dc
                           0000DB   335 _CCF3	=	0x00db
                           0000DA   336 _CCF2	=	0x00da
                           0000D9   337 _CCF1	=	0x00d9
                           0000D8   338 _CCF0	=	0x00d8
                           0000AE   339 _EC	=	0x00ae
                           0000BE   340 _PPCL	=	0x00be
                           0000BD   341 _PT2L	=	0x00bd
                           0000BC   342 _PSL	=	0x00bc
                           0000BB   343 _PT1L	=	0x00bb
                           0000BA   344 _PX1L	=	0x00ba
                           0000B9   345 _PT0L	=	0x00b9
                           0000B8   346 _PX0L	=	0x00b8
                           0000C0   347 _P4_0	=	0x00c0
                           0000C1   348 _P4_1	=	0x00c1
                           0000C2   349 _P4_2	=	0x00c2
                           0000C3   350 _P4_3	=	0x00c3
                           0000C4   351 _P4_4	=	0x00c4
                           0000C5   352 _P4_5	=	0x00c5
                           0000C6   353 _P4_6	=	0x00c6
                           0000C7   354 _P4_7	=	0x00c7
                           0000E8   355 _P5_0	=	0x00e8
                           0000E9   356 _P5_1	=	0x00e9
                           0000EA   357 _P5_2	=	0x00ea
                           0000EB   358 _P5_3	=	0x00eb
                           0000EC   359 _P5_4	=	0x00ec
                           0000ED   360 _P5_5	=	0x00ed
                           0000EE   361 _P5_6	=	0x00ee
                           0000EF   362 _P5_7	=	0x00ef
                           0000F0   363 _BREG_F0	=	0x00f0
                           0000F1   364 _BREG_F1	=	0x00f1
                           0000F2   365 _BREG_F2	=	0x00f2
                           0000F3   366 _BREG_F3	=	0x00f3
                           0000F4   367 _BREG_F4	=	0x00f4
                           0000F5   368 _BREG_F5	=	0x00f5
                           0000F6   369 _BREG_F6	=	0x00f6
                           0000F7   370 _BREG_F7	=	0x00f7
                           0000A8   371 _EX0	=	0x00a8
                           0000A9   372 _ET0	=	0x00a9
                           0000AA   373 _EX1	=	0x00aa
                           0000AB   374 _ET1	=	0x00ab
                           0000AC   375 _ES	=	0x00ac
                           0000AF   376 _EA	=	0x00af
                           0000B8   377 _PX0	=	0x00b8
                           0000B9   378 _PT0	=	0x00b9
                           0000BA   379 _PX1	=	0x00ba
                           0000BB   380 _PT1	=	0x00bb
                           0000BC   381 _PS	=	0x00bc
                           000080   382 _P0_0	=	0x0080
                           000081   383 _P0_1	=	0x0081
                           000082   384 _P0_2	=	0x0082
                           000083   385 _P0_3	=	0x0083
                           000084   386 _P0_4	=	0x0084
                           000085   387 _P0_5	=	0x0085
                           000086   388 _P0_6	=	0x0086
                           000087   389 _P0_7	=	0x0087
                           000090   390 _P1_0	=	0x0090
                           000091   391 _P1_1	=	0x0091
                           000092   392 _P1_2	=	0x0092
                           000093   393 _P1_3	=	0x0093
                           000094   394 _P1_4	=	0x0094
                           000095   395 _P1_5	=	0x0095
                           000096   396 _P1_6	=	0x0096
                           000097   397 _P1_7	=	0x0097
                           0000A0   398 _P2_0	=	0x00a0
                           0000A1   399 _P2_1	=	0x00a1
                           0000A2   400 _P2_2	=	0x00a2
                           0000A3   401 _P2_3	=	0x00a3
                           0000A4   402 _P2_4	=	0x00a4
                           0000A5   403 _P2_5	=	0x00a5
                           0000A6   404 _P2_6	=	0x00a6
                           0000A7   405 _P2_7	=	0x00a7
                           0000B0   406 _P3_0	=	0x00b0
                           0000B1   407 _P3_1	=	0x00b1
                           0000B2   408 _P3_2	=	0x00b2
                           0000B3   409 _P3_3	=	0x00b3
                           0000B4   410 _P3_4	=	0x00b4
                           0000B5   411 _P3_5	=	0x00b5
                           0000B6   412 _P3_6	=	0x00b6
                           0000B7   413 _P3_7	=	0x00b7
                           0000B0   414 _RXD	=	0x00b0
                           0000B0   415 _RXD0	=	0x00b0
                           0000B1   416 _TXD	=	0x00b1
                           0000B1   417 _TXD0	=	0x00b1
                           0000B2   418 _INT0	=	0x00b2
                           0000B3   419 _INT1	=	0x00b3
                           0000B4   420 _T0	=	0x00b4
                           0000B5   421 _T1	=	0x00b5
                           0000B6   422 _WR	=	0x00b6
                           0000B7   423 _RD	=	0x00b7
                           0000D0   424 _P	=	0x00d0
                           0000D1   425 _F1	=	0x00d1
                           0000D2   426 _OV	=	0x00d2
                           0000D3   427 _RS0	=	0x00d3
                           0000D4   428 _RS1	=	0x00d4
                           0000D5   429 _F0	=	0x00d5
                           0000D6   430 _AC	=	0x00d6
                           0000D7   431 _CY	=	0x00d7
                           000098   432 _RI	=	0x0098
                           000099   433 _TI	=	0x0099
                           00009A   434 _RB8	=	0x009a
                           00009B   435 _TB8	=	0x009b
                           00009C   436 _REN	=	0x009c
                           00009D   437 _SM2	=	0x009d
                           00009E   438 _SM1	=	0x009e
                           00009F   439 _SM0	=	0x009f
                           000088   440 _IT0	=	0x0088
                           000089   441 _IE0	=	0x0089
                           00008A   442 _IT1	=	0x008a
                           00008B   443 _IE1	=	0x008b
                           00008C   444 _TR0	=	0x008c
                           00008D   445 _TF0	=	0x008d
                           00008E   446 _TR1	=	0x008e
                           00008F   447 _TF1	=	0x008f
                                    448 ;--------------------------------------------------------
                                    449 ; overlayable register banks
                                    450 ;--------------------------------------------------------
                                    451 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        452 	.ds 8
                                    453 ;--------------------------------------------------------
                                    454 ; internal ram data
                                    455 ;--------------------------------------------------------
                                    456 	.area DSEG    (DATA)
      000000                        457 _main_sloc0_1_0:
      000000                        458 	.ds 2
      000002                        459 _main_sloc1_1_0:
      000002                        460 	.ds 2
      000004                        461 _main_sloc2_1_0:
      000004                        462 	.ds 1
      000005                        463 _main_sloc3_1_0:
      000005                        464 	.ds 2
      000007                        465 _main_sloc4_1_0:
      000007                        466 	.ds 2
      000009                        467 _main_sloc5_1_0:
      000009                        468 	.ds 2
      00000B                        469 _main_sloc6_1_0:
      00000B                        470 	.ds 2
                                    471 ;--------------------------------------------------------
                                    472 ; overlayable items in internal ram 
                                    473 ;--------------------------------------------------------
                                    474 ;--------------------------------------------------------
                                    475 ; Stack segment in internal ram 
                                    476 ;--------------------------------------------------------
                                    477 	.area	SSEG
      000000                        478 __start__stack:
      000000                        479 	.ds	1
                                    480 
                                    481 ;--------------------------------------------------------
                                    482 ; indirectly addressable internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area ISEG    (DATA)
                                    485 ;--------------------------------------------------------
                                    486 ; absolute internal ram data
                                    487 ;--------------------------------------------------------
                                    488 	.area IABS    (ABS,DATA)
                                    489 	.area IABS    (ABS,DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; bit data
                                    492 ;--------------------------------------------------------
                                    493 	.area BSEG    (BIT)
                                    494 ;--------------------------------------------------------
                                    495 ; paged external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area PSEG    (PAG,XDATA)
                                    498 ;--------------------------------------------------------
                                    499 ; external ram data
                                    500 ;--------------------------------------------------------
                                    501 	.area XSEG    (XDATA)
      000000                        502 _dataout_v_65536_46:
      000000                        503 	.ds 1
                           008000   504 _dataout_k_65536_47	=	0x8000
      000001                        505 _main_buffer_1_65536_49:
      000001                        506 	.ds 2
      000003                        507 _main_buffer_n_65536_49:
      000003                        508 	.ds 100
      000067                        509 _main_char_stored_65536_49:
      000067                        510 	.ds 2
      000069                        511 _main_count_65536_49:
      000069                        512 	.ds 2
      00006B                        513 _main_buff_size_65536_49:
      00006B                        514 	.ds 100
      0000CF                        515 _main_number_65536_49:
      0000CF                        516 	.ds 2
      0000D1                        517 _main_number2_65536_49:
      0000D1                        518 	.ds 2
      0000D3                        519 _main_flag_65537_50:
      0000D3                        520 	.ds 2
      0000D5                        521 _putchar_c_65536_84:
      0000D5                        522 	.ds 2
      0000D7                        523 _num_input_digit_65536_88:
      0000D7                        524 	.ds 1
      0000D8                        525 _num_input_digit_store_65536_88:
      0000D8                        526 	.ds 10
      0000E2                        527 _num_input_counter_65536_88:
      0000E2                        528 	.ds 1
      0000E3                        529 _num_input_number_65536_88:
      0000E3                        530 	.ds 2
                                    531 ;--------------------------------------------------------
                                    532 ; absolute external ram data
                                    533 ;--------------------------------------------------------
                                    534 	.area XABS    (ABS,XDATA)
                                    535 ;--------------------------------------------------------
                                    536 ; external initialized ram data
                                    537 ;--------------------------------------------------------
                                    538 	.area XISEG   (XDATA)
                                    539 	.area HOME    (CODE)
                                    540 	.area GSINIT0 (CODE)
                                    541 	.area GSINIT1 (CODE)
                                    542 	.area GSINIT2 (CODE)
                                    543 	.area GSINIT3 (CODE)
                                    544 	.area GSINIT4 (CODE)
                                    545 	.area GSINIT5 (CODE)
                                    546 	.area GSINIT  (CODE)
                                    547 	.area GSFINAL (CODE)
                                    548 	.area CSEG    (CODE)
                                    549 ;--------------------------------------------------------
                                    550 ; interrupt vector 
                                    551 ;--------------------------------------------------------
                                    552 	.area HOME    (CODE)
      000000                        553 __interrupt_vect:
      000000 02r00r00         [24]  554 	ljmp	__sdcc_gsinit_startup
                                    555 ;--------------------------------------------------------
                                    556 ; global & static initialisations
                                    557 ;--------------------------------------------------------
                                    558 	.area HOME    (CODE)
                                    559 	.area GSINIT  (CODE)
                                    560 	.area GSFINAL (CODE)
                                    561 	.area GSINIT  (CODE)
                                    562 	.globl __sdcc_gsinit_startup
                                    563 	.globl __sdcc_program_startup
                                    564 	.globl __start__stack
                                    565 	.globl __mcs51_genXINIT
                                    566 	.globl __mcs51_genXRAMCLEAR
                                    567 	.globl __mcs51_genRAMCLEAR
                                    568 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  569 	ljmp	__sdcc_program_startup
                                    570 ;--------------------------------------------------------
                                    571 ; Home
                                    572 ;--------------------------------------------------------
                                    573 	.area HOME    (CODE)
                                    574 	.area HOME    (CODE)
      000003                        575 __sdcc_program_startup:
      000003 02r00r13         [24]  576 	ljmp	_main
                                    577 ;	return from main will return to caller
                                    578 ;--------------------------------------------------------
                                    579 ; code
                                    580 ;--------------------------------------------------------
                                    581 	.area CSEG    (CODE)
                                    582 ;------------------------------------------------------------
                                    583 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    584 ;------------------------------------------------------------
                                    585 ;	main.c:37: _sdcc_external_startup()
                                    586 ;	-----------------------------------------
                                    587 ;	 function _sdcc_external_startup
                                    588 ;	-----------------------------------------
      000000                        589 __sdcc_external_startup:
                           000007   590 	ar7 = 0x07
                           000006   591 	ar6 = 0x06
                           000005   592 	ar5 = 0x05
                           000004   593 	ar4 = 0x04
                           000003   594 	ar3 = 0x03
                           000002   595 	ar2 = 0x02
                           000001   596 	ar1 = 0x01
                           000000   597 	ar0 = 0x00
                                    598 ;	main.c:40: AUXR |= 0X0C;
      000000 43 8E 0C         [24]  599 	orl	_AUXR,#0x0c
                                    600 ;	main.c:41: return 0;
      000003 90 00 00         [24]  601 	mov	dptr,#0x0000
                                    602 ;	main.c:42: }
      000006 22               [24]  603 	ret
                                    604 ;------------------------------------------------------------
                                    605 ;Allocation info for local variables in function 'dataout'
                                    606 ;------------------------------------------------------------
                                    607 ;v                         Allocated with name '_dataout_v_65536_46'
                                    608 ;k                         Allocated with name '_dataout_k_65536_47'
                                    609 ;------------------------------------------------------------
                                    610 ;	main.c:46: void dataout(uint8_t v)
                                    611 ;	-----------------------------------------
                                    612 ;	 function dataout
                                    613 ;	-----------------------------------------
      000007                        614 _dataout:
      000007 E5 82            [12]  615 	mov	a,dpl
      000009 90r00r00         [24]  616 	mov	dptr,#_dataout_v_65536_46
      00000C F0               [24]  617 	movx	@dptr,a
                                    618 ;	main.c:49: k=v;
      00000D E0               [24]  619 	movx	a,@dptr
      00000E 90 80 00         [24]  620 	mov	dptr,#_dataout_k_65536_47
      000011 F0               [24]  621 	movx	@dptr,a
                                    622 ;	main.c:50: }
      000012 22               [24]  623 	ret
                                    624 ;------------------------------------------------------------
                                    625 ;Allocation info for local variables in function 'main'
                                    626 ;------------------------------------------------------------
                                    627 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    628 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                    629 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                    630 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                    631 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                    632 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                    633 ;sloc6                     Allocated with name '_main_sloc6_1_0'
                                    634 ;buffer_0                  Allocated with name '_main_buffer_0_65536_49'
                                    635 ;buffer_1                  Allocated with name '_main_buffer_1_65536_49'
                                    636 ;buffer_n                  Allocated with name '_main_buffer_n_65536_49'
                                    637 ;Buffer_0temp              Allocated with name '_main_Buffer_0temp_65536_49'
                                    638 ;Buffer_1temp              Allocated with name '_main_Buffer_1temp_65536_49'
                                    639 ;input_char                Allocated with name '_main_input_char_65536_49'
                                    640 ;total_char                Allocated with name '_main_total_char_65536_49'
                                    641 ;char_stored               Allocated with name '_main_char_stored_65536_49'
                                    642 ;count                     Allocated with name '_main_count_65536_49'
                                    643 ;buff_size                 Allocated with name '_main_buff_size_65536_49'
                                    644 ;i                         Allocated with name '_main_i_65536_49'
                                    645 ;j                         Allocated with name '_main_j_65536_49'
                                    646 ;num_del                   Allocated with name '_main_num_del_65536_49'
                                    647 ;k                         Allocated with name '_main_k_65536_49'
                                    648 ;buff_0_count              Allocated with name '_main_buff_0_count_65536_49'
                                    649 ;total_buff_count          Allocated with name '_main_total_buff_count_65536_49'
                                    650 ;number                    Allocated with name '_main_number_65536_49'
                                    651 ;number2                   Allocated with name '_main_number2_65536_49'
                                    652 ;flag                      Allocated with name '_main_flag_65537_50'
                                    653 ;------------------------------------------------------------
                                    654 ;	main.c:62: void main(void)
                                    655 ;	-----------------------------------------
                                    656 ;	 function main
                                    657 ;	-----------------------------------------
      000013                        658 _main:
                                    659 ;	main.c:76: unsigned int char_stored=0;
      000013 90r00r67         [24]  660 	mov	dptr,#_main_char_stored_65536_49
      000016 E4               [12]  661 	clr	a
      000017 F0               [24]  662 	movx	@dptr,a
      000018 A3               [24]  663 	inc	dptr
      000019 F0               [24]  664 	movx	@dptr,a
                                    665 ;	main.c:77: unsigned int count=0;
      00001A 90r00r69         [24]  666 	mov	dptr,#_main_count_65536_49
      00001D F0               [24]  667 	movx	@dptr,a
      00001E A3               [24]  668 	inc	dptr
      00001F F0               [24]  669 	movx	@dptr,a
                                    670 ;	main.c:90: printf_tiny("\n\r****************************** WELCOME ******************************\n\r");
      000020 74r00            [12]  671 	mov	a,#___str_0
      000022 C0 E0            [24]  672 	push	acc
      000024 74s00            [12]  673 	mov	a,#(___str_0 >> 8)
      000026 C0 E0            [24]  674 	push	acc
      000028 12r00r00         [24]  675 	lcall	_printf_tiny
      00002B 15 81            [12]  676 	dec	sp
      00002D 15 81            [12]  677 	dec	sp
                                    678 ;	main.c:91: printf_tiny("\n\rEnter four digit number between 1-4800 for buffer size\n\r");
      00002F 74r4A            [12]  679 	mov	a,#___str_1
      000031 C0 E0            [24]  680 	push	acc
      000033 74s00            [12]  681 	mov	a,#(___str_1 >> 8)
      000035 C0 E0            [24]  682 	push	acc
      000037 12r00r00         [24]  683 	lcall	_printf_tiny
      00003A 15 81            [12]  684 	dec	sp
      00003C 15 81            [12]  685 	dec	sp
                                    686 ;	main.c:96: do
      00003E                        687 00105$:
                                    688 ;	main.c:98: number=num_input();
      00003E 12r0Fr15         [24]  689 	lcall	_num_input
      000041 AE 82            [24]  690 	mov	r6,dpl
      000043 AF 83            [24]  691 	mov	r7,dph
                                    692 ;	main.c:99: printf_tiny("The Input number is=%d\n\r", number);
      000045 C0 07            [24]  693 	push	ar7
      000047 C0 06            [24]  694 	push	ar6
      000049 C0 06            [24]  695 	push	ar6
      00004B C0 07            [24]  696 	push	ar7
      00004D 74r85            [12]  697 	mov	a,#___str_2
      00004F C0 E0            [24]  698 	push	acc
      000051 74s00            [12]  699 	mov	a,#(___str_2 >> 8)
      000053 C0 E0            [24]  700 	push	acc
      000055 12r00r00         [24]  701 	lcall	_printf_tiny
      000058 E5 81            [12]  702 	mov	a,sp
      00005A 24 FC            [12]  703 	add	a,#0xfc
      00005C F5 81            [12]  704 	mov	sp,a
      00005E D0 06            [24]  705 	pop	ar6
      000060 D0 07            [24]  706 	pop	ar7
                                    707 ;	main.c:101: if((number<1 || number>4800))
      000062 C3               [12]  708 	clr	c
      000063 EE               [12]  709 	mov	a,r6
      000064 94 01            [12]  710 	subb	a,#0x01
      000066 EF               [12]  711 	mov	a,r7
      000067 94 00            [12]  712 	subb	a,#0x00
      000069 40 08            [24]  713 	jc	00101$
      00006B 74 C0            [12]  714 	mov	a,#0xc0
      00006D 9E               [12]  715 	subb	a,r6
      00006E 74 12            [12]  716 	mov	a,#0x12
      000070 9F               [12]  717 	subb	a,r7
      000071 50 20            [24]  718 	jnc	00102$
      000073                        719 00101$:
                                    720 ;	main.c:103: printf_tiny("Invalid input. Please try again\n\r");
      000073 74r9E            [12]  721 	mov	a,#___str_3
      000075 C0 E0            [24]  722 	push	acc
      000077 74s00            [12]  723 	mov	a,#(___str_3 >> 8)
      000079 C0 E0            [24]  724 	push	acc
      00007B 12r00r00         [24]  725 	lcall	_printf_tiny
      00007E 15 81            [12]  726 	dec	sp
      000080 15 81            [12]  727 	dec	sp
                                    728 ;	main.c:104: number=0;
      000082 90r00rCF         [24]  729 	mov	dptr,#_main_number_65536_49
      000085 E4               [12]  730 	clr	a
      000086 F0               [24]  731 	movx	@dptr,a
      000087 A3               [24]  732 	inc	dptr
      000088 F0               [24]  733 	movx	@dptr,a
                                    734 ;	main.c:105: flag=1;
      000089 90r00rD3         [24]  735 	mov	dptr,#_main_flag_65537_50
      00008C 04               [12]  736 	inc	a
      00008D F0               [24]  737 	movx	@dptr,a
      00008E E4               [12]  738 	clr	a
      00008F A3               [24]  739 	inc	dptr
      000090 F0               [24]  740 	movx	@dptr,a
      000091 80 0F            [24]  741 	sjmp	00106$
      000093                        742 00102$:
                                    743 ;	main.c:109: number=number;
      000093 90r00rCF         [24]  744 	mov	dptr,#_main_number_65536_49
      000096 EE               [12]  745 	mov	a,r6
      000097 F0               [24]  746 	movx	@dptr,a
      000098 EF               [12]  747 	mov	a,r7
      000099 A3               [24]  748 	inc	dptr
      00009A F0               [24]  749 	movx	@dptr,a
                                    750 ;	main.c:110: flag=0;
      00009B 90r00rD3         [24]  751 	mov	dptr,#_main_flag_65537_50
      00009E E4               [12]  752 	clr	a
      00009F F0               [24]  753 	movx	@dptr,a
      0000A0 A3               [24]  754 	inc	dptr
      0000A1 F0               [24]  755 	movx	@dptr,a
      0000A2                        756 00106$:
                                    757 ;	main.c:113: while(flag==1);
      0000A2 90r00rD3         [24]  758 	mov	dptr,#_main_flag_65537_50
      0000A5 E0               [24]  759 	movx	a,@dptr
      0000A6 FE               [12]  760 	mov	r6,a
      0000A7 A3               [24]  761 	inc	dptr
      0000A8 E0               [24]  762 	movx	a,@dptr
      0000A9 FF               [12]  763 	mov	r7,a
      0000AA BE 01 05         [24]  764 	cjne	r6,#0x01,00365$
      0000AD BF 00 02         [24]  765 	cjne	r7,#0x00,00365$
      0000B0 80 8C            [24]  766 	sjmp	00105$
      0000B2                        767 00365$:
                                    768 ;	main.c:120: do
      0000B2 90r00rCF         [24]  769 	mov	dptr,#_main_number_65536_49
      0000B5 E0               [24]  770 	movx	a,@dptr
      0000B6 FE               [12]  771 	mov	r6,a
      0000B7 A3               [24]  772 	inc	dptr
      0000B8 E0               [24]  773 	movx	a,@dptr
      0000B9 FF               [12]  774 	mov	r7,a
      0000BA                        775 00113$:
                                    776 ;	main.c:123: if ((buffer_0 = malloc(number)) == 0)
      0000BA 8E 82            [24]  777 	mov	dpl,r6
      0000BC 8F 83            [24]  778 	mov	dph,r7
      0000BE C0 07            [24]  779 	push	ar7
      0000C0 C0 06            [24]  780 	push	ar6
      0000C2 12r00r00         [24]  781 	lcall	_malloc
      0000C5 AC 82            [24]  782 	mov	r4,dpl
      0000C7 AD 83            [24]  783 	mov	r5,dph
      0000C9 D0 06            [24]  784 	pop	ar6
      0000CB D0 07            [24]  785 	pop	ar7
      0000CD EC               [12]  786 	mov	a,r4
      0000CE 4D               [12]  787 	orl	a,r5
      0000CF 70 1F            [24]  788 	jnz	00109$
                                    789 ;	main.c:126: printf_tiny("malloc buffer 0 failed\n\r");
      0000D1 C0 07            [24]  790 	push	ar7
      0000D3 C0 06            [24]  791 	push	ar6
      0000D5 C0 05            [24]  792 	push	ar5
      0000D7 C0 04            [24]  793 	push	ar4
      0000D9 74rC0            [12]  794 	mov	a,#___str_4
      0000DB C0 E0            [24]  795 	push	acc
      0000DD 74s00            [12]  796 	mov	a,#(___str_4 >> 8)
      0000DF C0 E0            [24]  797 	push	acc
      0000E1 12r00r00         [24]  798 	lcall	_printf_tiny
      0000E4 15 81            [12]  799 	dec	sp
      0000E6 15 81            [12]  800 	dec	sp
      0000E8 D0 04            [24]  801 	pop	ar4
      0000EA D0 05            [24]  802 	pop	ar5
      0000EC D0 06            [24]  803 	pop	ar6
      0000EE D0 07            [24]  804 	pop	ar7
      0000F0                        805 00109$:
                                    806 ;	main.c:127: if ((buffer_1 = malloc(number)) == 0)
      0000F0 8E 82            [24]  807 	mov	dpl,r6
      0000F2 8F 83            [24]  808 	mov	dph,r7
      0000F4 C0 07            [24]  809 	push	ar7
      0000F6 C0 06            [24]  810 	push	ar6
      0000F8 C0 05            [24]  811 	push	ar5
      0000FA C0 04            [24]  812 	push	ar4
      0000FC 12r00r00         [24]  813 	lcall	_malloc
      0000FF AA 82            [24]  814 	mov	r2,dpl
      000101 AB 83            [24]  815 	mov	r3,dph
      000103 D0 04            [24]  816 	pop	ar4
      000105 D0 05            [24]  817 	pop	ar5
      000107 D0 06            [24]  818 	pop	ar6
      000109 D0 07            [24]  819 	pop	ar7
      00010B 90r00r01         [24]  820 	mov	dptr,#_main_buffer_1_65536_49
      00010E EA               [12]  821 	mov	a,r2
      00010F F0               [24]  822 	movx	@dptr,a
      000110 EB               [12]  823 	mov	a,r3
      000111 A3               [24]  824 	inc	dptr
      000112 F0               [24]  825 	movx	@dptr,a
      000113 EA               [12]  826 	mov	a,r2
      000114 4B               [12]  827 	orl	a,r3
      000115 70 56            [24]  828 	jnz	00114$
                                    829 ;	main.c:129: printf_tiny("malloc buffer 1 failed\n\r");
      000117 C0 06            [24]  830 	push	ar6
      000119 C0 07            [24]  831 	push	ar7
      00011B C0 07            [24]  832 	push	ar7
      00011D C0 06            [24]  833 	push	ar6
      00011F C0 05            [24]  834 	push	ar5
      000121 C0 04            [24]  835 	push	ar4
      000123 C0 03            [24]  836 	push	ar3
      000125 C0 02            [24]  837 	push	ar2
      000127 74rD9            [12]  838 	mov	a,#___str_5
      000129 C0 E0            [24]  839 	push	acc
      00012B 74s00            [12]  840 	mov	a,#(___str_5 >> 8)
      00012D C0 E0            [24]  841 	push	acc
      00012F 12r00r00         [24]  842 	lcall	_printf_tiny
      000132 15 81            [12]  843 	dec	sp
      000134 15 81            [12]  844 	dec	sp
      000136 D0 02            [24]  845 	pop	ar2
      000138 D0 03            [24]  846 	pop	ar3
      00013A D0 04            [24]  847 	pop	ar4
      00013C D0 05            [24]  848 	pop	ar5
      00013E D0 06            [24]  849 	pop	ar6
      000140 D0 07            [24]  850 	pop	ar7
                                    851 ;	main.c:131: free(buffer_0);
      000142 8C 00            [24]  852 	mov	ar0,r4
      000144 8D 01            [24]  853 	mov	ar1,r5
      000146 7F 00            [12]  854 	mov	r7,#0x00
      000148 88 82            [24]  855 	mov	dpl,r0
      00014A 89 83            [24]  856 	mov	dph,r1
      00014C 8F F0            [24]  857 	mov	b,r7
      00014E C0 07            [24]  858 	push	ar7
      000150 C0 06            [24]  859 	push	ar6
      000152 C0 05            [24]  860 	push	ar5
      000154 C0 04            [24]  861 	push	ar4
      000156 C0 03            [24]  862 	push	ar3
      000158 C0 02            [24]  863 	push	ar2
      00015A 12r00r00         [24]  864 	lcall	_free
      00015D D0 02            [24]  865 	pop	ar2
      00015F D0 03            [24]  866 	pop	ar3
      000161 D0 04            [24]  867 	pop	ar4
      000163 D0 05            [24]  868 	pop	ar5
      000165 D0 06            [24]  869 	pop	ar6
      000167 D0 07            [24]  870 	pop	ar7
                                    871 ;	main.c:348: goto ishaan;
      000169 D0 07            [24]  872 	pop	ar7
      00016B D0 06            [24]  873 	pop	ar6
                                    874 ;	main.c:131: free(buffer_0);
      00016D                        875 00114$:
                                    876 ;	main.c:134: while ((buffer_0 == 0) || (buffer_1 == 0));
      00016D EC               [12]  877 	mov	a,r4
      00016E 4D               [12]  878 	orl	a,r5
      00016F 70 03            [24]  879 	jnz	00368$
      000171 02r00rBA         [24]  880 	ljmp	00113$
      000174                        881 00368$:
      000174 EA               [12]  882 	mov	a,r2
      000175 4B               [12]  883 	orl	a,r3
      000176 70 03            [24]  884 	jnz	00369$
      000178 02r00rBA         [24]  885 	ljmp	00113$
      00017B                        886 00369$:
                                    887 ;	main.c:135: Buffer_0temp=(uint16_t)buffer_0;
      00017B 8C 06            [24]  888 	mov	ar6,r4
      00017D 8D 07            [24]  889 	mov	ar7,r5
      00017F 8E*0B            [24]  890 	mov	_main_sloc6_1_0,r6
      000181 8F*0C            [24]  891 	mov	(_main_sloc6_1_0 + 1),r7
                                    892 ;	main.c:136: Buffer_1temp=(uint16_t)buffer_1;
      000183 8A*09            [24]  893 	mov	_main_sloc5_1_0,r2
      000185 8B*0A            [24]  894 	mov	(_main_sloc5_1_0 + 1),r3
                                    895 ;	main.c:137: printf_tiny("Start Address of buffer_0 = 0x%x\n\r",Buffer_0temp);
      000187 C0 05            [24]  896 	push	ar5
      000189 C0 04            [24]  897 	push	ar4
      00018B C0*0B            [24]  898 	push	_main_sloc6_1_0
      00018D C0*0C            [24]  899 	push	(_main_sloc6_1_0 + 1)
      00018F 74rF2            [12]  900 	mov	a,#___str_6
      000191 C0 E0            [24]  901 	push	acc
      000193 74s00            [12]  902 	mov	a,#(___str_6 >> 8)
      000195 C0 E0            [24]  903 	push	acc
      000197 12r00r00         [24]  904 	lcall	_printf_tiny
      00019A E5 81            [12]  905 	mov	a,sp
      00019C 24 FC            [12]  906 	add	a,#0xfc
      00019E F5 81            [12]  907 	mov	sp,a
                                    908 ;	main.c:138: printf_tiny("Start Address of buffer_1 = 0x%x\n\r",Buffer_1temp);
      0001A0 C0*09            [24]  909 	push	_main_sloc5_1_0
      0001A2 C0*0A            [24]  910 	push	(_main_sloc5_1_0 + 1)
      0001A4 74r15            [12]  911 	mov	a,#___str_7
      0001A6 C0 E0            [24]  912 	push	acc
      0001A8 74s01            [12]  913 	mov	a,#(___str_7 >> 8)
      0001AA C0 E0            [24]  914 	push	acc
      0001AC 12r00r00         [24]  915 	lcall	_printf_tiny
      0001AF E5 81            [12]  916 	mov	a,sp
      0001B1 24 FC            [12]  917 	add	a,#0xfc
      0001B3 F5 81            [12]  918 	mov	sp,a
                                    919 ;	main.c:139: printf_tiny("Buffer 0 and Buffer 1 successfully Created\n\r");
      0001B5 74r38            [12]  920 	mov	a,#___str_8
      0001B7 C0 E0            [24]  921 	push	acc
      0001B9 74s01            [12]  922 	mov	a,#(___str_8 >> 8)
      0001BB C0 E0            [24]  923 	push	acc
      0001BD 12r00r00         [24]  924 	lcall	_printf_tiny
      0001C0 15 81            [12]  925 	dec	sp
      0001C2 15 81            [12]  926 	dec	sp
                                    927 ;	main.c:140: printf_tiny("\n\r OPTIONS \n\r");
      0001C4 74r65            [12]  928 	mov	a,#___str_9
      0001C6 C0 E0            [24]  929 	push	acc
      0001C8 74s01            [12]  930 	mov	a,#(___str_9 >> 8)
      0001CA C0 E0            [24]  931 	push	acc
      0001CC 12r00r00         [24]  932 	lcall	_printf_tiny
      0001CF 15 81            [12]  933 	dec	sp
      0001D1 15 81            [12]  934 	dec	sp
                                    935 ;	main.c:141: printf_tiny("You can enter characters to be stored in buffer 0\n\r");
      0001D3 74r73            [12]  936 	mov	a,#___str_10
      0001D5 C0 E0            [24]  937 	push	acc
      0001D7 74s01            [12]  938 	mov	a,#(___str_10 >> 8)
      0001D9 C0 E0            [24]  939 	push	acc
      0001DB 12r00r00         [24]  940 	lcall	_printf_tiny
      0001DE 15 81            [12]  941 	dec	sp
      0001E0 15 81            [12]  942 	dec	sp
                                    943 ;	main.c:142: printf_tiny("Press + to create a new buffer of size between 30 and 300 bytes\n\r");
      0001E2 74rA7            [12]  944 	mov	a,#___str_11
      0001E4 C0 E0            [24]  945 	push	acc
      0001E6 74s01            [12]  946 	mov	a,#(___str_11 >> 8)
      0001E8 C0 E0            [24]  947 	push	acc
      0001EA 12r00r00         [24]  948 	lcall	_printf_tiny
      0001ED 15 81            [12]  949 	dec	sp
      0001EF 15 81            [12]  950 	dec	sp
                                    951 ;	main.c:143: printf_tiny("Press - to delete a buffer.\n\r");
      0001F1 74rE9            [12]  952 	mov	a,#___str_12
      0001F3 C0 E0            [24]  953 	push	acc
      0001F5 74s01            [12]  954 	mov	a,#(___str_12 >> 8)
      0001F7 C0 E0            [24]  955 	push	acc
      0001F9 12r00r00         [24]  956 	lcall	_printf_tiny
      0001FC 15 81            [12]  957 	dec	sp
      0001FE 15 81            [12]  958 	dec	sp
                                    959 ;	main.c:144: printf_tiny("Press ? to generate a heap report.\n\r");
      000200 74r07            [12]  960 	mov	a,#___str_13
      000202 C0 E0            [24]  961 	push	acc
      000204 74s02            [12]  962 	mov	a,#(___str_13 >> 8)
      000206 C0 E0            [24]  963 	push	acc
      000208 12r00r00         [24]  964 	lcall	_printf_tiny
      00020B 15 81            [12]  965 	dec	sp
      00020D 15 81            [12]  966 	dec	sp
                                    967 ;	main.c:145: printf_tiny("Press = to display current contents of buffer 0.\n\r");
      00020F 74r2C            [12]  968 	mov	a,#___str_14
      000211 C0 E0            [24]  969 	push	acc
      000213 74s02            [12]  970 	mov	a,#(___str_14 >> 8)
      000215 C0 E0            [24]  971 	push	acc
      000217 12r00r00         [24]  972 	lcall	_printf_tiny
      00021A 15 81            [12]  973 	dec	sp
      00021C 15 81            [12]  974 	dec	sp
                                    975 ;	main.c:146: printf_tiny("Press @ to free all buffers and start program again.\n\r");
      00021E 74r5F            [12]  976 	mov	a,#___str_15
      000220 C0 E0            [24]  977 	push	acc
      000222 74s02            [12]  978 	mov	a,#(___str_15 >> 8)
      000224 C0 E0            [24]  979 	push	acc
      000226 12r00r00         [24]  980 	lcall	_printf_tiny
      000229 15 81            [12]  981 	dec	sp
      00022B 15 81            [12]  982 	dec	sp
                                    983 ;	main.c:147: printf_tiny("Press # to see the menu again.\n\r");
      00022D 74r96            [12]  984 	mov	a,#___str_16
      00022F C0 E0            [24]  985 	push	acc
      000231 74s02            [12]  986 	mov	a,#(___str_16 >> 8)
      000233 C0 E0            [24]  987 	push	acc
      000235 12r00r00         [24]  988 	lcall	_printf_tiny
      000238 15 81            [12]  989 	dec	sp
      00023A 15 81            [12]  990 	dec	sp
                                    991 ;	main.c:148: printf_tiny("\n\r****************************THANK YOU****************************\n\r");
      00023C 74rB7            [12]  992 	mov	a,#___str_17
      00023E C0 E0            [24]  993 	push	acc
      000240 74s02            [12]  994 	mov	a,#(___str_17 >> 8)
      000242 C0 E0            [24]  995 	push	acc
      000244 12r00r00         [24]  996 	lcall	_printf_tiny
      000247 15 81            [12]  997 	dec	sp
      000249 15 81            [12]  998 	dec	sp
                                    999 ;	main.c:149: printf_tiny("Created by Gauriech Ishaan Pilla.\n\r");
      00024B 74rFD            [12] 1000 	mov	a,#___str_18
      00024D C0 E0            [24] 1001 	push	acc
      00024F 74s02            [12] 1002 	mov	a,#(___str_18 >> 8)
      000251 C0 E0            [24] 1003 	push	acc
      000253 12r00r00         [24] 1004 	lcall	_printf_tiny
      000256 15 81            [12] 1005 	dec	sp
      000258 15 81            [12] 1006 	dec	sp
      00025A D0 04            [24] 1007 	pop	ar4
      00025C D0 05            [24] 1008 	pop	ar5
                                   1009 ;	main.c:154: ishaan:
      00025E 78 00            [12] 1010 	mov	r0,#0x00
      000260 79 00            [12] 1011 	mov	r1,#0x00
      000262 75*00 02         [24] 1012 	mov	_main_sloc0_1_0,#0x02
                                   1013 ;	1-genFromRTrack replaced	mov	(_main_sloc0_1_0 + 1),#0x00
      000265 89*01            [24] 1014 	mov	(_main_sloc0_1_0 + 1),r1
      000267 E4               [12] 1015 	clr	a
      000268 F5*02            [12] 1016 	mov	_main_sloc1_1_0,a
      00026A F5*03            [12] 1017 	mov	(_main_sloc1_1_0 + 1),a
      00026C                       1018 00116$:
                                   1019 ;	main.c:155: printf_tiny("\n\rEnter the character\n\r");
      00026C C0 05            [24] 1020 	push	ar5
      00026E C0 04            [24] 1021 	push	ar4
      000270 C0 01            [24] 1022 	push	ar1
      000272 C0 00            [24] 1023 	push	ar0
      000274 74r21            [12] 1024 	mov	a,#___str_19
      000276 C0 E0            [24] 1025 	push	acc
      000278 74s03            [12] 1026 	mov	a,#(___str_19 >> 8)
      00027A C0 E0            [24] 1027 	push	acc
      00027C 12r00r00         [24] 1028 	lcall	_printf_tiny
      00027F 15 81            [12] 1029 	dec	sp
      000281 15 81            [12] 1030 	dec	sp
                                   1031 ;	main.c:156: input_char=getchar();
      000283 12r0Fr07         [24] 1032 	lcall	_getchar
      000286 AA 82            [24] 1033 	mov	r2,dpl
      000288 D0 00            [24] 1034 	pop	ar0
      00028A D0 01            [24] 1035 	pop	ar1
      00028C D0 04            [24] 1036 	pop	ar4
      00028E D0 05            [24] 1037 	pop	ar5
      000290 8A*04            [24] 1038 	mov	_main_sloc2_1_0,r2
                                   1039 ;	main.c:157: total_char++;
      000292 08               [12] 1040 	inc	r0
      000293 B8 00 01         [24] 1041 	cjne	r0,#0x00,00370$
      000296 09               [12] 1042 	inc	r1
      000297                       1043 00370$:
                                   1044 ;	main.c:158: putchar(input_char);
      000297 85*04*05         [24] 1045 	mov	_main_sloc3_1_0,_main_sloc2_1_0
      00029A 75*06 00         [24] 1046 	mov	(_main_sloc3_1_0 + 1),#0x00
      00029D 85*05 82         [24] 1047 	mov	dpl,_main_sloc3_1_0
      0002A0 85*06 83         [24] 1048 	mov	dph,(_main_sloc3_1_0 + 1)
      0002A3 C0 05            [24] 1049 	push	ar5
      0002A5 C0 04            [24] 1050 	push	ar4
      0002A7 C0 01            [24] 1051 	push	ar1
      0002A9 C0 00            [24] 1052 	push	ar0
      0002AB 12r0ErE8         [24] 1053 	lcall	_putchar
                                   1054 ;	main.c:159: printf_tiny("\n\r\n\r");
      0002AE 74r39            [12] 1055 	mov	a,#___str_20
      0002B0 C0 E0            [24] 1056 	push	acc
      0002B2 74s03            [12] 1057 	mov	a,#(___str_20 >> 8)
      0002B4 C0 E0            [24] 1058 	push	acc
      0002B6 12r00r00         [24] 1059 	lcall	_printf_tiny
      0002B9 15 81            [12] 1060 	dec	sp
      0002BB 15 81            [12] 1061 	dec	sp
      0002BD D0 00            [24] 1062 	pop	ar0
      0002BF D0 01            [24] 1063 	pop	ar1
      0002C1 D0 04            [24] 1064 	pop	ar4
      0002C3 D0 05            [24] 1065 	pop	ar5
                                   1066 ;	main.c:162: if(((input_char)>='a') && (((input_char)<='z') && (count<number)))
      0002C5 74 9F            [12] 1067 	mov	a,#0x100 - 0x61
      0002C7 25*04            [12] 1068 	add	a,_main_sloc2_1_0
      0002C9 50 68            [24] 1069 	jnc	00176$
      0002CB E5*04            [12] 1070 	mov	a,_main_sloc2_1_0
      0002CD 24 85            [12] 1071 	add	a,#0xff - 0x7a
      0002CF 40 62            [24] 1072 	jc	00176$
      0002D1 C0 00            [24] 1073 	push	ar0
      0002D3 C0 01            [24] 1074 	push	ar1
      0002D5 90r00r69         [24] 1075 	mov	dptr,#_main_count_65536_49
      0002D8 E0               [24] 1076 	movx	a,@dptr
      0002D9 F5*07            [12] 1077 	mov	_main_sloc4_1_0,a
      0002DB A3               [24] 1078 	inc	dptr
      0002DC E0               [24] 1079 	movx	a,@dptr
      0002DD F5*08            [12] 1080 	mov	(_main_sloc4_1_0 + 1),a
      0002DF 90r00rCF         [24] 1081 	mov	dptr,#_main_number_65536_49
      0002E2 E0               [24] 1082 	movx	a,@dptr
      0002E3 F8               [12] 1083 	mov	r0,a
      0002E4 A3               [24] 1084 	inc	dptr
      0002E5 E0               [24] 1085 	movx	a,@dptr
      0002E6 F9               [12] 1086 	mov	r1,a
      0002E7 C3               [12] 1087 	clr	c
      0002E8 E5*07            [12] 1088 	mov	a,_main_sloc4_1_0
      0002EA 98               [12] 1089 	subb	a,r0
      0002EB E5*08            [12] 1090 	mov	a,(_main_sloc4_1_0 + 1)
      0002ED 99               [12] 1091 	subb	a,r1
      0002EE D0 01            [24] 1092 	pop	ar1
      0002F0 D0 00            [24] 1093 	pop	ar0
      0002F2 50 3F            [24] 1094 	jnc	00176$
                                   1095 ;	main.c:164: DEBUGPORT('A');
      0002F4 75 82 41         [24] 1096 	mov	dpl,#0x41
      0002F7 C0 05            [24] 1097 	push	ar5
      0002F9 C0 04            [24] 1098 	push	ar4
      0002FB C0 01            [24] 1099 	push	ar1
      0002FD C0 00            [24] 1100 	push	ar0
      0002FF 12r00r07         [24] 1101 	lcall	_dataout
      000302 D0 00            [24] 1102 	pop	ar0
      000304 D0 01            [24] 1103 	pop	ar1
      000306 D0 04            [24] 1104 	pop	ar4
      000308 D0 05            [24] 1105 	pop	ar5
                                   1106 ;	main.c:165: char_stored++;
      00030A 90r00r67         [24] 1107 	mov	dptr,#_main_char_stored_65536_49
      00030D E0               [24] 1108 	movx	a,@dptr
      00030E 24 01            [12] 1109 	add	a,#0x01
      000310 F0               [24] 1110 	movx	@dptr,a
      000311 A3               [24] 1111 	inc	dptr
      000312 E0               [24] 1112 	movx	a,@dptr
      000313 34 00            [12] 1113 	addc	a,#0x00
      000315 F0               [24] 1114 	movx	@dptr,a
                                   1115 ;	main.c:166: *((buffer_0)+count)=input_char;
      000316 E5*07            [12] 1116 	mov	a,_main_sloc4_1_0
      000318 2C               [12] 1117 	add	a,r4
      000319 F5 82            [12] 1118 	mov	dpl,a
      00031B E5*08            [12] 1119 	mov	a,(_main_sloc4_1_0 + 1)
      00031D 3D               [12] 1120 	addc	a,r5
      00031E F5 83            [12] 1121 	mov	dph,a
      000320 E5*04            [12] 1122 	mov	a,_main_sloc2_1_0
      000322 F0               [24] 1123 	movx	@dptr,a
                                   1124 ;	main.c:167: count++;
      000323 90r00r69         [24] 1125 	mov	dptr,#_main_count_65536_49
      000326 74 01            [12] 1126 	mov	a,#0x01
      000328 25*07            [12] 1127 	add	a,_main_sloc4_1_0
      00032A F0               [24] 1128 	movx	@dptr,a
      00032B E4               [12] 1129 	clr	a
      00032C 35*08            [12] 1130 	addc	a,(_main_sloc4_1_0 + 1)
      00032E A3               [24] 1131 	inc	dptr
      00032F F0               [24] 1132 	movx	@dptr,a
      000330 02r02r6C         [24] 1133 	ljmp	00116$
      000333                       1134 00176$:
                                   1135 ;	main.c:171: else if(((count) == (number)) && (input_char != '+') && (input_char != '-') && (input_char != '?') && (input_char != '=') && (input_char != '@')&& (input_char != '#'))
      000333 C0 00            [24] 1136 	push	ar0
      000335 C0 01            [24] 1137 	push	ar1
      000337 90r00r69         [24] 1138 	mov	dptr,#_main_count_65536_49
      00033A E0               [24] 1139 	movx	a,@dptr
      00033B F5*07            [12] 1140 	mov	_main_sloc4_1_0,a
      00033D A3               [24] 1141 	inc	dptr
      00033E E0               [24] 1142 	movx	a,@dptr
      00033F F5*08            [12] 1143 	mov	(_main_sloc4_1_0 + 1),a
      000341 90r00rCF         [24] 1144 	mov	dptr,#_main_number_65536_49
      000344 E0               [24] 1145 	movx	a,@dptr
      000345 F8               [12] 1146 	mov	r0,a
      000346 A3               [24] 1147 	inc	dptr
      000347 E0               [24] 1148 	movx	a,@dptr
      000348 F9               [12] 1149 	mov	r1,a
      000349 E8               [12] 1150 	mov	a,r0
      00034A B5*07 06         [24] 1151 	cjne	a,_main_sloc4_1_0,00374$
      00034D E9               [12] 1152 	mov	a,r1
      00034E B5*08 02         [24] 1153 	cjne	a,(_main_sloc4_1_0 + 1),00374$
      000351 80 06            [24] 1154 	sjmp	00375$
      000353                       1155 00374$:
      000353 D0 01            [24] 1156 	pop	ar1
      000355 D0 00            [24] 1157 	pop	ar0
      000357 80 59            [24] 1158 	sjmp	00167$
      000359                       1159 00375$:
      000359 D0 01            [24] 1160 	pop	ar1
      00035B D0 00            [24] 1161 	pop	ar0
      00035D 74 2B            [12] 1162 	mov	a,#0x2b
      00035F B5*04 02         [24] 1163 	cjne	a,_main_sloc2_1_0,00376$
      000362 80 4E            [24] 1164 	sjmp	00167$
      000364                       1165 00376$:
      000364 74 2D            [12] 1166 	mov	a,#0x2d
      000366 B5*04 02         [24] 1167 	cjne	a,_main_sloc2_1_0,00377$
      000369 80 47            [24] 1168 	sjmp	00167$
      00036B                       1169 00377$:
      00036B 74 3F            [12] 1170 	mov	a,#0x3f
      00036D B5*04 02         [24] 1171 	cjne	a,_main_sloc2_1_0,00378$
      000370 80 40            [24] 1172 	sjmp	00167$
      000372                       1173 00378$:
      000372 74 3D            [12] 1174 	mov	a,#0x3d
      000374 B5*04 02         [24] 1175 	cjne	a,_main_sloc2_1_0,00379$
      000377 80 39            [24] 1176 	sjmp	00167$
      000379                       1177 00379$:
      000379 74 40            [12] 1178 	mov	a,#0x40
      00037B B5*04 02         [24] 1179 	cjne	a,_main_sloc2_1_0,00380$
      00037E 80 32            [24] 1180 	sjmp	00167$
      000380                       1181 00380$:
      000380 74 23            [12] 1182 	mov	a,#0x23
      000382 B5*04 02         [24] 1183 	cjne	a,_main_sloc2_1_0,00381$
      000385 80 2B            [24] 1184 	sjmp	00167$
      000387                       1185 00381$:
                                   1186 ;	main.c:173: putchar(input_char);
      000387 85*05 82         [24] 1187 	mov	dpl,_main_sloc3_1_0
      00038A 85*06 83         [24] 1188 	mov	dph,(_main_sloc3_1_0 + 1)
      00038D C0 05            [24] 1189 	push	ar5
      00038F C0 04            [24] 1190 	push	ar4
      000391 C0 01            [24] 1191 	push	ar1
      000393 C0 00            [24] 1192 	push	ar0
      000395 12r0ErE8         [24] 1193 	lcall	_putchar
                                   1194 ;	main.c:174: printf_tiny("\n\rBuffer 0 is full.\n\r");
      000398 74r3E            [12] 1195 	mov	a,#___str_21
      00039A C0 E0            [24] 1196 	push	acc
      00039C 74s03            [12] 1197 	mov	a,#(___str_21 >> 8)
      00039E C0 E0            [24] 1198 	push	acc
      0003A0 12r00r00         [24] 1199 	lcall	_printf_tiny
      0003A3 15 81            [12] 1200 	dec	sp
      0003A5 15 81            [12] 1201 	dec	sp
      0003A7 D0 00            [24] 1202 	pop	ar0
      0003A9 D0 01            [24] 1203 	pop	ar1
      0003AB D0 04            [24] 1204 	pop	ar4
      0003AD D0 05            [24] 1205 	pop	ar5
      0003AF 02r02r6C         [24] 1206 	ljmp	00116$
      0003B2                       1207 00167$:
                                   1208 ;	main.c:177: else if(input_char == '+')
      0003B2 74 2B            [12] 1209 	mov	a,#0x2b
      0003B4 B5*04 02         [24] 1210 	cjne	a,_main_sloc2_1_0,00382$
      0003B7 80 03            [24] 1211 	sjmp	00383$
      0003B9                       1212 00382$:
      0003B9 02r05r5D         [24] 1213 	ljmp	00164$
      0003BC                       1214 00383$:
                                   1215 ;	main.c:179: DEBUGPORT(1);
      0003BC C0 00            [24] 1216 	push	ar0
      0003BE C0 01            [24] 1217 	push	ar1
      0003C0 75 82 01         [24] 1218 	mov	dpl,#0x01
      0003C3 C0 05            [24] 1219 	push	ar5
      0003C5 C0 04            [24] 1220 	push	ar4
      0003C7 C0 01            [24] 1221 	push	ar1
      0003C9 C0 00            [24] 1222 	push	ar0
      0003CB 12r00r07         [24] 1223 	lcall	_dataout
                                   1224 ;	main.c:180: printf_tiny("\n\r Allocate a new Buffer \n\r");
      0003CE 74r54            [12] 1225 	mov	a,#___str_22
      0003D0 C0 E0            [24] 1226 	push	acc
      0003D2 74s03            [12] 1227 	mov	a,#(___str_22 >> 8)
      0003D4 C0 E0            [24] 1228 	push	acc
      0003D6 12r00r00         [24] 1229 	lcall	_printf_tiny
      0003D9 15 81            [12] 1230 	dec	sp
      0003DB 15 81            [12] 1231 	dec	sp
                                   1232 ;	main.c:181: printf_tiny("\n\rEnter the buffer size between 1 and 850\n\r");
      0003DD 74r70            [12] 1233 	mov	a,#___str_23
      0003DF C0 E0            [24] 1234 	push	acc
      0003E1 74s03            [12] 1235 	mov	a,#(___str_23 >> 8)
      0003E3 C0 E0            [24] 1236 	push	acc
      0003E5 12r00r00         [24] 1237 	lcall	_printf_tiny
      0003E8 15 81            [12] 1238 	dec	sp
      0003EA 15 81            [12] 1239 	dec	sp
      0003EC D0 00            [24] 1240 	pop	ar0
      0003EE D0 01            [24] 1241 	pop	ar1
                                   1242 ;	main.c:183: number2=num_input();
      0003F0 12r0Fr15         [24] 1243 	lcall	_num_input
      0003F3 A8 82            [24] 1244 	mov	r0,dpl
      0003F5 A9 83            [24] 1245 	mov	r1,dph
      0003F7 D0 04            [24] 1246 	pop	ar4
      0003F9 D0 05            [24] 1247 	pop	ar5
      0003FB 88*07            [24] 1248 	mov	_main_sloc4_1_0,r0
      0003FD 89*08            [24] 1249 	mov	(_main_sloc4_1_0 + 1),r1
                                   1250 ;	main.c:184: if((number2<1 || number2>850))
      0003FF C3               [12] 1251 	clr	c
      000400 E5*07            [12] 1252 	mov	a,_main_sloc4_1_0
      000402 94 01            [12] 1253 	subb	a,#0x01
      000404 E5*08            [12] 1254 	mov	a,(_main_sloc4_1_0 + 1)
      000406 94 00            [12] 1255 	subb	a,#0x00
      000408 D0 01            [24] 1256 	pop	ar1
      00040A D0 00            [24] 1257 	pop	ar0
      00040C 40 0A            [24] 1258 	jc	00117$
      00040E 74 52            [12] 1259 	mov	a,#0x52
      000410 95*07            [12] 1260 	subb	a,_main_sloc4_1_0
      000412 74 03            [12] 1261 	mov	a,#0x03
      000414 95*08            [12] 1262 	subb	a,(_main_sloc4_1_0 + 1)
      000416 50 09            [24] 1263 	jnc	00118$
      000418                       1264 00117$:
                                   1265 ;	main.c:186: number2=0;
      000418 90r00rD1         [24] 1266 	mov	dptr,#_main_number2_65536_49
      00041B E4               [12] 1267 	clr	a
      00041C F0               [24] 1268 	movx	@dptr,a
      00041D A3               [24] 1269 	inc	dptr
      00041E F0               [24] 1270 	movx	@dptr,a
      00041F 80 0A            [24] 1271 	sjmp	00119$
      000421                       1272 00118$:
                                   1273 ;	main.c:190: number2=number2;
      000421 90r00rD1         [24] 1274 	mov	dptr,#_main_number2_65536_49
      000424 E5*07            [12] 1275 	mov	a,_main_sloc4_1_0
      000426 F0               [24] 1276 	movx	@dptr,a
      000427 E5*08            [12] 1277 	mov	a,(_main_sloc4_1_0 + 1)
      000429 A3               [24] 1278 	inc	dptr
      00042A F0               [24] 1279 	movx	@dptr,a
      00042B                       1280 00119$:
                                   1281 ;	main.c:192: buffer_n[i]=malloc(number2);
      00042B C0 00            [24] 1282 	push	ar0
      00042D C0 01            [24] 1283 	push	ar1
      00042F E5*02            [12] 1284 	mov	a,_main_sloc1_1_0
      000431 25*02            [12] 1285 	add	a,_main_sloc1_1_0
      000433 F8               [12] 1286 	mov	r0,a
      000434 E5*03            [12] 1287 	mov	a,(_main_sloc1_1_0 + 1)
      000436 33               [12] 1288 	rlc	a
      000437 F9               [12] 1289 	mov	r1,a
      000438 E8               [12] 1290 	mov	a,r0
      000439 24r03            [12] 1291 	add	a,#_main_buffer_n_65536_49
      00043B F5*07            [12] 1292 	mov	_main_sloc4_1_0,a
      00043D E9               [12] 1293 	mov	a,r1
      00043E 34s00            [12] 1294 	addc	a,#(_main_buffer_n_65536_49 >> 8)
      000440 F5*08            [12] 1295 	mov	(_main_sloc4_1_0 + 1),a
      000442 90r00rD1         [24] 1296 	mov	dptr,#_main_number2_65536_49
      000445 E0               [24] 1297 	movx	a,@dptr
      000446 F5*05            [12] 1298 	mov	_main_sloc3_1_0,a
      000448 A3               [24] 1299 	inc	dptr
      000449 E0               [24] 1300 	movx	a,@dptr
      00044A F5*06            [12] 1301 	mov	(_main_sloc3_1_0 + 1),a
      00044C 85*05 82         [24] 1302 	mov	dpl,_main_sloc3_1_0
      00044F 85*06 83         [24] 1303 	mov	dph,(_main_sloc3_1_0 + 1)
      000452 C0 05            [24] 1304 	push	ar5
      000454 C0 04            [24] 1305 	push	ar4
      000456 12r00r00         [24] 1306 	lcall	_malloc
      000459 A8 82            [24] 1307 	mov	r0,dpl
      00045B A9 83            [24] 1308 	mov	r1,dph
      00045D D0 04            [24] 1309 	pop	ar4
      00045F D0 05            [24] 1310 	pop	ar5
      000461 85*07 82         [24] 1311 	mov	dpl,_main_sloc4_1_0
      000464 85*08 83         [24] 1312 	mov	dph,(_main_sloc4_1_0 + 1)
      000467 E8               [12] 1313 	mov	a,r0
      000468 F0               [24] 1314 	movx	@dptr,a
      000469 E9               [12] 1315 	mov	a,r1
      00046A A3               [24] 1316 	inc	dptr
      00046B F0               [24] 1317 	movx	@dptr,a
                                   1318 ;	main.c:194: if(buffer_n[i]==NULL)
      00046C E8               [12] 1319 	mov	a,r0
      00046D 49               [12] 1320 	orl	a,r1
      00046E D0 01            [24] 1321 	pop	ar1
      000470 D0 00            [24] 1322 	pop	ar0
      000472 70 39            [24] 1323 	jnz	00122$
                                   1324 ;	main.c:196: printf_tiny("\n\rMemory Allocation for Buffer_%d Failed\n\rPress '+' to Try again\n\r",i+2);
      000474 C0 00            [24] 1325 	push	ar0
      000476 C0 01            [24] 1326 	push	ar1
      000478 74 02            [12] 1327 	mov	a,#0x02
      00047A 25*02            [12] 1328 	add	a,_main_sloc1_1_0
      00047C F8               [12] 1329 	mov	r0,a
      00047D E4               [12] 1330 	clr	a
      00047E 35*03            [12] 1331 	addc	a,(_main_sloc1_1_0 + 1)
      000480 F9               [12] 1332 	mov	r1,a
      000481 C0 05            [24] 1333 	push	ar5
      000483 C0 04            [24] 1334 	push	ar4
      000485 C0 01            [24] 1335 	push	ar1
      000487 C0 00            [24] 1336 	push	ar0
      000489 C0 00            [24] 1337 	push	ar0
      00048B C0 01            [24] 1338 	push	ar1
      00048D 74r9C            [12] 1339 	mov	a,#___str_24
      00048F C0 E0            [24] 1340 	push	acc
      000491 74s03            [12] 1341 	mov	a,#(___str_24 >> 8)
      000493 C0 E0            [24] 1342 	push	acc
      000495 12r00r00         [24] 1343 	lcall	_printf_tiny
      000498 E5 81            [12] 1344 	mov	a,sp
      00049A 24 FC            [12] 1345 	add	a,#0xfc
      00049C F5 81            [12] 1346 	mov	sp,a
      00049E D0 00            [24] 1347 	pop	ar0
      0004A0 D0 01            [24] 1348 	pop	ar1
      0004A2 D0 04            [24] 1349 	pop	ar4
      0004A4 D0 05            [24] 1350 	pop	ar5
      0004A6 D0 01            [24] 1351 	pop	ar1
      0004A8 D0 00            [24] 1352 	pop	ar0
      0004AA 02r02r6C         [24] 1353 	ljmp	00116$
      0004AD                       1354 00122$:
                                   1355 ;	main.c:200: printf_tiny("\n\rMemory Allocation Successful for Buffer_%d\n\r",(i+2));
      0004AD C0 00            [24] 1356 	push	ar0
      0004AF C0 01            [24] 1357 	push	ar1
      0004B1 74 02            [12] 1358 	mov	a,#0x02
      0004B3 25*02            [12] 1359 	add	a,_main_sloc1_1_0
      0004B5 F8               [12] 1360 	mov	r0,a
      0004B6 E4               [12] 1361 	clr	a
      0004B7 35*03            [12] 1362 	addc	a,(_main_sloc1_1_0 + 1)
      0004B9 F9               [12] 1363 	mov	r1,a
      0004BA C0 05            [24] 1364 	push	ar5
      0004BC C0 04            [24] 1365 	push	ar4
      0004BE C0 01            [24] 1366 	push	ar1
      0004C0 C0 00            [24] 1367 	push	ar0
      0004C2 C0 00            [24] 1368 	push	ar0
      0004C4 C0 01            [24] 1369 	push	ar1
      0004C6 74rDF            [12] 1370 	mov	a,#___str_25
      0004C8 C0 E0            [24] 1371 	push	acc
      0004CA 74s03            [12] 1372 	mov	a,#(___str_25 >> 8)
      0004CC C0 E0            [24] 1373 	push	acc
      0004CE 12r00r00         [24] 1374 	lcall	_printf_tiny
      0004D1 E5 81            [12] 1375 	mov	a,sp
      0004D3 24 FC            [12] 1376 	add	a,#0xfc
      0004D5 F5 81            [12] 1377 	mov	sp,a
      0004D7 D0 00            [24] 1378 	pop	ar0
      0004D9 D0 01            [24] 1379 	pop	ar1
                                   1380 ;	main.c:201: printf_tiny("\n\rBuffer_%d allocated of size %d\n\r",(i+2),number2);
      0004DB C0 01            [24] 1381 	push	ar1
      0004DD C0 00            [24] 1382 	push	ar0
      0004DF C0*05            [24] 1383 	push	_main_sloc3_1_0
      0004E1 C0*06            [24] 1384 	push	(_main_sloc3_1_0 + 1)
      0004E3 C0 00            [24] 1385 	push	ar0
      0004E5 C0 01            [24] 1386 	push	ar1
      0004E7 74r0E            [12] 1387 	mov	a,#___str_26
      0004E9 C0 E0            [24] 1388 	push	acc
      0004EB 74s04            [12] 1389 	mov	a,#(___str_26 >> 8)
      0004ED C0 E0            [24] 1390 	push	acc
      0004EF 12r00r00         [24] 1391 	lcall	_printf_tiny
      0004F2 E5 81            [12] 1392 	mov	a,sp
      0004F4 24 FA            [12] 1393 	add	a,#0xfa
      0004F6 F5 81            [12] 1394 	mov	sp,a
      0004F8 D0 00            [24] 1395 	pop	ar0
      0004FA D0 01            [24] 1396 	pop	ar1
                                   1397 ;	main.c:202: printf_tiny("\n\rStart Address of buffer_%d = 0x%x\n\r",(i+2),(uint16_t)(buffer_n[i]));
      0004FC 85*07 82         [24] 1398 	mov	dpl,_main_sloc4_1_0
      0004FF 85*08 83         [24] 1399 	mov	dph,(_main_sloc4_1_0 + 1)
      000502 E0               [24] 1400 	movx	a,@dptr
      000503 FA               [12] 1401 	mov	r2,a
      000504 A3               [24] 1402 	inc	dptr
      000505 E0               [24] 1403 	movx	a,@dptr
      000506 FB               [12] 1404 	mov	r3,a
      000507 C0 01            [24] 1405 	push	ar1
      000509 C0 00            [24] 1406 	push	ar0
      00050B C0 02            [24] 1407 	push	ar2
      00050D C0 03            [24] 1408 	push	ar3
      00050F C0 00            [24] 1409 	push	ar0
      000511 C0 01            [24] 1410 	push	ar1
      000513 74r31            [12] 1411 	mov	a,#___str_27
      000515 C0 E0            [24] 1412 	push	acc
      000517 74s04            [12] 1413 	mov	a,#(___str_27 >> 8)
      000519 C0 E0            [24] 1414 	push	acc
      00051B 12r00r00         [24] 1415 	lcall	_printf_tiny
      00051E E5 81            [12] 1416 	mov	a,sp
      000520 24 FA            [12] 1417 	add	a,#0xfa
      000522 F5 81            [12] 1418 	mov	sp,a
      000524 D0 00            [24] 1419 	pop	ar0
      000526 D0 01            [24] 1420 	pop	ar1
      000528 D0 04            [24] 1421 	pop	ar4
      00052A D0 05            [24] 1422 	pop	ar5
                                   1423 ;	main.c:203: buff_size[j]=number2;
      00052C E5*00            [12] 1424 	mov	a,_main_sloc0_1_0
      00052E 25*00            [12] 1425 	add	a,_main_sloc0_1_0
      000530 FA               [12] 1426 	mov	r2,a
      000531 E5*01            [12] 1427 	mov	a,(_main_sloc0_1_0 + 1)
      000533 33               [12] 1428 	rlc	a
      000534 FB               [12] 1429 	mov	r3,a
      000535 EA               [12] 1430 	mov	a,r2
      000536 24r6B            [12] 1431 	add	a,#_main_buff_size_65536_49
      000538 F5 82            [12] 1432 	mov	dpl,a
      00053A EB               [12] 1433 	mov	a,r3
      00053B 34s00            [12] 1434 	addc	a,#(_main_buff_size_65536_49 >> 8)
      00053D F5 83            [12] 1435 	mov	dph,a
      00053F E5*05            [12] 1436 	mov	a,_main_sloc3_1_0
      000541 F0               [24] 1437 	movx	@dptr,a
      000542 E5*06            [12] 1438 	mov	a,(_main_sloc3_1_0 + 1)
      000544 A3               [24] 1439 	inc	dptr
      000545 F0               [24] 1440 	movx	@dptr,a
                                   1441 ;	main.c:204: j++;
      000546 05*00            [12] 1442 	inc	_main_sloc0_1_0
      000548 E4               [12] 1443 	clr	a
      000549 B5*00 02         [24] 1444 	cjne	a,_main_sloc0_1_0,00387$
      00054C 05*01            [12] 1445 	inc	(_main_sloc0_1_0 + 1)
      00054E                       1446 00387$:
                                   1447 ;	main.c:205: i++;
      00054E 05*02            [12] 1448 	inc	_main_sloc1_1_0
      000550 E4               [12] 1449 	clr	a
      000551 B5*02 02         [24] 1450 	cjne	a,_main_sloc1_1_0,00388$
      000554 05*03            [12] 1451 	inc	(_main_sloc1_1_0 + 1)
      000556                       1452 00388$:
      000556 D0 01            [24] 1453 	pop	ar1
      000558 D0 00            [24] 1454 	pop	ar0
      00055A 02r02r6C         [24] 1455 	ljmp	00116$
      00055D                       1456 00164$:
                                   1457 ;	main.c:211: else if(input_char == '-')
      00055D 74 2D            [12] 1458 	mov	a,#0x2d
      00055F B5*04 02         [24] 1459 	cjne	a,_main_sloc2_1_0,00389$
      000562 80 03            [24] 1460 	sjmp	00390$
      000564                       1461 00389$:
      000564 02r07r08         [24] 1462 	ljmp	00161$
      000567                       1463 00390$:
                                   1464 ;	main.c:213: DEBUGPORT(2);
      000567 75 82 02         [24] 1465 	mov	dpl,#0x02
      00056A C0 05            [24] 1466 	push	ar5
      00056C C0 04            [24] 1467 	push	ar4
      00056E C0 01            [24] 1468 	push	ar1
      000570 C0 00            [24] 1469 	push	ar0
      000572 12r00r07         [24] 1470 	lcall	_dataout
                                   1471 ;	main.c:214: printf_tiny("\n\rEnter a valid buffer number\n\r");
      000575 74r57            [12] 1472 	mov	a,#___str_28
      000577 C0 E0            [24] 1473 	push	acc
      000579 74s04            [12] 1474 	mov	a,#(___str_28 >> 8)
      00057B C0 E0            [24] 1475 	push	acc
      00057D 12r00r00         [24] 1476 	lcall	_printf_tiny
      000580 15 81            [12] 1477 	dec	sp
      000582 15 81            [12] 1478 	dec	sp
                                   1479 ;	main.c:217: num_del=num_input();
      000584 12r0Fr15         [24] 1480 	lcall	_num_input
      000587 AA 82            [24] 1481 	mov	r2,dpl
      000589 AB 83            [24] 1482 	mov	r3,dph
      00058B D0 00            [24] 1483 	pop	ar0
      00058D D0 01            [24] 1484 	pop	ar1
      00058F D0 04            [24] 1485 	pop	ar4
      000591 D0 05            [24] 1486 	pop	ar5
                                   1487 ;	main.c:219: if(num_del == 0)
      000593 EA               [12] 1488 	mov	a,r2
      000594 4B               [12] 1489 	orl	a,r3
      000595 70 22            [24] 1490 	jnz	00132$
                                   1491 ;	main.c:221: printf_tiny("\n\rBuffer 0 cannot be deleted!\n\r");
      000597 C0 05            [24] 1492 	push	ar5
      000599 C0 04            [24] 1493 	push	ar4
      00059B C0 01            [24] 1494 	push	ar1
      00059D C0 00            [24] 1495 	push	ar0
      00059F 74r77            [12] 1496 	mov	a,#___str_29
      0005A1 C0 E0            [24] 1497 	push	acc
      0005A3 74s04            [12] 1498 	mov	a,#(___str_29 >> 8)
      0005A5 C0 E0            [24] 1499 	push	acc
      0005A7 12r00r00         [24] 1500 	lcall	_printf_tiny
      0005AA 15 81            [12] 1501 	dec	sp
      0005AC 15 81            [12] 1502 	dec	sp
      0005AE D0 00            [24] 1503 	pop	ar0
      0005B0 D0 01            [24] 1504 	pop	ar1
      0005B2 D0 04            [24] 1505 	pop	ar4
      0005B4 D0 05            [24] 1506 	pop	ar5
      0005B6 02r02r6C         [24] 1507 	ljmp	00116$
      0005B9                       1508 00132$:
                                   1509 ;	main.c:223: else if(num_del == 1)
      0005B9 BA 01 56         [24] 1510 	cjne	r2,#0x01,00129$
      0005BC BB 00 53         [24] 1511 	cjne	r3,#0x00,00129$
                                   1512 ;	main.c:225: free(buffer_1);
      0005BF C0 00            [24] 1513 	push	ar0
      0005C1 C0 01            [24] 1514 	push	ar1
      0005C3 90r00r01         [24] 1515 	mov	dptr,#_main_buffer_1_65536_49
      0005C6 E0               [24] 1516 	movx	a,@dptr
      0005C7 F8               [12] 1517 	mov	r0,a
      0005C8 A3               [24] 1518 	inc	dptr
      0005C9 E0               [24] 1519 	movx	a,@dptr
      0005CA F9               [12] 1520 	mov	r1,a
      0005CB 7F 00            [12] 1521 	mov	r7,#0x00
      0005CD 88 82            [24] 1522 	mov	dpl,r0
      0005CF 89 83            [24] 1523 	mov	dph,r1
      0005D1 8F F0            [24] 1524 	mov	b,r7
      0005D3 C0 05            [24] 1525 	push	ar5
      0005D5 C0 04            [24] 1526 	push	ar4
      0005D7 C0 01            [24] 1527 	push	ar1
      0005D9 C0 00            [24] 1528 	push	ar0
      0005DB 12r00r00         [24] 1529 	lcall	_free
                                   1530 ;	main.c:226: printf_tiny("\n\rDeleting buffer 1\n\r");
      0005DE 74r97            [12] 1531 	mov	a,#___str_30
      0005E0 C0 E0            [24] 1532 	push	acc
      0005E2 74s04            [12] 1533 	mov	a,#(___str_30 >> 8)
      0005E4 C0 E0            [24] 1534 	push	acc
      0005E6 12r00r00         [24] 1535 	lcall	_printf_tiny
      0005E9 15 81            [12] 1536 	dec	sp
      0005EB 15 81            [12] 1537 	dec	sp
                                   1538 ;	main.c:227: buffer_1 = 0;
      0005ED 90r00r01         [24] 1539 	mov	dptr,#_main_buffer_1_65536_49
      0005F0 E4               [12] 1540 	clr	a
      0005F1 F0               [24] 1541 	movx	@dptr,a
      0005F2 A3               [24] 1542 	inc	dptr
      0005F3 F0               [24] 1543 	movx	@dptr,a
                                   1544 ;	main.c:228: printf_tiny("Buffer 1 is free");
      0005F4 74rAD            [12] 1545 	mov	a,#___str_31
      0005F6 C0 E0            [24] 1546 	push	acc
      0005F8 74s04            [12] 1547 	mov	a,#(___str_31 >> 8)
      0005FA C0 E0            [24] 1548 	push	acc
      0005FC 12r00r00         [24] 1549 	lcall	_printf_tiny
      0005FF 15 81            [12] 1550 	dec	sp
      000601 15 81            [12] 1551 	dec	sp
      000603 D0 00            [24] 1552 	pop	ar0
      000605 D0 01            [24] 1553 	pop	ar1
      000607 D0 04            [24] 1554 	pop	ar4
      000609 D0 05            [24] 1555 	pop	ar5
      00060B D0 01            [24] 1556 	pop	ar1
      00060D D0 00            [24] 1557 	pop	ar0
      00060F 02r02r6C         [24] 1558 	ljmp	00116$
      000612                       1559 00129$:
                                   1560 ;	main.c:230: else if(num_del>1 && num_del <(i+2))
      000612 C3               [12] 1561 	clr	c
      000613 74 01            [12] 1562 	mov	a,#0x01
      000615 9A               [12] 1563 	subb	a,r2
      000616 E4               [12] 1564 	clr	a
      000617 9B               [12] 1565 	subb	a,r3
      000618 40 03            [24] 1566 	jc	00394$
      00061A 02r06rE6         [24] 1567 	ljmp	00125$
      00061D                       1568 00394$:
      00061D 74 02            [12] 1569 	mov	a,#0x02
      00061F 25*02            [12] 1570 	add	a,_main_sloc1_1_0
      000621 FE               [12] 1571 	mov	r6,a
      000622 E4               [12] 1572 	clr	a
      000623 35*03            [12] 1573 	addc	a,(_main_sloc1_1_0 + 1)
      000625 FF               [12] 1574 	mov	r7,a
      000626 C3               [12] 1575 	clr	c
      000627 EA               [12] 1576 	mov	a,r2
      000628 9E               [12] 1577 	subb	a,r6
      000629 EB               [12] 1578 	mov	a,r3
      00062A 9F               [12] 1579 	subb	a,r7
      00062B 40 03            [24] 1580 	jc	00395$
      00062D 02r06rE6         [24] 1581 	ljmp	00125$
      000630                       1582 00395$:
                                   1583 ;	main.c:232: printf_tiny("\n\rDeleting buffer %d \n\r",num_del);
      000630 C0 00            [24] 1584 	push	ar0
      000632 C0 01            [24] 1585 	push	ar1
      000634 C0 05            [24] 1586 	push	ar5
      000636 C0 04            [24] 1587 	push	ar4
      000638 C0 03            [24] 1588 	push	ar3
      00063A C0 02            [24] 1589 	push	ar2
      00063C C0 01            [24] 1590 	push	ar1
      00063E C0 00            [24] 1591 	push	ar0
      000640 C0 02            [24] 1592 	push	ar2
      000642 C0 03            [24] 1593 	push	ar3
      000644 74rBE            [12] 1594 	mov	a,#___str_32
      000646 C0 E0            [24] 1595 	push	acc
      000648 74s04            [12] 1596 	mov	a,#(___str_32 >> 8)
      00064A C0 E0            [24] 1597 	push	acc
      00064C 12r00r00         [24] 1598 	lcall	_printf_tiny
      00064F E5 81            [12] 1599 	mov	a,sp
      000651 24 FC            [12] 1600 	add	a,#0xfc
      000653 F5 81            [12] 1601 	mov	sp,a
      000655 D0 00            [24] 1602 	pop	ar0
      000657 D0 01            [24] 1603 	pop	ar1
      000659 D0 02            [24] 1604 	pop	ar2
      00065B D0 03            [24] 1605 	pop	ar3
      00065D D0 04            [24] 1606 	pop	ar4
      00065F D0 05            [24] 1607 	pop	ar5
                                   1608 ;	main.c:233: free(buffer_n[num_del-2]);
      000661 8A 07            [24] 1609 	mov	ar7,r2
      000663 1F               [12] 1610 	dec	r7
      000664 1F               [12] 1611 	dec	r7
      000665 C2 D5            [12] 1612 	clr	F0
      000667 75 F0 02         [24] 1613 	mov	b,#0x02
      00066A EF               [12] 1614 	mov	a,r7
      00066B 30 E7 04         [24] 1615 	jnb	acc.7,00396$
      00066E B2 D5            [12] 1616 	cpl	F0
      000670 F4               [12] 1617 	cpl	a
      000671 04               [12] 1618 	inc	a
      000672                       1619 00396$:
      000672 A4               [48] 1620 	mul	ab
      000673 30 D5 0A         [24] 1621 	jnb	F0,00397$
      000676 F4               [12] 1622 	cpl	a
      000677 24 01            [12] 1623 	add	a,#0x01
      000679 C5 F0            [12] 1624 	xch	a,b
      00067B F4               [12] 1625 	cpl	a
      00067C 34 00            [12] 1626 	addc	a,#0x00
      00067E C5 F0            [12] 1627 	xch	a,b
      000680                       1628 00397$:
      000680 24r03            [12] 1629 	add	a,#_main_buffer_n_65536_49
      000682 F5*07            [12] 1630 	mov	_main_sloc4_1_0,a
      000684 74s00            [12] 1631 	mov	a,#(_main_buffer_n_65536_49 >> 8)
      000686 35 F0            [12] 1632 	addc	a,b
      000688 F5*08            [12] 1633 	mov	(_main_sloc4_1_0 + 1),a
      00068A 85*07 82         [24] 1634 	mov	dpl,_main_sloc4_1_0
      00068D 85*08 83         [24] 1635 	mov	dph,(_main_sloc4_1_0 + 1)
      000690 E0               [24] 1636 	movx	a,@dptr
      000691 F8               [12] 1637 	mov	r0,a
      000692 A3               [24] 1638 	inc	dptr
      000693 E0               [24] 1639 	movx	a,@dptr
      000694 F9               [12] 1640 	mov	r1,a
      000695 7F 00            [12] 1641 	mov	r7,#0x00
      000697 88 82            [24] 1642 	mov	dpl,r0
      000699 89 83            [24] 1643 	mov	dph,r1
      00069B 8F F0            [24] 1644 	mov	b,r7
      00069D C0 05            [24] 1645 	push	ar5
      00069F C0 04            [24] 1646 	push	ar4
      0006A1 C0 03            [24] 1647 	push	ar3
      0006A3 C0 02            [24] 1648 	push	ar2
      0006A5 C0 01            [24] 1649 	push	ar1
      0006A7 C0 00            [24] 1650 	push	ar0
      0006A9 12r00r00         [24] 1651 	lcall	_free
      0006AC D0 00            [24] 1652 	pop	ar0
      0006AE D0 01            [24] 1653 	pop	ar1
      0006B0 D0 02            [24] 1654 	pop	ar2
      0006B2 D0 03            [24] 1655 	pop	ar3
                                   1656 ;	main.c:234: printf_tiny("\n\rBuffer %d is Free\n\r",num_del);
      0006B4 C0 01            [24] 1657 	push	ar1
      0006B6 C0 00            [24] 1658 	push	ar0
      0006B8 C0 02            [24] 1659 	push	ar2
      0006BA C0 03            [24] 1660 	push	ar3
      0006BC 74rD6            [12] 1661 	mov	a,#___str_33
      0006BE C0 E0            [24] 1662 	push	acc
      0006C0 74s04            [12] 1663 	mov	a,#(___str_33 >> 8)
      0006C2 C0 E0            [24] 1664 	push	acc
      0006C4 12r00r00         [24] 1665 	lcall	_printf_tiny
      0006C7 E5 81            [12] 1666 	mov	a,sp
      0006C9 24 FC            [12] 1667 	add	a,#0xfc
      0006CB F5 81            [12] 1668 	mov	sp,a
      0006CD D0 00            [24] 1669 	pop	ar0
      0006CF D0 01            [24] 1670 	pop	ar1
      0006D1 D0 04            [24] 1671 	pop	ar4
      0006D3 D0 05            [24] 1672 	pop	ar5
                                   1673 ;	main.c:235: buffer_n[num_del-2]=0;
      0006D5 85*07 82         [24] 1674 	mov	dpl,_main_sloc4_1_0
      0006D8 85*08 83         [24] 1675 	mov	dph,(_main_sloc4_1_0 + 1)
      0006DB E4               [12] 1676 	clr	a
      0006DC F0               [24] 1677 	movx	@dptr,a
      0006DD A3               [24] 1678 	inc	dptr
      0006DE F0               [24] 1679 	movx	@dptr,a
      0006DF D0 01            [24] 1680 	pop	ar1
      0006E1 D0 00            [24] 1681 	pop	ar0
      0006E3 02r02r6C         [24] 1682 	ljmp	00116$
      0006E6                       1683 00125$:
                                   1684 ;	main.c:240: printf_tiny("\n\rEnter a valid buffer number\n\rPress '-' to delete any valid buffer\n\r");
      0006E6 C0 05            [24] 1685 	push	ar5
      0006E8 C0 04            [24] 1686 	push	ar4
      0006EA C0 01            [24] 1687 	push	ar1
      0006EC C0 00            [24] 1688 	push	ar0
      0006EE 74rEC            [12] 1689 	mov	a,#___str_34
      0006F0 C0 E0            [24] 1690 	push	acc
      0006F2 74s04            [12] 1691 	mov	a,#(___str_34 >> 8)
      0006F4 C0 E0            [24] 1692 	push	acc
      0006F6 12r00r00         [24] 1693 	lcall	_printf_tiny
      0006F9 15 81            [12] 1694 	dec	sp
      0006FB 15 81            [12] 1695 	dec	sp
      0006FD D0 00            [24] 1696 	pop	ar0
      0006FF D0 01            [24] 1697 	pop	ar1
      000701 D0 04            [24] 1698 	pop	ar4
      000703 D0 05            [24] 1699 	pop	ar5
      000705 02r02r6C         [24] 1700 	ljmp	00116$
      000708                       1701 00161$:
                                   1702 ;	main.c:249: else if(input_char == '?')
      000708 74 3F            [12] 1703 	mov	a,#0x3f
      00070A B5*04 02         [24] 1704 	cjne	a,_main_sloc2_1_0,00398$
      00070D 80 03            [24] 1705 	sjmp	00399$
      00070F                       1706 00398$:
      00070F 02r0BrC2         [24] 1707 	ljmp	00158$
      000712                       1708 00399$:
                                   1709 ;	main.c:251: DEBUGPORT(3);
      000712 75 82 03         [24] 1710 	mov	dpl,#0x03
      000715 C0 05            [24] 1711 	push	ar5
      000717 C0 04            [24] 1712 	push	ar4
      000719 C0 01            [24] 1713 	push	ar1
      00071B C0 00            [24] 1714 	push	ar0
      00071D 12r00r07         [24] 1715 	lcall	_dataout
                                   1716 ;	main.c:252: printf_tiny("****************************** HEAP REPORT ******************************");
      000720 74r32            [12] 1717 	mov	a,#___str_35
      000722 C0 E0            [24] 1718 	push	acc
      000724 74s05            [12] 1719 	mov	a,#(___str_35 >> 8)
      000726 C0 E0            [24] 1720 	push	acc
      000728 12r00r00         [24] 1721 	lcall	_printf_tiny
      00072B 15 81            [12] 1722 	dec	sp
      00072D 15 81            [12] 1723 	dec	sp
                                   1724 ;	main.c:254: printf_tiny("\n\rBuffer 0\n\r");
      00072F 74r7C            [12] 1725 	mov	a,#___str_36
      000731 C0 E0            [24] 1726 	push	acc
      000733 74s05            [12] 1727 	mov	a,#(___str_36 >> 8)
      000735 C0 E0            [24] 1728 	push	acc
      000737 12r00r00         [24] 1729 	lcall	_printf_tiny
      00073A 15 81            [12] 1730 	dec	sp
      00073C 15 81            [12] 1731 	dec	sp
                                   1732 ;	main.c:255: printf_tiny("\n\rStart Address = 0x%x\n\r",Buffer_0temp);
      00073E C0*0B            [24] 1733 	push	_main_sloc6_1_0
      000740 C0*0C            [24] 1734 	push	(_main_sloc6_1_0 + 1)
      000742 74r89            [12] 1735 	mov	a,#___str_37
      000744 C0 E0            [24] 1736 	push	acc
      000746 74s05            [12] 1737 	mov	a,#(___str_37 >> 8)
      000748 C0 E0            [24] 1738 	push	acc
      00074A 12r00r00         [24] 1739 	lcall	_printf_tiny
      00074D E5 81            [12] 1740 	mov	a,sp
      00074F 24 FC            [12] 1741 	add	a,#0xfc
      000751 F5 81            [12] 1742 	mov	sp,a
      000753 D0 00            [24] 1743 	pop	ar0
      000755 D0 01            [24] 1744 	pop	ar1
      000757 D0 04            [24] 1745 	pop	ar4
      000759 D0 05            [24] 1746 	pop	ar5
                                   1747 ;	main.c:256: printf_tiny("\n\rEnding Address = 0x%x\n\r",(Buffer_0temp)+(number));
      00075B 90r00rCF         [24] 1748 	mov	dptr,#_main_number_65536_49
      00075E E0               [24] 1749 	movx	a,@dptr
      00075F FE               [12] 1750 	mov	r6,a
      000760 A3               [24] 1751 	inc	dptr
      000761 E0               [24] 1752 	movx	a,@dptr
      000762 FF               [12] 1753 	mov	r7,a
      000763 AA*0B            [24] 1754 	mov	r2,_main_sloc6_1_0
      000765 AB*0C            [24] 1755 	mov	r3,(_main_sloc6_1_0 + 1)
      000767 EE               [12] 1756 	mov	a,r6
      000768 2A               [12] 1757 	add	a,r2
      000769 FA               [12] 1758 	mov	r2,a
      00076A EF               [12] 1759 	mov	a,r7
      00076B 3B               [12] 1760 	addc	a,r3
      00076C FB               [12] 1761 	mov	r3,a
      00076D C0 07            [24] 1762 	push	ar7
      00076F C0 06            [24] 1763 	push	ar6
      000771 C0 05            [24] 1764 	push	ar5
      000773 C0 04            [24] 1765 	push	ar4
      000775 C0 01            [24] 1766 	push	ar1
      000777 C0 00            [24] 1767 	push	ar0
      000779 C0 02            [24] 1768 	push	ar2
      00077B C0 03            [24] 1769 	push	ar3
      00077D 74rA2            [12] 1770 	mov	a,#___str_38
      00077F C0 E0            [24] 1771 	push	acc
      000781 74s05            [12] 1772 	mov	a,#(___str_38 >> 8)
      000783 C0 E0            [24] 1773 	push	acc
      000785 12r00r00         [24] 1774 	lcall	_printf_tiny
      000788 E5 81            [12] 1775 	mov	a,sp
      00078A 24 FC            [12] 1776 	add	a,#0xfc
      00078C F5 81            [12] 1777 	mov	sp,a
      00078E D0 00            [24] 1778 	pop	ar0
      000790 D0 01            [24] 1779 	pop	ar1
      000792 D0 04            [24] 1780 	pop	ar4
      000794 D0 05            [24] 1781 	pop	ar5
      000796 D0 06            [24] 1782 	pop	ar6
      000798 D0 07            [24] 1783 	pop	ar7
                                   1784 ;	main.c:257: printf_tiny("\n\rBuffer Size = %d\n\r",number);
      00079A C0 07            [24] 1785 	push	ar7
      00079C C0 06            [24] 1786 	push	ar6
      00079E C0 05            [24] 1787 	push	ar5
      0007A0 C0 04            [24] 1788 	push	ar4
      0007A2 C0 01            [24] 1789 	push	ar1
      0007A4 C0 00            [24] 1790 	push	ar0
      0007A6 C0 06            [24] 1791 	push	ar6
      0007A8 C0 07            [24] 1792 	push	ar7
      0007AA 74rBC            [12] 1793 	mov	a,#___str_39
      0007AC C0 E0            [24] 1794 	push	acc
      0007AE 74s05            [12] 1795 	mov	a,#(___str_39 >> 8)
      0007B0 C0 E0            [24] 1796 	push	acc
      0007B2 12r00r00         [24] 1797 	lcall	_printf_tiny
      0007B5 E5 81            [12] 1798 	mov	a,sp
      0007B7 24 FC            [12] 1799 	add	a,#0xfc
      0007B9 F5 81            [12] 1800 	mov	sp,a
      0007BB D0 00            [24] 1801 	pop	ar0
      0007BD D0 01            [24] 1802 	pop	ar1
                                   1803 ;	main.c:258: printf_tiny("\n\rStorage characters in buffer = %d\n\r",char_stored);
      0007BF 90r00r67         [24] 1804 	mov	dptr,#_main_char_stored_65536_49
      0007C2 E0               [24] 1805 	movx	a,@dptr
      0007C3 FA               [12] 1806 	mov	r2,a
      0007C4 A3               [24] 1807 	inc	dptr
      0007C5 E0               [24] 1808 	movx	a,@dptr
      0007C6 FB               [12] 1809 	mov	r3,a
      0007C7 C0 03            [24] 1810 	push	ar3
      0007C9 C0 02            [24] 1811 	push	ar2
      0007CB C0 01            [24] 1812 	push	ar1
      0007CD C0 00            [24] 1813 	push	ar0
      0007CF C0 02            [24] 1814 	push	ar2
      0007D1 C0 03            [24] 1815 	push	ar3
      0007D3 74rD1            [12] 1816 	mov	a,#___str_40
      0007D5 C0 E0            [24] 1817 	push	acc
      0007D7 74s05            [12] 1818 	mov	a,#(___str_40 >> 8)
      0007D9 C0 E0            [24] 1819 	push	acc
      0007DB 12r00r00         [24] 1820 	lcall	_printf_tiny
      0007DE E5 81            [12] 1821 	mov	a,sp
      0007E0 24 FC            [12] 1822 	add	a,#0xfc
      0007E2 F5 81            [12] 1823 	mov	sp,a
      0007E4 D0 00            [24] 1824 	pop	ar0
      0007E6 D0 01            [24] 1825 	pop	ar1
      0007E8 D0 02            [24] 1826 	pop	ar2
      0007EA D0 03            [24] 1827 	pop	ar3
      0007EC D0 04            [24] 1828 	pop	ar4
      0007EE D0 05            [24] 1829 	pop	ar5
      0007F0 D0 06            [24] 1830 	pop	ar6
      0007F2 D0 07            [24] 1831 	pop	ar7
                                   1832 ;	main.c:259: printf_tiny("\n\rFree Spaces in buffer = %d\n\r",(number-char_stored));
      0007F4 EE               [12] 1833 	mov	a,r6
      0007F5 C3               [12] 1834 	clr	c
      0007F6 9A               [12] 1835 	subb	a,r2
      0007F7 FA               [12] 1836 	mov	r2,a
      0007F8 EF               [12] 1837 	mov	a,r7
      0007F9 9B               [12] 1838 	subb	a,r3
      0007FA FB               [12] 1839 	mov	r3,a
      0007FB C0 07            [24] 1840 	push	ar7
      0007FD C0 06            [24] 1841 	push	ar6
      0007FF C0 05            [24] 1842 	push	ar5
      000801 C0 04            [24] 1843 	push	ar4
      000803 C0 01            [24] 1844 	push	ar1
      000805 C0 00            [24] 1845 	push	ar0
      000807 C0 02            [24] 1846 	push	ar2
      000809 C0 03            [24] 1847 	push	ar3
      00080B 74rF7            [12] 1848 	mov	a,#___str_41
      00080D C0 E0            [24] 1849 	push	acc
      00080F 74s05            [12] 1850 	mov	a,#(___str_41 >> 8)
      000811 C0 E0            [24] 1851 	push	acc
      000813 12r00r00         [24] 1852 	lcall	_printf_tiny
      000816 E5 81            [12] 1853 	mov	a,sp
      000818 24 FC            [12] 1854 	add	a,#0xfc
      00081A F5 81            [12] 1855 	mov	sp,a
                                   1856 ;	main.c:260: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      00081C 74r16            [12] 1857 	mov	a,#___str_42
      00081E C0 E0            [24] 1858 	push	acc
      000820 74s06            [12] 1859 	mov	a,#(___str_42 >> 8)
      000822 C0 E0            [24] 1860 	push	acc
      000824 12r00r00         [24] 1861 	lcall	_printf_tiny
      000827 15 81            [12] 1862 	dec	sp
      000829 15 81            [12] 1863 	dec	sp
      00082B D0 00            [24] 1864 	pop	ar0
      00082D D0 01            [24] 1865 	pop	ar1
      00082F D0 04            [24] 1866 	pop	ar4
      000831 D0 05            [24] 1867 	pop	ar5
      000833 D0 06            [24] 1868 	pop	ar6
      000835 D0 07            [24] 1869 	pop	ar7
                                   1870 ;	main.c:262: if(buffer_1 != 0)
      000837 90r00r01         [24] 1871 	mov	dptr,#_main_buffer_1_65536_49
      00083A E0               [24] 1872 	movx	a,@dptr
      00083B F5 F0            [12] 1873 	mov	b,a
      00083D A3               [24] 1874 	inc	dptr
      00083E E0               [24] 1875 	movx	a,@dptr
      00083F 45 F0            [12] 1876 	orl	a,b
      000841 70 03            [24] 1877 	jnz	00400$
      000843 02r09r29         [24] 1878 	ljmp	00224$
      000846                       1879 00400$:
                                   1880 ;	main.c:264: printf_tiny("\n\rBuffer 1\n\r");
      000846 C0 07            [24] 1881 	push	ar7
      000848 C0 06            [24] 1882 	push	ar6
      00084A C0 05            [24] 1883 	push	ar5
      00084C C0 04            [24] 1884 	push	ar4
      00084E C0 01            [24] 1885 	push	ar1
      000850 C0 00            [24] 1886 	push	ar0
      000852 74r62            [12] 1887 	mov	a,#___str_43
      000854 C0 E0            [24] 1888 	push	acc
      000856 74s06            [12] 1889 	mov	a,#(___str_43 >> 8)
      000858 C0 E0            [24] 1890 	push	acc
      00085A 12r00r00         [24] 1891 	lcall	_printf_tiny
      00085D 15 81            [12] 1892 	dec	sp
      00085F 15 81            [12] 1893 	dec	sp
                                   1894 ;	main.c:265: printf_tiny("\n\rStart Address = 0x%x\n\r",Buffer_1temp);
      000861 C0*09            [24] 1895 	push	_main_sloc5_1_0
      000863 C0*0A            [24] 1896 	push	(_main_sloc5_1_0 + 1)
      000865 74r89            [12] 1897 	mov	a,#___str_37
      000867 C0 E0            [24] 1898 	push	acc
      000869 74s05            [12] 1899 	mov	a,#(___str_37 >> 8)
      00086B C0 E0            [24] 1900 	push	acc
      00086D 12r00r00         [24] 1901 	lcall	_printf_tiny
      000870 E5 81            [12] 1902 	mov	a,sp
      000872 24 FC            [12] 1903 	add	a,#0xfc
      000874 F5 81            [12] 1904 	mov	sp,a
      000876 D0 00            [24] 1905 	pop	ar0
      000878 D0 01            [24] 1906 	pop	ar1
      00087A D0 04            [24] 1907 	pop	ar4
      00087C D0 05            [24] 1908 	pop	ar5
      00087E D0 06            [24] 1909 	pop	ar6
      000880 D0 07            [24] 1910 	pop	ar7
                                   1911 ;	main.c:266: printf_tiny("\n\rEnding Address = 0x%x\n\r",Buffer_1temp+number);
      000882 AA*09            [24] 1912 	mov	r2,_main_sloc5_1_0
      000884 AB*0A            [24] 1913 	mov	r3,(_main_sloc5_1_0 + 1)
      000886 EE               [12] 1914 	mov	a,r6
      000887 2A               [12] 1915 	add	a,r2
      000888 FA               [12] 1916 	mov	r2,a
      000889 EF               [12] 1917 	mov	a,r7
      00088A 3B               [12] 1918 	addc	a,r3
      00088B FB               [12] 1919 	mov	r3,a
      00088C C0 07            [24] 1920 	push	ar7
      00088E C0 06            [24] 1921 	push	ar6
      000890 C0 05            [24] 1922 	push	ar5
      000892 C0 04            [24] 1923 	push	ar4
      000894 C0 01            [24] 1924 	push	ar1
      000896 C0 00            [24] 1925 	push	ar0
      000898 C0 02            [24] 1926 	push	ar2
      00089A C0 03            [24] 1927 	push	ar3
      00089C 74rA2            [12] 1928 	mov	a,#___str_38
      00089E C0 E0            [24] 1929 	push	acc
      0008A0 74s05            [12] 1930 	mov	a,#(___str_38 >> 8)
      0008A2 C0 E0            [24] 1931 	push	acc
      0008A4 12r00r00         [24] 1932 	lcall	_printf_tiny
      0008A7 E5 81            [12] 1933 	mov	a,sp
      0008A9 24 FC            [12] 1934 	add	a,#0xfc
      0008AB F5 81            [12] 1935 	mov	sp,a
      0008AD D0 00            [24] 1936 	pop	ar0
      0008AF D0 01            [24] 1937 	pop	ar1
      0008B1 D0 04            [24] 1938 	pop	ar4
      0008B3 D0 05            [24] 1939 	pop	ar5
      0008B5 D0 06            [24] 1940 	pop	ar6
      0008B7 D0 07            [24] 1941 	pop	ar7
                                   1942 ;	main.c:267: printf_tiny("\n\rBuffer Size = %d\n\r",number);
      0008B9 C0 07            [24] 1943 	push	ar7
      0008BB C0 06            [24] 1944 	push	ar6
      0008BD C0 05            [24] 1945 	push	ar5
      0008BF C0 04            [24] 1946 	push	ar4
      0008C1 C0 01            [24] 1947 	push	ar1
      0008C3 C0 00            [24] 1948 	push	ar0
      0008C5 C0 06            [24] 1949 	push	ar6
      0008C7 C0 07            [24] 1950 	push	ar7
      0008C9 74rBC            [12] 1951 	mov	a,#___str_39
      0008CB C0 E0            [24] 1952 	push	acc
      0008CD 74s05            [12] 1953 	mov	a,#(___str_39 >> 8)
      0008CF C0 E0            [24] 1954 	push	acc
      0008D1 12r00r00         [24] 1955 	lcall	_printf_tiny
      0008D4 E5 81            [12] 1956 	mov	a,sp
      0008D6 24 FC            [12] 1957 	add	a,#0xfc
      0008D8 F5 81            [12] 1958 	mov	sp,a
                                   1959 ;	main.c:268: printf_tiny("\n\rStorage characters in buffer = 0\n\r");
      0008DA 74r6F            [12] 1960 	mov	a,#___str_44
      0008DC C0 E0            [24] 1961 	push	acc
      0008DE 74s06            [12] 1962 	mov	a,#(___str_44 >> 8)
      0008E0 C0 E0            [24] 1963 	push	acc
      0008E2 12r00r00         [24] 1964 	lcall	_printf_tiny
      0008E5 15 81            [12] 1965 	dec	sp
      0008E7 15 81            [12] 1966 	dec	sp
      0008E9 D0 00            [24] 1967 	pop	ar0
      0008EB D0 01            [24] 1968 	pop	ar1
      0008ED D0 04            [24] 1969 	pop	ar4
      0008EF D0 05            [24] 1970 	pop	ar5
      0008F1 D0 06            [24] 1971 	pop	ar6
      0008F3 D0 07            [24] 1972 	pop	ar7
                                   1973 ;	main.c:269: printf_tiny("\n\rFree Spaces in buffer = %d\n\r",(number));
      0008F5 C0 05            [24] 1974 	push	ar5
      0008F7 C0 04            [24] 1975 	push	ar4
      0008F9 C0 01            [24] 1976 	push	ar1
      0008FB C0 00            [24] 1977 	push	ar0
      0008FD C0 06            [24] 1978 	push	ar6
      0008FF C0 07            [24] 1979 	push	ar7
      000901 74rF7            [12] 1980 	mov	a,#___str_41
      000903 C0 E0            [24] 1981 	push	acc
      000905 74s05            [12] 1982 	mov	a,#(___str_41 >> 8)
      000907 C0 E0            [24] 1983 	push	acc
      000909 12r00r00         [24] 1984 	lcall	_printf_tiny
      00090C E5 81            [12] 1985 	mov	a,sp
      00090E 24 FC            [12] 1986 	add	a,#0xfc
      000910 F5 81            [12] 1987 	mov	sp,a
                                   1988 ;	main.c:270: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000912 74r16            [12] 1989 	mov	a,#___str_42
      000914 C0 E0            [24] 1990 	push	acc
      000916 74s06            [12] 1991 	mov	a,#(___str_42 >> 8)
      000918 C0 E0            [24] 1992 	push	acc
      00091A 12r00r00         [24] 1993 	lcall	_printf_tiny
      00091D 15 81            [12] 1994 	dec	sp
      00091F 15 81            [12] 1995 	dec	sp
      000921 D0 00            [24] 1996 	pop	ar0
      000923 D0 01            [24] 1997 	pop	ar1
      000925 D0 04            [24] 1998 	pop	ar4
      000927 D0 05            [24] 1999 	pop	ar5
                                   2000 ;	main.c:273: for(k=2; k<=(i+2); k++)
      000929                       2001 00224$:
      000929 74 02            [12] 2002 	mov	a,#0x02
      00092B 25*02            [12] 2003 	add	a,_main_sloc1_1_0
      00092D F5*05            [12] 2004 	mov	_main_sloc3_1_0,a
      00092F E4               [12] 2005 	clr	a
      000930 35*03            [12] 2006 	addc	a,(_main_sloc1_1_0 + 1)
      000932 F5*06            [12] 2007 	mov	(_main_sloc3_1_0 + 1),a
      000934 7A 02            [12] 2008 	mov	r2,#0x02
      000936 7B 00            [12] 2009 	mov	r3,#0x00
      000938                       2010 00184$:
      000938 C3               [12] 2011 	clr	c
      000939 E5*05            [12] 2012 	mov	a,_main_sloc3_1_0
      00093B 9A               [12] 2013 	subb	a,r2
      00093C E5*06            [12] 2014 	mov	a,(_main_sloc3_1_0 + 1)
      00093E 64 80            [12] 2015 	xrl	a,#0x80
      000940 8B F0            [24] 2016 	mov	b,r3
      000942 63 F0 80         [24] 2017 	xrl	b,#0x80
      000945 95 F0            [12] 2018 	subb	a,b
      000947 50 03            [24] 2019 	jnc	00401$
      000949 02r0Br17         [24] 2020 	ljmp	00138$
      00094C                       2021 00401$:
                                   2022 ;	main.c:275: if(buffer_n[k-2]!=0)
      00094C C0 00            [24] 2023 	push	ar0
      00094E C0 01            [24] 2024 	push	ar1
      000950 EA               [12] 2025 	mov	a,r2
      000951 F5*07            [12] 2026 	mov	_main_sloc4_1_0,a
      000953 24 FE            [12] 2027 	add	a,#0xfe
      000955 F9               [12] 2028 	mov	r1,a
      000956 C2 D5            [12] 2029 	clr	F0
      000958 75 F0 02         [24] 2030 	mov	b,#0x02
      00095B E9               [12] 2031 	mov	a,r1
      00095C 30 E7 04         [24] 2032 	jnb	acc.7,00402$
      00095F B2 D5            [12] 2033 	cpl	F0
      000961 F4               [12] 2034 	cpl	a
      000962 04               [12] 2035 	inc	a
      000963                       2036 00402$:
      000963 A4               [48] 2037 	mul	ab
      000964 30 D5 0A         [24] 2038 	jnb	F0,00403$
      000967 F4               [12] 2039 	cpl	a
      000968 24 01            [12] 2040 	add	a,#0x01
      00096A C5 F0            [12] 2041 	xch	a,b
      00096C F4               [12] 2042 	cpl	a
      00096D 34 00            [12] 2043 	addc	a,#0x00
      00096F C5 F0            [12] 2044 	xch	a,b
      000971                       2045 00403$:
      000971 24r03            [12] 2046 	add	a,#_main_buffer_n_65536_49
      000973 F5 82            [12] 2047 	mov	dpl,a
      000975 74s00            [12] 2048 	mov	a,#(_main_buffer_n_65536_49 >> 8)
      000977 35 F0            [12] 2049 	addc	a,b
      000979 F5 83            [12] 2050 	mov	dph,a
      00097B E0               [24] 2051 	movx	a,@dptr
      00097C F8               [12] 2052 	mov	r0,a
      00097D A3               [24] 2053 	inc	dptr
      00097E E0               [24] 2054 	movx	a,@dptr
      00097F 48               [12] 2055 	orl	a,r0
      000980 D0 01            [24] 2056 	pop	ar1
      000982 D0 00            [24] 2057 	pop	ar0
      000984 70 03            [24] 2058 	jnz	00404$
      000986 02r0Br0F         [24] 2059 	ljmp	00185$
      000989                       2060 00404$:
                                   2061 ;	main.c:277: printf_tiny("\n\rBuffer %d\n\r",k);
      000989 C0 00            [24] 2062 	push	ar0
      00098B C0 01            [24] 2063 	push	ar1
      00098D C0 05            [24] 2064 	push	ar5
      00098F C0 04            [24] 2065 	push	ar4
      000991 C0 03            [24] 2066 	push	ar3
      000993 C0 02            [24] 2067 	push	ar2
      000995 C0 01            [24] 2068 	push	ar1
      000997 C0 00            [24] 2069 	push	ar0
      000999 C0 02            [24] 2070 	push	ar2
      00099B C0 03            [24] 2071 	push	ar3
      00099D 74r94            [12] 2072 	mov	a,#___str_45
      00099F C0 E0            [24] 2073 	push	acc
      0009A1 74s06            [12] 2074 	mov	a,#(___str_45 >> 8)
      0009A3 C0 E0            [24] 2075 	push	acc
      0009A5 12r00r00         [24] 2076 	lcall	_printf_tiny
      0009A8 E5 81            [12] 2077 	mov	a,sp
      0009AA 24 FC            [12] 2078 	add	a,#0xfc
      0009AC F5 81            [12] 2079 	mov	sp,a
      0009AE D0 00            [24] 2080 	pop	ar0
      0009B0 D0 01            [24] 2081 	pop	ar1
      0009B2 D0 02            [24] 2082 	pop	ar2
      0009B4 D0 03            [24] 2083 	pop	ar3
      0009B6 D0 04            [24] 2084 	pop	ar4
      0009B8 D0 05            [24] 2085 	pop	ar5
                                   2086 ;	main.c:278: printf_tiny("\n\rStart Address = 0x%x\n\r",(uint16_t)buffer_n[k-2]);
      0009BA E5*07            [12] 2087 	mov	a,_main_sloc4_1_0
      0009BC 24 FE            [12] 2088 	add	a,#0xfe
      0009BE F9               [12] 2089 	mov	r1,a
      0009BF C2 D5            [12] 2090 	clr	F0
      0009C1 75 F0 02         [24] 2091 	mov	b,#0x02
      0009C4 E9               [12] 2092 	mov	a,r1
      0009C5 30 E7 04         [24] 2093 	jnb	acc.7,00405$
      0009C8 B2 D5            [12] 2094 	cpl	F0
      0009CA F4               [12] 2095 	cpl	a
      0009CB 04               [12] 2096 	inc	a
      0009CC                       2097 00405$:
      0009CC A4               [48] 2098 	mul	ab
      0009CD 30 D5 0A         [24] 2099 	jnb	F0,00406$
      0009D0 F4               [12] 2100 	cpl	a
      0009D1 24 01            [12] 2101 	add	a,#0x01
      0009D3 C5 F0            [12] 2102 	xch	a,b
      0009D5 F4               [12] 2103 	cpl	a
      0009D6 34 00            [12] 2104 	addc	a,#0x00
      0009D8 C5 F0            [12] 2105 	xch	a,b
      0009DA                       2106 00406$:
      0009DA 24r03            [12] 2107 	add	a,#_main_buffer_n_65536_49
      0009DC F8               [12] 2108 	mov	r0,a
      0009DD 74s00            [12] 2109 	mov	a,#(_main_buffer_n_65536_49 >> 8)
      0009DF 35 F0            [12] 2110 	addc	a,b
      0009E1 F9               [12] 2111 	mov	r1,a
      0009E2 88 82            [24] 2112 	mov	dpl,r0
      0009E4 89 83            [24] 2113 	mov	dph,r1
      0009E6 E0               [24] 2114 	movx	a,@dptr
      0009E7 FE               [12] 2115 	mov	r6,a
      0009E8 A3               [24] 2116 	inc	dptr
      0009E9 E0               [24] 2117 	movx	a,@dptr
      0009EA FF               [12] 2118 	mov	r7,a
      0009EB C0 05            [24] 2119 	push	ar5
      0009ED C0 04            [24] 2120 	push	ar4
      0009EF C0 03            [24] 2121 	push	ar3
      0009F1 C0 02            [24] 2122 	push	ar2
      0009F3 C0 01            [24] 2123 	push	ar1
      0009F5 C0 00            [24] 2124 	push	ar0
      0009F7 C0 06            [24] 2125 	push	ar6
      0009F9 C0 07            [24] 2126 	push	ar7
      0009FB 74r89            [12] 2127 	mov	a,#___str_37
      0009FD C0 E0            [24] 2128 	push	acc
      0009FF 74s05            [12] 2129 	mov	a,#(___str_37 >> 8)
      000A01 C0 E0            [24] 2130 	push	acc
      000A03 12r00r00         [24] 2131 	lcall	_printf_tiny
      000A06 E5 81            [12] 2132 	mov	a,sp
      000A08 24 FC            [12] 2133 	add	a,#0xfc
      000A0A F5 81            [12] 2134 	mov	sp,a
      000A0C D0 00            [24] 2135 	pop	ar0
      000A0E D0 01            [24] 2136 	pop	ar1
      000A10 D0 02            [24] 2137 	pop	ar2
      000A12 D0 03            [24] 2138 	pop	ar3
      000A14 D0 04            [24] 2139 	pop	ar4
      000A16 D0 05            [24] 2140 	pop	ar5
                                   2141 ;	main.c:279: printf_tiny("\n\rEnding Address = 0x%x\n\r",(uint16_t)(buffer_n[k-2])+(uint16_t)(buff_size[k]));
      000A18 88 82            [24] 2142 	mov	dpl,r0
      000A1A 89 83            [24] 2143 	mov	dph,r1
      000A1C E0               [24] 2144 	movx	a,@dptr
      000A1D F8               [12] 2145 	mov	r0,a
      000A1E A3               [24] 2146 	inc	dptr
      000A1F E0               [24] 2147 	movx	a,@dptr
      000A20 F9               [12] 2148 	mov	r1,a
      000A21 88*07            [24] 2149 	mov	_main_sloc4_1_0,r0
      000A23 89*08            [24] 2150 	mov	(_main_sloc4_1_0 + 1),r1
      000A25 EA               [12] 2151 	mov	a,r2
      000A26 2A               [12] 2152 	add	a,r2
      000A27 FE               [12] 2153 	mov	r6,a
      000A28 EB               [12] 2154 	mov	a,r3
      000A29 33               [12] 2155 	rlc	a
      000A2A FF               [12] 2156 	mov	r7,a
      000A2B EE               [12] 2157 	mov	a,r6
      000A2C 24r6B            [12] 2158 	add	a,#_main_buff_size_65536_49
      000A2E FE               [12] 2159 	mov	r6,a
      000A2F EF               [12] 2160 	mov	a,r7
      000A30 34s00            [12] 2161 	addc	a,#(_main_buff_size_65536_49 >> 8)
      000A32 FF               [12] 2162 	mov	r7,a
      000A33 8E 82            [24] 2163 	mov	dpl,r6
      000A35 8F 83            [24] 2164 	mov	dph,r7
      000A37 E0               [24] 2165 	movx	a,@dptr
      000A38 F8               [12] 2166 	mov	r0,a
      000A39 A3               [24] 2167 	inc	dptr
      000A3A E0               [24] 2168 	movx	a,@dptr
      000A3B F9               [12] 2169 	mov	r1,a
      000A3C E8               [12] 2170 	mov	a,r0
      000A3D 25*07            [12] 2171 	add	a,_main_sloc4_1_0
      000A3F F8               [12] 2172 	mov	r0,a
      000A40 E9               [12] 2173 	mov	a,r1
      000A41 35*08            [12] 2174 	addc	a,(_main_sloc4_1_0 + 1)
      000A43 F9               [12] 2175 	mov	r1,a
      000A44 C0 07            [24] 2176 	push	ar7
      000A46 C0 06            [24] 2177 	push	ar6
      000A48 C0 05            [24] 2178 	push	ar5
      000A4A C0 04            [24] 2179 	push	ar4
      000A4C C0 03            [24] 2180 	push	ar3
      000A4E C0 02            [24] 2181 	push	ar2
      000A50 C0 01            [24] 2182 	push	ar1
      000A52 C0 00            [24] 2183 	push	ar0
      000A54 C0 00            [24] 2184 	push	ar0
      000A56 C0 01            [24] 2185 	push	ar1
      000A58 74rA2            [12] 2186 	mov	a,#___str_38
      000A5A C0 E0            [24] 2187 	push	acc
      000A5C 74s05            [12] 2188 	mov	a,#(___str_38 >> 8)
      000A5E C0 E0            [24] 2189 	push	acc
      000A60 12r00r00         [24] 2190 	lcall	_printf_tiny
      000A63 E5 81            [12] 2191 	mov	a,sp
      000A65 24 FC            [12] 2192 	add	a,#0xfc
      000A67 F5 81            [12] 2193 	mov	sp,a
      000A69 D0 00            [24] 2194 	pop	ar0
      000A6B D0 01            [24] 2195 	pop	ar1
      000A6D D0 02            [24] 2196 	pop	ar2
      000A6F D0 03            [24] 2197 	pop	ar3
      000A71 D0 04            [24] 2198 	pop	ar4
      000A73 D0 05            [24] 2199 	pop	ar5
      000A75 D0 06            [24] 2200 	pop	ar6
      000A77 D0 07            [24] 2201 	pop	ar7
                                   2202 ;	main.c:280: printf_tiny("\n\rBuffer Size = %d\n\r",buff_size[k]);
      000A79 8E 82            [24] 2203 	mov	dpl,r6
      000A7B 8F 83            [24] 2204 	mov	dph,r7
      000A7D E0               [24] 2205 	movx	a,@dptr
      000A7E F8               [12] 2206 	mov	r0,a
      000A7F A3               [24] 2207 	inc	dptr
      000A80 E0               [24] 2208 	movx	a,@dptr
      000A81 F9               [12] 2209 	mov	r1,a
      000A82 C0 07            [24] 2210 	push	ar7
      000A84 C0 06            [24] 2211 	push	ar6
      000A86 C0 05            [24] 2212 	push	ar5
      000A88 C0 04            [24] 2213 	push	ar4
      000A8A C0 03            [24] 2214 	push	ar3
      000A8C C0 02            [24] 2215 	push	ar2
      000A8E C0 01            [24] 2216 	push	ar1
      000A90 C0 00            [24] 2217 	push	ar0
      000A92 C0 00            [24] 2218 	push	ar0
      000A94 C0 01            [24] 2219 	push	ar1
      000A96 74rBC            [12] 2220 	mov	a,#___str_39
      000A98 C0 E0            [24] 2221 	push	acc
      000A9A 74s05            [12] 2222 	mov	a,#(___str_39 >> 8)
      000A9C C0 E0            [24] 2223 	push	acc
      000A9E 12r00r00         [24] 2224 	lcall	_printf_tiny
      000AA1 E5 81            [12] 2225 	mov	a,sp
      000AA3 24 FC            [12] 2226 	add	a,#0xfc
      000AA5 F5 81            [12] 2227 	mov	sp,a
                                   2228 ;	main.c:281: printf_tiny("\n\rStorage characters in buffer = 0\n\r");
      000AA7 74r6F            [12] 2229 	mov	a,#___str_44
      000AA9 C0 E0            [24] 2230 	push	acc
      000AAB 74s06            [12] 2231 	mov	a,#(___str_44 >> 8)
      000AAD C0 E0            [24] 2232 	push	acc
      000AAF 12r00r00         [24] 2233 	lcall	_printf_tiny
      000AB2 15 81            [12] 2234 	dec	sp
      000AB4 15 81            [12] 2235 	dec	sp
      000AB6 D0 00            [24] 2236 	pop	ar0
      000AB8 D0 01            [24] 2237 	pop	ar1
      000ABA D0 02            [24] 2238 	pop	ar2
      000ABC D0 03            [24] 2239 	pop	ar3
      000ABE D0 04            [24] 2240 	pop	ar4
      000AC0 D0 05            [24] 2241 	pop	ar5
      000AC2 D0 06            [24] 2242 	pop	ar6
      000AC4 D0 07            [24] 2243 	pop	ar7
                                   2244 ;	main.c:282: printf_tiny("\n\rFree Spaces in buffer = %d\n\r",(buff_size[k]));
      000AC6 8E 82            [24] 2245 	mov	dpl,r6
      000AC8 8F 83            [24] 2246 	mov	dph,r7
      000ACA E0               [24] 2247 	movx	a,@dptr
      000ACB FE               [12] 2248 	mov	r6,a
      000ACC A3               [24] 2249 	inc	dptr
      000ACD E0               [24] 2250 	movx	a,@dptr
      000ACE FF               [12] 2251 	mov	r7,a
      000ACF C0 05            [24] 2252 	push	ar5
      000AD1 C0 04            [24] 2253 	push	ar4
      000AD3 C0 03            [24] 2254 	push	ar3
      000AD5 C0 02            [24] 2255 	push	ar2
      000AD7 C0 01            [24] 2256 	push	ar1
      000AD9 C0 00            [24] 2257 	push	ar0
      000ADB C0 06            [24] 2258 	push	ar6
      000ADD C0 07            [24] 2259 	push	ar7
      000ADF 74rF7            [12] 2260 	mov	a,#___str_41
      000AE1 C0 E0            [24] 2261 	push	acc
      000AE3 74s05            [12] 2262 	mov	a,#(___str_41 >> 8)
      000AE5 C0 E0            [24] 2263 	push	acc
      000AE7 12r00r00         [24] 2264 	lcall	_printf_tiny
      000AEA E5 81            [12] 2265 	mov	a,sp
      000AEC 24 FC            [12] 2266 	add	a,#0xfc
      000AEE F5 81            [12] 2267 	mov	sp,a
                                   2268 ;	main.c:283: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000AF0 74r16            [12] 2269 	mov	a,#___str_42
      000AF2 C0 E0            [24] 2270 	push	acc
      000AF4 74s06            [12] 2271 	mov	a,#(___str_42 >> 8)
      000AF6 C0 E0            [24] 2272 	push	acc
      000AF8 12r00r00         [24] 2273 	lcall	_printf_tiny
      000AFB 15 81            [12] 2274 	dec	sp
      000AFD 15 81            [12] 2275 	dec	sp
      000AFF D0 00            [24] 2276 	pop	ar0
      000B01 D0 01            [24] 2277 	pop	ar1
      000B03 D0 02            [24] 2278 	pop	ar2
      000B05 D0 03            [24] 2279 	pop	ar3
      000B07 D0 04            [24] 2280 	pop	ar4
      000B09 D0 05            [24] 2281 	pop	ar5
                                   2282 ;	main.c:348: goto ishaan;
      000B0B D0 01            [24] 2283 	pop	ar1
      000B0D D0 00            [24] 2284 	pop	ar0
                                   2285 ;	main.c:283: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000B0F                       2286 00185$:
                                   2287 ;	main.c:273: for(k=2; k<=(i+2); k++)
      000B0F 0A               [12] 2288 	inc	r2
      000B10 BA 00 01         [24] 2289 	cjne	r2,#0x00,00407$
      000B13 0B               [12] 2290 	inc	r3
      000B14                       2291 00407$:
      000B14 02r09r38         [24] 2292 	ljmp	00184$
      000B17                       2293 00138$:
                                   2294 ;	main.c:287: printf_tiny("\n\rNumber of storage characters = %d\n\r",char_stored);
      000B17 90r00r67         [24] 2295 	mov	dptr,#_main_char_stored_65536_49
      000B1A E0               [24] 2296 	movx	a,@dptr
      000B1B FE               [12] 2297 	mov	r6,a
      000B1C A3               [24] 2298 	inc	dptr
      000B1D E0               [24] 2299 	movx	a,@dptr
      000B1E FF               [12] 2300 	mov	r7,a
      000B1F C0 07            [24] 2301 	push	ar7
      000B21 C0 06            [24] 2302 	push	ar6
      000B23 C0 05            [24] 2303 	push	ar5
      000B25 C0 04            [24] 2304 	push	ar4
      000B27 C0 01            [24] 2305 	push	ar1
      000B29 C0 00            [24] 2306 	push	ar0
      000B2B C0 06            [24] 2307 	push	ar6
      000B2D C0 07            [24] 2308 	push	ar7
      000B2F 74rA2            [12] 2309 	mov	a,#___str_46
      000B31 C0 E0            [24] 2310 	push	acc
      000B33 74s06            [12] 2311 	mov	a,#(___str_46 >> 8)
      000B35 C0 E0            [24] 2312 	push	acc
      000B37 12r00r00         [24] 2313 	lcall	_printf_tiny
      000B3A E5 81            [12] 2314 	mov	a,sp
      000B3C 24 FC            [12] 2315 	add	a,#0xfc
      000B3E F5 81            [12] 2316 	mov	sp,a
      000B40 D0 00            [24] 2317 	pop	ar0
      000B42 D0 01            [24] 2318 	pop	ar1
                                   2319 ;	main.c:288: printf_tiny("\n\rTotal number of characters received = %d\n\r",total_char);
      000B44 C0 01            [24] 2320 	push	ar1
      000B46 C0 00            [24] 2321 	push	ar0
      000B48 C0 00            [24] 2322 	push	ar0
      000B4A C0 01            [24] 2323 	push	ar1
      000B4C 74rC8            [12] 2324 	mov	a,#___str_47
      000B4E C0 E0            [24] 2325 	push	acc
      000B50 74s06            [12] 2326 	mov	a,#(___str_47 >> 8)
      000B52 C0 E0            [24] 2327 	push	acc
      000B54 12r00r00         [24] 2328 	lcall	_printf_tiny
      000B57 E5 81            [12] 2329 	mov	a,sp
      000B59 24 FC            [12] 2330 	add	a,#0xfc
      000B5B F5 81            [12] 2331 	mov	sp,a
                                   2332 ;	main.c:289: printf_tiny("\n\rTotal number of buffers that were allocated since the start of the program = %d\n\r",(j));
      000B5D C0*00            [24] 2333 	push	_main_sloc0_1_0
      000B5F C0*01            [24] 2334 	push	(_main_sloc0_1_0 + 1)
      000B61 74rF5            [12] 2335 	mov	a,#___str_48
      000B63 C0 E0            [24] 2336 	push	acc
      000B65 74s06            [12] 2337 	mov	a,#(___str_48 >> 8)
      000B67 C0 E0            [24] 2338 	push	acc
      000B69 12r00r00         [24] 2339 	lcall	_printf_tiny
      000B6C E5 81            [12] 2340 	mov	a,sp
      000B6E 24 FC            [12] 2341 	add	a,#0xfc
      000B70 F5 81            [12] 2342 	mov	sp,a
      000B72 D0 00            [24] 2343 	pop	ar0
      000B74 D0 01            [24] 2344 	pop	ar1
      000B76 D0 04            [24] 2345 	pop	ar4
      000B78 D0 05            [24] 2346 	pop	ar5
      000B7A D0 06            [24] 2347 	pop	ar6
      000B7C D0 07            [24] 2348 	pop	ar7
                                   2349 ;	main.c:290: printf_tiny("\n\rTotal storage characters stored since last '?' = %d\n\r",char_stored);
      000B7E C0 05            [24] 2350 	push	ar5
      000B80 C0 04            [24] 2351 	push	ar4
      000B82 C0 01            [24] 2352 	push	ar1
      000B84 C0 00            [24] 2353 	push	ar0
      000B86 C0 06            [24] 2354 	push	ar6
      000B88 C0 07            [24] 2355 	push	ar7
      000B8A 74r49            [12] 2356 	mov	a,#___str_49
      000B8C C0 E0            [24] 2357 	push	acc
      000B8E 74s07            [12] 2358 	mov	a,#(___str_49 >> 8)
      000B90 C0 E0            [24] 2359 	push	acc
      000B92 12r00r00         [24] 2360 	lcall	_printf_tiny
      000B95 E5 81            [12] 2361 	mov	a,sp
      000B97 24 FC            [12] 2362 	add	a,#0xfc
      000B99 F5 81            [12] 2363 	mov	sp,a
                                   2364 ;	main.c:291: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000B9B 74r16            [12] 2365 	mov	a,#___str_42
      000B9D C0 E0            [24] 2366 	push	acc
      000B9F 74s06            [12] 2367 	mov	a,#(___str_42 >> 8)
      000BA1 C0 E0            [24] 2368 	push	acc
      000BA3 12r00r00         [24] 2369 	lcall	_printf_tiny
      000BA6 15 81            [12] 2370 	dec	sp
      000BA8 15 81            [12] 2371 	dec	sp
      000BAA D0 00            [24] 2372 	pop	ar0
      000BAC D0 01            [24] 2373 	pop	ar1
      000BAE D0 04            [24] 2374 	pop	ar4
      000BB0 D0 05            [24] 2375 	pop	ar5
                                   2376 ;	main.c:292: char_stored=0;
      000BB2 90r00r67         [24] 2377 	mov	dptr,#_main_char_stored_65536_49
      000BB5 E4               [12] 2378 	clr	a
      000BB6 F0               [24] 2379 	movx	@dptr,a
      000BB7 A3               [24] 2380 	inc	dptr
      000BB8 F0               [24] 2381 	movx	@dptr,a
                                   2382 ;	main.c:293: count=0;
      000BB9 90r00r69         [24] 2383 	mov	dptr,#_main_count_65536_49
      000BBC F0               [24] 2384 	movx	@dptr,a
      000BBD A3               [24] 2385 	inc	dptr
      000BBE F0               [24] 2386 	movx	@dptr,a
      000BBF 02r02r6C         [24] 2387 	ljmp	00116$
      000BC2                       2388 00158$:
                                   2389 ;	main.c:296: else if(input_char == '=')
      000BC2 74 3D            [12] 2390 	mov	a,#0x3d
      000BC4 B5*04 02         [24] 2391 	cjne	a,_main_sloc2_1_0,00408$
      000BC7 80 03            [24] 2392 	sjmp	00409$
      000BC9                       2393 00408$:
      000BC9 02r0CrF8         [24] 2394 	ljmp	00155$
      000BCC                       2395 00409$:
                                   2396 ;	main.c:298: DEBUGPORT(4);
      000BCC 75 82 04         [24] 2397 	mov	dpl,#0x04
      000BCF C0 05            [24] 2398 	push	ar5
      000BD1 C0 04            [24] 2399 	push	ar4
      000BD3 C0 01            [24] 2400 	push	ar1
      000BD5 C0 00            [24] 2401 	push	ar0
      000BD7 12r00r07         [24] 2402 	lcall	_dataout
                                   2403 ;	main.c:299: printf_tiny("\n\rContents of Buffer 0\n\r");
      000BDA 74r81            [12] 2404 	mov	a,#___str_50
      000BDC C0 E0            [24] 2405 	push	acc
      000BDE 74s07            [12] 2406 	mov	a,#(___str_50 >> 8)
      000BE0 C0 E0            [24] 2407 	push	acc
      000BE2 12r00r00         [24] 2408 	lcall	_printf_tiny
      000BE5 15 81            [12] 2409 	dec	sp
      000BE7 15 81            [12] 2410 	dec	sp
      000BE9 D0 00            [24] 2411 	pop	ar0
      000BEB D0 01            [24] 2412 	pop	ar1
      000BED D0 04            [24] 2413 	pop	ar4
      000BEF D0 05            [24] 2414 	pop	ar5
                                   2415 ;	main.c:301: for((buff_0_count)=0; (buff_0_count)<char_stored; (buff_0_count)++)
      000BF1 90r00r67         [24] 2416 	mov	dptr,#_main_char_stored_65536_49
      000BF4 E0               [24] 2417 	movx	a,@dptr
      000BF5 F5*07            [12] 2418 	mov	_main_sloc4_1_0,a
      000BF7 A3               [24] 2419 	inc	dptr
      000BF8 E0               [24] 2420 	movx	a,@dptr
      000BF9 F5*08            [12] 2421 	mov	(_main_sloc4_1_0 + 1),a
      000BFB 7A 00            [12] 2422 	mov	r2,#0x00
      000BFD 7B 00            [12] 2423 	mov	r3,#0x00
      000BFF                       2424 00187$:
      000BFF C3               [12] 2425 	clr	c
      000C00 EA               [12] 2426 	mov	a,r2
      000C01 95*07            [12] 2427 	subb	a,_main_sloc4_1_0
      000C03 EB               [12] 2428 	mov	a,r3
      000C04 95*08            [12] 2429 	subb	a,(_main_sloc4_1_0 + 1)
      000C06 40 03            [24] 2430 	jc	00410$
      000C08 02r02r6C         [24] 2431 	ljmp	00116$
      000C0B                       2432 00410$:
                                   2433 ;	main.c:303: if(buff_0_count==0)
      000C0B EA               [12] 2434 	mov	a,r2
      000C0C 4B               [12] 2435 	orl	a,r3
      000C0D 70 4A            [24] 2436 	jnz	00145$
                                   2437 ;	main.c:305: printf_tiny("0x%x>> %x",(uint16_t)(buffer_0+buff_0_count),*((buffer_0)+(buff_0_count)));
      000C0F C0 00            [24] 2438 	push	ar0
      000C11 C0 01            [24] 2439 	push	ar1
      000C13 EA               [12] 2440 	mov	a,r2
      000C14 2C               [12] 2441 	add	a,r4
      000C15 F8               [12] 2442 	mov	r0,a
      000C16 EB               [12] 2443 	mov	a,r3
      000C17 3D               [12] 2444 	addc	a,r5
      000C18 F9               [12] 2445 	mov	r1,a
      000C19 88 82            [24] 2446 	mov	dpl,r0
      000C1B 89 83            [24] 2447 	mov	dph,r1
      000C1D E0               [24] 2448 	movx	a,@dptr
      000C1E FF               [12] 2449 	mov	r7,a
      000C1F 7E 00            [12] 2450 	mov	r6,#0x00
      000C21 C0 05            [24] 2451 	push	ar5
      000C23 C0 04            [24] 2452 	push	ar4
      000C25 C0 03            [24] 2453 	push	ar3
      000C27 C0 02            [24] 2454 	push	ar2
      000C29 C0 01            [24] 2455 	push	ar1
      000C2B C0 00            [24] 2456 	push	ar0
      000C2D C0 07            [24] 2457 	push	ar7
      000C2F C0 06            [24] 2458 	push	ar6
      000C31 C0 00            [24] 2459 	push	ar0
      000C33 C0 01            [24] 2460 	push	ar1
      000C35 74r9A            [12] 2461 	mov	a,#___str_51
      000C37 C0 E0            [24] 2462 	push	acc
      000C39 74s07            [12] 2463 	mov	a,#(___str_51 >> 8)
      000C3B C0 E0            [24] 2464 	push	acc
      000C3D 12r00r00         [24] 2465 	lcall	_printf_tiny
      000C40 E5 81            [12] 2466 	mov	a,sp
      000C42 24 FA            [12] 2467 	add	a,#0xfa
      000C44 F5 81            [12] 2468 	mov	sp,a
      000C46 D0 00            [24] 2469 	pop	ar0
      000C48 D0 01            [24] 2470 	pop	ar1
      000C4A D0 02            [24] 2471 	pop	ar2
      000C4C D0 03            [24] 2472 	pop	ar3
      000C4E D0 04            [24] 2473 	pop	ar4
      000C50 D0 05            [24] 2474 	pop	ar5
      000C52 D0 01            [24] 2475 	pop	ar1
      000C54 D0 00            [24] 2476 	pop	ar0
      000C56 02r0CrF0         [24] 2477 	ljmp	00188$
      000C59                       2478 00145$:
                                   2479 ;	main.c:307: else if((buff_0_count%16)!=0)
      000C59 74 0F            [12] 2480 	mov	a,#0x0f
      000C5B 5A               [12] 2481 	anl	a,r2
      000C5C FE               [12] 2482 	mov	r6,a
      000C5D 7F 00            [12] 2483 	mov	r7,#0x00
      000C5F 4F               [12] 2484 	orl	a,r7
      000C60 60 43            [24] 2485 	jz	00142$
                                   2486 ;	main.c:309: printf_tiny(" %x",*((buffer_0)+(buff_0_count)));
      000C62 C0 00            [24] 2487 	push	ar0
      000C64 C0 01            [24] 2488 	push	ar1
      000C66 EA               [12] 2489 	mov	a,r2
      000C67 2C               [12] 2490 	add	a,r4
      000C68 F5 82            [12] 2491 	mov	dpl,a
      000C6A EB               [12] 2492 	mov	a,r3
      000C6B 3D               [12] 2493 	addc	a,r5
      000C6C F5 83            [12] 2494 	mov	dph,a
      000C6E E0               [24] 2495 	movx	a,@dptr
      000C6F F8               [12] 2496 	mov	r0,a
      000C70 79 00            [12] 2497 	mov	r1,#0x00
      000C72 C0 05            [24] 2498 	push	ar5
      000C74 C0 04            [24] 2499 	push	ar4
      000C76 C0 03            [24] 2500 	push	ar3
      000C78 C0 02            [24] 2501 	push	ar2
      000C7A C0 01            [24] 2502 	push	ar1
      000C7C C0 00            [24] 2503 	push	ar0
      000C7E C0 00            [24] 2504 	push	ar0
      000C80 C0 01            [24] 2505 	push	ar1
      000C82 74rA4            [12] 2506 	mov	a,#___str_52
      000C84 C0 E0            [24] 2507 	push	acc
      000C86 74s07            [12] 2508 	mov	a,#(___str_52 >> 8)
      000C88 C0 E0            [24] 2509 	push	acc
      000C8A 12r00r00         [24] 2510 	lcall	_printf_tiny
      000C8D E5 81            [12] 2511 	mov	a,sp
      000C8F 24 FC            [12] 2512 	add	a,#0xfc
      000C91 F5 81            [12] 2513 	mov	sp,a
      000C93 D0 00            [24] 2514 	pop	ar0
      000C95 D0 01            [24] 2515 	pop	ar1
      000C97 D0 02            [24] 2516 	pop	ar2
      000C99 D0 03            [24] 2517 	pop	ar3
      000C9B D0 04            [24] 2518 	pop	ar4
      000C9D D0 05            [24] 2519 	pop	ar5
      000C9F D0 01            [24] 2520 	pop	ar1
      000CA1 D0 00            [24] 2521 	pop	ar0
      000CA3 80 4B            [24] 2522 	sjmp	00188$
      000CA5                       2523 00142$:
                                   2524 ;	main.c:311: else if(buff_0_count%16==0)
      000CA5 EE               [12] 2525 	mov	a,r6
      000CA6 4F               [12] 2526 	orl	a,r7
      000CA7 70 47            [24] 2527 	jnz	00188$
                                   2528 ;	main.c:313: printf_tiny("\n\r0x%x>> %x",(uint16_t)(buffer_0+buff_0_count),*((buffer_0)+(buff_0_count)));
      000CA9 C0 00            [24] 2529 	push	ar0
      000CAB C0 01            [24] 2530 	push	ar1
      000CAD EA               [12] 2531 	mov	a,r2
      000CAE 2C               [12] 2532 	add	a,r4
      000CAF FE               [12] 2533 	mov	r6,a
      000CB0 EB               [12] 2534 	mov	a,r3
      000CB1 3D               [12] 2535 	addc	a,r5
      000CB2 FF               [12] 2536 	mov	r7,a
      000CB3 8E 82            [24] 2537 	mov	dpl,r6
      000CB5 8F 83            [24] 2538 	mov	dph,r7
      000CB7 E0               [24] 2539 	movx	a,@dptr
      000CB8 F8               [12] 2540 	mov	r0,a
      000CB9 79 00            [12] 2541 	mov	r1,#0x00
      000CBB C0 05            [24] 2542 	push	ar5
      000CBD C0 04            [24] 2543 	push	ar4
      000CBF C0 03            [24] 2544 	push	ar3
      000CC1 C0 02            [24] 2545 	push	ar2
      000CC3 C0 01            [24] 2546 	push	ar1
      000CC5 C0 00            [24] 2547 	push	ar0
      000CC7 C0 00            [24] 2548 	push	ar0
      000CC9 C0 01            [24] 2549 	push	ar1
      000CCB C0 06            [24] 2550 	push	ar6
      000CCD C0 07            [24] 2551 	push	ar7
      000CCF 74rA8            [12] 2552 	mov	a,#___str_53
      000CD1 C0 E0            [24] 2553 	push	acc
      000CD3 74s07            [12] 2554 	mov	a,#(___str_53 >> 8)
      000CD5 C0 E0            [24] 2555 	push	acc
      000CD7 12r00r00         [24] 2556 	lcall	_printf_tiny
      000CDA E5 81            [12] 2557 	mov	a,sp
      000CDC 24 FA            [12] 2558 	add	a,#0xfa
      000CDE F5 81            [12] 2559 	mov	sp,a
      000CE0 D0 00            [24] 2560 	pop	ar0
      000CE2 D0 01            [24] 2561 	pop	ar1
      000CE4 D0 02            [24] 2562 	pop	ar2
      000CE6 D0 03            [24] 2563 	pop	ar3
      000CE8 D0 04            [24] 2564 	pop	ar4
      000CEA D0 05            [24] 2565 	pop	ar5
                                   2566 ;	main.c:348: goto ishaan;
      000CEC D0 01            [24] 2567 	pop	ar1
      000CEE D0 00            [24] 2568 	pop	ar0
                                   2569 ;	main.c:313: printf_tiny("\n\r0x%x>> %x",(uint16_t)(buffer_0+buff_0_count),*((buffer_0)+(buff_0_count)));
      000CF0                       2570 00188$:
                                   2571 ;	main.c:301: for((buff_0_count)=0; (buff_0_count)<char_stored; (buff_0_count)++)
      000CF0 0A               [12] 2572 	inc	r2
      000CF1 BA 00 01         [24] 2573 	cjne	r2,#0x00,00414$
      000CF4 0B               [12] 2574 	inc	r3
      000CF5                       2575 00414$:
      000CF5 02r0BrFF         [24] 2576 	ljmp	00187$
      000CF8                       2577 00155$:
                                   2578 ;	main.c:319: else if (input_char == '@')
      000CF8 74 40            [12] 2579 	mov	a,#0x40
      000CFA B5*04 02         [24] 2580 	cjne	a,_main_sloc2_1_0,00415$
      000CFD 80 03            [24] 2581 	sjmp	00416$
      000CFF                       2582 00415$:
      000CFF 02r0Er53         [24] 2583 	ljmp	00152$
      000D02                       2584 00416$:
                                   2585 ;	main.c:321: DEBUGPORT(5);
      000D02 75 82 05         [24] 2586 	mov	dpl,#0x05
      000D05 C0 05            [24] 2587 	push	ar5
      000D07 C0 04            [24] 2588 	push	ar4
      000D09 C0 01            [24] 2589 	push	ar1
      000D0B C0 00            [24] 2590 	push	ar0
      000D0D 12r00r07         [24] 2591 	lcall	_dataout
                                   2592 ;	main.c:322: printf_tiny("\n\rFreeing Buffer 0 \n\r");
      000D10 74rB4            [12] 2593 	mov	a,#___str_54
      000D12 C0 E0            [24] 2594 	push	acc
      000D14 74s07            [12] 2595 	mov	a,#(___str_54 >> 8)
      000D16 C0 E0            [24] 2596 	push	acc
      000D18 12r00r00         [24] 2597 	lcall	_printf_tiny
      000D1B 15 81            [12] 2598 	dec	sp
      000D1D 15 81            [12] 2599 	dec	sp
      000D1F D0 00            [24] 2600 	pop	ar0
      000D21 D0 01            [24] 2601 	pop	ar1
      000D23 D0 04            [24] 2602 	pop	ar4
      000D25 D0 05            [24] 2603 	pop	ar5
                                   2604 ;	main.c:323: free(buffer_0);
      000D27 8C 06            [24] 2605 	mov	ar6,r4
      000D29 8D 07            [24] 2606 	mov	ar7,r5
      000D2B 7B 00            [12] 2607 	mov	r3,#0x00
      000D2D 8E 82            [24] 2608 	mov	dpl,r6
      000D2F 8F 83            [24] 2609 	mov	dph,r7
      000D31 8B F0            [24] 2610 	mov	b,r3
      000D33 C0 05            [24] 2611 	push	ar5
      000D35 C0 04            [24] 2612 	push	ar4
      000D37 C0 01            [24] 2613 	push	ar1
      000D39 C0 00            [24] 2614 	push	ar0
      000D3B 12r00r00         [24] 2615 	lcall	_free
                                   2616 ;	main.c:324: printf_tiny("\n\rBuffer 0 is free\n\r");
      000D3E 74rCA            [12] 2617 	mov	a,#___str_55
      000D40 C0 E0            [24] 2618 	push	acc
      000D42 74s07            [12] 2619 	mov	a,#(___str_55 >> 8)
      000D44 C0 E0            [24] 2620 	push	acc
      000D46 12r00r00         [24] 2621 	lcall	_printf_tiny
      000D49 15 81            [12] 2622 	dec	sp
      000D4B 15 81            [12] 2623 	dec	sp
                                   2624 ;	main.c:326: printf_tiny("\n\rFreeing Buffer 1 \n\r");
      000D4D 74rDF            [12] 2625 	mov	a,#___str_56
      000D4F C0 E0            [24] 2626 	push	acc
      000D51 74s07            [12] 2627 	mov	a,#(___str_56 >> 8)
      000D53 C0 E0            [24] 2628 	push	acc
      000D55 12r00r00         [24] 2629 	lcall	_printf_tiny
      000D58 15 81            [12] 2630 	dec	sp
      000D5A 15 81            [12] 2631 	dec	sp
                                   2632 ;	main.c:327: free(buffer_1);
      000D5C 90r00r01         [24] 2633 	mov	dptr,#_main_buffer_1_65536_49
      000D5F E0               [24] 2634 	movx	a,@dptr
      000D60 FE               [12] 2635 	mov	r6,a
      000D61 A3               [24] 2636 	inc	dptr
      000D62 E0               [24] 2637 	movx	a,@dptr
      000D63 FF               [12] 2638 	mov	r7,a
      000D64 7B 00            [12] 2639 	mov	r3,#0x00
      000D66 8E 82            [24] 2640 	mov	dpl,r6
      000D68 8F 83            [24] 2641 	mov	dph,r7
      000D6A 8B F0            [24] 2642 	mov	b,r3
      000D6C 12r00r00         [24] 2643 	lcall	_free
                                   2644 ;	main.c:328: printf_tiny("\n\rBuffer 1 is free\n\r");
      000D6F 74rF5            [12] 2645 	mov	a,#___str_57
      000D71 C0 E0            [24] 2646 	push	acc
      000D73 74s07            [12] 2647 	mov	a,#(___str_57 >> 8)
      000D75 C0 E0            [24] 2648 	push	acc
      000D77 12r00r00         [24] 2649 	lcall	_printf_tiny
      000D7A 15 81            [12] 2650 	dec	sp
      000D7C 15 81            [12] 2651 	dec	sp
      000D7E D0 00            [24] 2652 	pop	ar0
      000D80 D0 01            [24] 2653 	pop	ar1
      000D82 D0 04            [24] 2654 	pop	ar4
      000D84 D0 05            [24] 2655 	pop	ar5
                                   2656 ;	main.c:330: for(total_buff_count=2; (total_buff_count)<(i+2); (total_buff_count)++)
      000D86 74 02            [12] 2657 	mov	a,#0x02
      000D88 25*02            [12] 2658 	add	a,_main_sloc1_1_0
      000D8A F5*07            [12] 2659 	mov	_main_sloc4_1_0,a
      000D8C E4               [12] 2660 	clr	a
      000D8D 35*03            [12] 2661 	addc	a,(_main_sloc1_1_0 + 1)
      000D8F F5*08            [12] 2662 	mov	(_main_sloc4_1_0 + 1),a
      000D91 7A 02            [12] 2663 	mov	r2,#0x02
      000D93 7B 00            [12] 2664 	mov	r3,#0x00
      000D95                       2665 00190$:
      000D95 C0 00            [24] 2666 	push	ar0
      000D97 C0 01            [24] 2667 	push	ar1
      000D99 A8*07            [24] 2668 	mov	r0,_main_sloc4_1_0
      000D9B A9*08            [24] 2669 	mov	r1,(_main_sloc4_1_0 + 1)
      000D9D C3               [12] 2670 	clr	c
      000D9E EA               [12] 2671 	mov	a,r2
      000D9F 98               [12] 2672 	subb	a,r0
      000DA0 EB               [12] 2673 	mov	a,r3
      000DA1 99               [12] 2674 	subb	a,r1
      000DA2 D0 01            [24] 2675 	pop	ar1
      000DA4 D0 00            [24] 2676 	pop	ar0
      000DA6 40 03            [24] 2677 	jc	00417$
      000DA8 02r0Er3D         [24] 2678 	ljmp	00148$
      000DAB                       2679 00417$:
                                   2680 ;	main.c:332: printf_tiny("\n\rFreeing buffer_%d \n\r",total_buff_count);
      000DAB C0 00            [24] 2681 	push	ar0
      000DAD C0 01            [24] 2682 	push	ar1
      000DAF C0 05            [24] 2683 	push	ar5
      000DB1 C0 04            [24] 2684 	push	ar4
      000DB3 C0 03            [24] 2685 	push	ar3
      000DB5 C0 02            [24] 2686 	push	ar2
      000DB7 C0 01            [24] 2687 	push	ar1
      000DB9 C0 00            [24] 2688 	push	ar0
      000DBB C0 02            [24] 2689 	push	ar2
      000DBD C0 03            [24] 2690 	push	ar3
      000DBF 74r0A            [12] 2691 	mov	a,#___str_58
      000DC1 C0 E0            [24] 2692 	push	acc
      000DC3 74s08            [12] 2693 	mov	a,#(___str_58 >> 8)
      000DC5 C0 E0            [24] 2694 	push	acc
      000DC7 12r00r00         [24] 2695 	lcall	_printf_tiny
      000DCA E5 81            [12] 2696 	mov	a,sp
      000DCC 24 FC            [12] 2697 	add	a,#0xfc
      000DCE F5 81            [12] 2698 	mov	sp,a
      000DD0 D0 00            [24] 2699 	pop	ar0
      000DD2 D0 01            [24] 2700 	pop	ar1
      000DD4 D0 02            [24] 2701 	pop	ar2
      000DD6 D0 03            [24] 2702 	pop	ar3
                                   2703 ;	main.c:333: free(buffer_n[total_buff_count]);
      000DD8 EA               [12] 2704 	mov	a,r2
      000DD9 2A               [12] 2705 	add	a,r2
      000DDA F8               [12] 2706 	mov	r0,a
      000DDB EB               [12] 2707 	mov	a,r3
      000DDC 33               [12] 2708 	rlc	a
      000DDD F9               [12] 2709 	mov	r1,a
      000DDE E8               [12] 2710 	mov	a,r0
      000DDF 24r03            [12] 2711 	add	a,#_main_buffer_n_65536_49
      000DE1 F5 82            [12] 2712 	mov	dpl,a
      000DE3 E9               [12] 2713 	mov	a,r1
      000DE4 34s00            [12] 2714 	addc	a,#(_main_buffer_n_65536_49 >> 8)
      000DE6 F5 83            [12] 2715 	mov	dph,a
      000DE8 E0               [24] 2716 	movx	a,@dptr
      000DE9 F8               [12] 2717 	mov	r0,a
      000DEA A3               [24] 2718 	inc	dptr
      000DEB E0               [24] 2719 	movx	a,@dptr
      000DEC F9               [12] 2720 	mov	r1,a
      000DED 7F 00            [12] 2721 	mov	r7,#0x00
      000DEF 88 82            [24] 2722 	mov	dpl,r0
      000DF1 89 83            [24] 2723 	mov	dph,r1
      000DF3 8F F0            [24] 2724 	mov	b,r7
      000DF5 C0 03            [24] 2725 	push	ar3
      000DF7 C0 02            [24] 2726 	push	ar2
      000DF9 C0 01            [24] 2727 	push	ar1
      000DFB C0 00            [24] 2728 	push	ar0
      000DFD 12r00r00         [24] 2729 	lcall	_free
      000E00 D0 00            [24] 2730 	pop	ar0
      000E02 D0 01            [24] 2731 	pop	ar1
      000E04 D0 02            [24] 2732 	pop	ar2
      000E06 D0 03            [24] 2733 	pop	ar3
                                   2734 ;	main.c:334: printf_tiny("\n\rBuffer %d is free \n\r",total_buff_count);
      000E08 C0 03            [24] 2735 	push	ar3
      000E0A C0 02            [24] 2736 	push	ar2
      000E0C C0 01            [24] 2737 	push	ar1
      000E0E C0 00            [24] 2738 	push	ar0
      000E10 C0 02            [24] 2739 	push	ar2
      000E12 C0 03            [24] 2740 	push	ar3
      000E14 74r21            [12] 2741 	mov	a,#___str_59
      000E16 C0 E0            [24] 2742 	push	acc
      000E18 74s08            [12] 2743 	mov	a,#(___str_59 >> 8)
      000E1A C0 E0            [24] 2744 	push	acc
      000E1C 12r00r00         [24] 2745 	lcall	_printf_tiny
      000E1F E5 81            [12] 2746 	mov	a,sp
      000E21 24 FC            [12] 2747 	add	a,#0xfc
      000E23 F5 81            [12] 2748 	mov	sp,a
      000E25 D0 00            [24] 2749 	pop	ar0
      000E27 D0 01            [24] 2750 	pop	ar1
      000E29 D0 02            [24] 2751 	pop	ar2
      000E2B D0 03            [24] 2752 	pop	ar3
      000E2D D0 04            [24] 2753 	pop	ar4
      000E2F D0 05            [24] 2754 	pop	ar5
                                   2755 ;	main.c:330: for(total_buff_count=2; (total_buff_count)<(i+2); (total_buff_count)++)
      000E31 0A               [12] 2756 	inc	r2
      000E32 BA 00 01         [24] 2757 	cjne	r2,#0x00,00418$
      000E35 0B               [12] 2758 	inc	r3
      000E36                       2759 00418$:
      000E36 D0 01            [24] 2760 	pop	ar1
      000E38 D0 00            [24] 2761 	pop	ar0
      000E3A 02r0Dr95         [24] 2762 	ljmp	00190$
      000E3D                       2763 00148$:
                                   2764 ;	main.c:336: main();
      000E3D C0 05            [24] 2765 	push	ar5
      000E3F C0 04            [24] 2766 	push	ar4
      000E41 C0 01            [24] 2767 	push	ar1
      000E43 C0 00            [24] 2768 	push	ar0
      000E45 12r00r13         [24] 2769 	lcall	_main
      000E48 D0 00            [24] 2770 	pop	ar0
      000E4A D0 01            [24] 2771 	pop	ar1
      000E4C D0 04            [24] 2772 	pop	ar4
      000E4E D0 05            [24] 2773 	pop	ar5
      000E50 02r02r6C         [24] 2774 	ljmp	00116$
      000E53                       2775 00152$:
                                   2776 ;	main.c:338: else if (input_char == '#')
      000E53 74 23            [12] 2777 	mov	a,#0x23
      000E55 B5*04 02         [24] 2778 	cjne	a,_main_sloc2_1_0,00419$
      000E58 80 03            [24] 2779 	sjmp	00420$
      000E5A                       2780 00419$:
      000E5A 02r02r6C         [24] 2781 	ljmp	00116$
      000E5D                       2782 00420$:
                                   2783 ;	main.c:340: printf_tiny("\n\r OPTIONS \n\r");
      000E5D C0 05            [24] 2784 	push	ar5
      000E5F C0 04            [24] 2785 	push	ar4
      000E61 C0 01            [24] 2786 	push	ar1
      000E63 C0 00            [24] 2787 	push	ar0
      000E65 74r65            [12] 2788 	mov	a,#___str_9
      000E67 C0 E0            [24] 2789 	push	acc
      000E69 74s01            [12] 2790 	mov	a,#(___str_9 >> 8)
      000E6B C0 E0            [24] 2791 	push	acc
      000E6D 12r00r00         [24] 2792 	lcall	_printf_tiny
      000E70 15 81            [12] 2793 	dec	sp
      000E72 15 81            [12] 2794 	dec	sp
                                   2795 ;	main.c:341: printf_tiny("You can enter characters to be stored in buffer 0\n\r");
      000E74 74r73            [12] 2796 	mov	a,#___str_10
      000E76 C0 E0            [24] 2797 	push	acc
      000E78 74s01            [12] 2798 	mov	a,#(___str_10 >> 8)
      000E7A C0 E0            [24] 2799 	push	acc
      000E7C 12r00r00         [24] 2800 	lcall	_printf_tiny
      000E7F 15 81            [12] 2801 	dec	sp
      000E81 15 81            [12] 2802 	dec	sp
                                   2803 ;	main.c:342: printf_tiny("Press + to create a new buffer of size between 30 and 300 bytes\n\r");
      000E83 74rA7            [12] 2804 	mov	a,#___str_11
      000E85 C0 E0            [24] 2805 	push	acc
      000E87 74s01            [12] 2806 	mov	a,#(___str_11 >> 8)
      000E89 C0 E0            [24] 2807 	push	acc
      000E8B 12r00r00         [24] 2808 	lcall	_printf_tiny
      000E8E 15 81            [12] 2809 	dec	sp
      000E90 15 81            [12] 2810 	dec	sp
                                   2811 ;	main.c:343: printf_tiny("Press - to delete a buffer.\n\r");
      000E92 74rE9            [12] 2812 	mov	a,#___str_12
      000E94 C0 E0            [24] 2813 	push	acc
      000E96 74s01            [12] 2814 	mov	a,#(___str_12 >> 8)
      000E98 C0 E0            [24] 2815 	push	acc
      000E9A 12r00r00         [24] 2816 	lcall	_printf_tiny
      000E9D 15 81            [12] 2817 	dec	sp
      000E9F 15 81            [12] 2818 	dec	sp
                                   2819 ;	main.c:344: printf_tiny("Press ? to generate a heap report.\n\r");
      000EA1 74r07            [12] 2820 	mov	a,#___str_13
      000EA3 C0 E0            [24] 2821 	push	acc
      000EA5 74s02            [12] 2822 	mov	a,#(___str_13 >> 8)
      000EA7 C0 E0            [24] 2823 	push	acc
      000EA9 12r00r00         [24] 2824 	lcall	_printf_tiny
      000EAC 15 81            [12] 2825 	dec	sp
      000EAE 15 81            [12] 2826 	dec	sp
                                   2827 ;	main.c:345: printf_tiny("Press = to display current contents of buffer 0.\n\r");
      000EB0 74r2C            [12] 2828 	mov	a,#___str_14
      000EB2 C0 E0            [24] 2829 	push	acc
      000EB4 74s02            [12] 2830 	mov	a,#(___str_14 >> 8)
      000EB6 C0 E0            [24] 2831 	push	acc
      000EB8 12r00r00         [24] 2832 	lcall	_printf_tiny
      000EBB 15 81            [12] 2833 	dec	sp
      000EBD 15 81            [12] 2834 	dec	sp
                                   2835 ;	main.c:346: printf_tiny("Press @ to free all buffers and start program again.\n\r");
      000EBF 74r5F            [12] 2836 	mov	a,#___str_15
      000EC1 C0 E0            [24] 2837 	push	acc
      000EC3 74s02            [12] 2838 	mov	a,#(___str_15 >> 8)
      000EC5 C0 E0            [24] 2839 	push	acc
      000EC7 12r00r00         [24] 2840 	lcall	_printf_tiny
      000ECA 15 81            [12] 2841 	dec	sp
      000ECC 15 81            [12] 2842 	dec	sp
                                   2843 ;	main.c:347: printf_tiny("Press # to see the menu again.\n\r");
      000ECE 74r96            [12] 2844 	mov	a,#___str_16
      000ED0 C0 E0            [24] 2845 	push	acc
      000ED2 74s02            [12] 2846 	mov	a,#(___str_16 >> 8)
      000ED4 C0 E0            [24] 2847 	push	acc
      000ED6 12r00r00         [24] 2848 	lcall	_printf_tiny
      000ED9 15 81            [12] 2849 	dec	sp
      000EDB 15 81            [12] 2850 	dec	sp
      000EDD D0 00            [24] 2851 	pop	ar0
      000EDF D0 01            [24] 2852 	pop	ar1
      000EE1 D0 04            [24] 2853 	pop	ar4
      000EE3 D0 05            [24] 2854 	pop	ar5
                                   2855 ;	main.c:348: goto ishaan;
                                   2856 ;	main.c:351: }
      000EE5 02r02r6C         [24] 2857 	ljmp	00116$
                                   2858 ;------------------------------------------------------------
                                   2859 ;Allocation info for local variables in function 'putchar'
                                   2860 ;------------------------------------------------------------
                                   2861 ;c                         Allocated with name '_putchar_c_65536_84'
                                   2862 ;------------------------------------------------------------
                                   2863 ;	main.c:357: int putchar (int c)
                                   2864 ;	-----------------------------------------
                                   2865 ;	 function putchar
                                   2866 ;	-----------------------------------------
      000EE8                       2867 _putchar:
      000EE8 AF 83            [24] 2868 	mov	r7,dph
      000EEA E5 82            [12] 2869 	mov	a,dpl
      000EEC 90r00rD5         [24] 2870 	mov	dptr,#_putchar_c_65536_84
      000EEF F0               [24] 2871 	movx	@dptr,a
      000EF0 EF               [12] 2872 	mov	a,r7
      000EF1 A3               [24] 2873 	inc	dptr
      000EF2 F0               [24] 2874 	movx	@dptr,a
                                   2875 ;	main.c:359: while (!TI);
      000EF3                       2876 00101$:
      000EF3 30 99 FD         [24] 2877 	jnb	_TI,00101$
                                   2878 ;	main.c:361: SBUF = c;           // load serial port with transmit value
      000EF6 90r00rD5         [24] 2879 	mov	dptr,#_putchar_c_65536_84
      000EF9 E0               [24] 2880 	movx	a,@dptr
      000EFA FE               [12] 2881 	mov	r6,a
      000EFB A3               [24] 2882 	inc	dptr
      000EFC E0               [24] 2883 	movx	a,@dptr
      000EFD FF               [12] 2884 	mov	r7,a
      000EFE 8E 99            [24] 2885 	mov	_SBUF,r6
                                   2886 ;	main.c:362: TI = 0;             // clear TI flag
                                   2887 ;	assignBit
      000F00 C2 99            [12] 2888 	clr	_TI
                                   2889 ;	main.c:364: return c;
      000F02 8E 82            [24] 2890 	mov	dpl,r6
      000F04 8F 83            [24] 2891 	mov	dph,r7
                                   2892 ;	main.c:365: }
      000F06 22               [24] 2893 	ret
                                   2894 ;------------------------------------------------------------
                                   2895 ;Allocation info for local variables in function 'getchar'
                                   2896 ;------------------------------------------------------------
                                   2897 ;	main.c:371: int getchar (void)
                                   2898 ;	-----------------------------------------
                                   2899 ;	 function getchar
                                   2900 ;	-----------------------------------------
      000F07                       2901 _getchar:
                                   2902 ;	main.c:373: while (!RI);
      000F07                       2903 00101$:
                                   2904 ;	main.c:376: RI = 0;                         // clear RI flag
                                   2905 ;	assignBit
      000F07 10 98 02         [24] 2906 	jbc	_RI,00114$
      000F0A 80 FB            [24] 2907 	sjmp	00101$
      000F0C                       2908 00114$:
                                   2909 ;	main.c:377: return SBUF;                    // return character from SBUF
      000F0C AE 99            [24] 2910 	mov	r6,_SBUF
      000F0E 7F 00            [12] 2911 	mov	r7,#0x00
      000F10 8E 82            [24] 2912 	mov	dpl,r6
      000F12 8F 83            [24] 2913 	mov	dph,r7
                                   2914 ;	main.c:378: }
      000F14 22               [24] 2915 	ret
                                   2916 ;------------------------------------------------------------
                                   2917 ;Allocation info for local variables in function 'num_input'
                                   2918 ;------------------------------------------------------------
                                   2919 ;digit                     Allocated with name '_num_input_digit_65536_88'
                                   2920 ;digit_store               Allocated with name '_num_input_digit_store_65536_88'
                                   2921 ;counter                   Allocated with name '_num_input_counter_65536_88'
                                   2922 ;number                    Allocated with name '_num_input_number_65536_88'
                                   2923 ;buffer_number             Allocated with name '_num_input_buffer_number_131072_92'
                                   2924 ;------------------------------------------------------------
                                   2925 ;	main.c:383: uint16_t num_input()
                                   2926 ;	-----------------------------------------
                                   2927 ;	 function num_input
                                   2928 ;	-----------------------------------------
      000F15                       2929 _num_input:
                                   2930 ;	main.c:388: __xdata uint8_t digit = 0;
      000F15 90r00rD7         [24] 2931 	mov	dptr,#_num_input_digit_65536_88
      000F18 E4               [12] 2932 	clr	a
      000F19 F0               [24] 2933 	movx	@dptr,a
                                   2934 ;	main.c:390: __xdata uint8_t counter = 0;
      000F1A 90r00rE2         [24] 2935 	mov	dptr,#_num_input_counter_65536_88
      000F1D F0               [24] 2936 	movx	@dptr,a
                                   2937 ;	main.c:391: __xdata uint16_t number = 0;
      000F1E 90r00rE3         [24] 2938 	mov	dptr,#_num_input_number_65536_88
      000F21 F0               [24] 2939 	movx	@dptr,a
      000F22 A3               [24] 2940 	inc	dptr
      000F23 F0               [24] 2941 	movx	@dptr,a
                                   2942 ;	main.c:394: while(digit!=13)
      000F24                       2943 00107$:
      000F24 90r00rD7         [24] 2944 	mov	dptr,#_num_input_digit_65536_88
      000F27 E0               [24] 2945 	movx	a,@dptr
      000F28 FF               [12] 2946 	mov	r7,a
      000F29 BF 0D 02         [24] 2947 	cjne	r7,#0x0d,00145$
      000F2C 80 5F            [24] 2948 	sjmp	00109$
      000F2E                       2949 00145$:
                                   2950 ;	main.c:397: digit=getchar();
      000F2E 12r0Fr07         [24] 2951 	lcall	_getchar
      000F31 AE 82            [24] 2952 	mov	r6,dpl
      000F33 AF 83            [24] 2953 	mov	r7,dph
      000F35 90r00rD7         [24] 2954 	mov	dptr,#_num_input_digit_65536_88
      000F38 EE               [12] 2955 	mov	a,r6
      000F39 F0               [24] 2956 	movx	@dptr,a
                                   2957 ;	main.c:399: if((digit >= '0') && (digit <= '9'))
      000F3A BE 30 00         [24] 2958 	cjne	r6,#0x30,00146$
      000F3D                       2959 00146$:
      000F3D 40 31            [24] 2960 	jc	00104$
      000F3F EE               [12] 2961 	mov	a,r6
      000F40 24 C6            [12] 2962 	add	a,#0xff - 0x39
      000F42 40 2C            [24] 2963 	jc	00104$
                                   2964 ;	main.c:401: putchar(digit);
      000F44 8E 05            [24] 2965 	mov	ar5,r6
      000F46 7F 00            [12] 2966 	mov	r7,#0x00
      000F48 8D 82            [24] 2967 	mov	dpl,r5
      000F4A 8F 83            [24] 2968 	mov	dph,r7
      000F4C C0 06            [24] 2969 	push	ar6
      000F4E 12r0ErE8         [24] 2970 	lcall	_putchar
      000F51 D0 06            [24] 2971 	pop	ar6
                                   2972 ;	main.c:402: digit_store[counter]=digit-'0';
      000F53 90r00rE2         [24] 2973 	mov	dptr,#_num_input_counter_65536_88
      000F56 E0               [24] 2974 	movx	a,@dptr
      000F57 FF               [12] 2975 	mov	r7,a
      000F58 24rD8            [12] 2976 	add	a,#_num_input_digit_store_65536_88
      000F5A F5 82            [12] 2977 	mov	dpl,a
      000F5C E4               [12] 2978 	clr	a
      000F5D 34s00            [12] 2979 	addc	a,#(_num_input_digit_store_65536_88 >> 8)
      000F5F F5 83            [12] 2980 	mov	dph,a
      000F61 8E 05            [24] 2981 	mov	ar5,r6
      000F63 ED               [12] 2982 	mov	a,r5
      000F64 24 D0            [12] 2983 	add	a,#0xd0
      000F66 FD               [12] 2984 	mov	r5,a
      000F67 F0               [24] 2985 	movx	@dptr,a
                                   2986 ;	main.c:403: counter++;
      000F68 90r00rE2         [24] 2987 	mov	dptr,#_num_input_counter_65536_88
      000F6B EF               [12] 2988 	mov	a,r7
      000F6C 04               [12] 2989 	inc	a
      000F6D F0               [24] 2990 	movx	@dptr,a
      000F6E 80 B4            [24] 2991 	sjmp	00107$
      000F70                       2992 00104$:
                                   2993 ;	main.c:406: else if(digit==8) //check for backspace
      000F70 BE 08 B1         [24] 2994 	cjne	r6,#0x08,00107$
                                   2995 ;	main.c:408: putchar(8);     //print backspace
      000F73 90 00 08         [24] 2996 	mov	dptr,#0x0008
      000F76 12r0ErE8         [24] 2997 	lcall	_putchar
                                   2998 ;	main.c:409: putchar(32);    //print space
      000F79 90 00 20         [24] 2999 	mov	dptr,#0x0020
      000F7C 12r0ErE8         [24] 3000 	lcall	_putchar
                                   3001 ;	main.c:410: putchar(8);     //print backspace
      000F7F 90 00 08         [24] 3002 	mov	dptr,#0x0008
      000F82 12r0ErE8         [24] 3003 	lcall	_putchar
                                   3004 ;	main.c:411: counter--;
      000F85 90r00rE2         [24] 3005 	mov	dptr,#_num_input_counter_65536_88
      000F88 E0               [24] 3006 	movx	a,@dptr
      000F89 14               [12] 3007 	dec	a
      000F8A F0               [24] 3008 	movx	@dptr,a
      000F8B 80 97            [24] 3009 	sjmp	00107$
      000F8D                       3010 00109$:
                                   3011 ;	main.c:414: printf_tiny("\n\r");
      000F8D 74r38            [12] 3012 	mov	a,#___str_60
      000F8F C0 E0            [24] 3013 	push	acc
      000F91 74s08            [12] 3014 	mov	a,#(___str_60 >> 8)
      000F93 C0 E0            [24] 3015 	push	acc
      000F95 12r00r00         [24] 3016 	lcall	_printf_tiny
      000F98 15 81            [12] 3017 	dec	sp
      000F9A 15 81            [12] 3018 	dec	sp
                                   3019 ;	main.c:416: for(int buffer_number=0; buffer_number<counter; buffer_number++)
      000F9C 90r00rE2         [24] 3020 	mov	dptr,#_num_input_counter_65536_88
      000F9F E0               [24] 3021 	movx	a,@dptr
      000FA0 FF               [12] 3022 	mov	r7,a
      000FA1 7D 00            [12] 3023 	mov	r5,#0x00
      000FA3 7E 00            [12] 3024 	mov	r6,#0x00
      000FA5                       3025 00112$:
      000FA5 8F 03            [24] 3026 	mov	ar3,r7
      000FA7 7C 00            [12] 3027 	mov	r4,#0x00
      000FA9 C3               [12] 3028 	clr	c
      000FAA ED               [12] 3029 	mov	a,r5
      000FAB 9B               [12] 3030 	subb	a,r3
      000FAC EE               [12] 3031 	mov	a,r6
      000FAD 64 80            [12] 3032 	xrl	a,#0x80
      000FAF 8C F0            [24] 3033 	mov	b,r4
      000FB1 63 F0 80         [24] 3034 	xrl	b,#0x80
      000FB4 95 F0            [12] 3035 	subb	a,b
      000FB6 50 59            [24] 3036 	jnc	00110$
                                   3037 ;	main.c:418: number*= 10;
      000FB8 90r00rE3         [24] 3038 	mov	dptr,#_num_input_number_65536_88
      000FBB E0               [24] 3039 	movx	a,@dptr
      000FBC FB               [12] 3040 	mov	r3,a
      000FBD A3               [24] 3041 	inc	dptr
      000FBE E0               [24] 3042 	movx	a,@dptr
      000FBF FC               [12] 3043 	mov	r4,a
      000FC0 90r00r00         [24] 3044 	mov	dptr,#__mulint_PARM_2
      000FC3 EB               [12] 3045 	mov	a,r3
      000FC4 F0               [24] 3046 	movx	@dptr,a
      000FC5 EC               [12] 3047 	mov	a,r4
      000FC6 A3               [24] 3048 	inc	dptr
      000FC7 F0               [24] 3049 	movx	@dptr,a
      000FC8 90 00 0A         [24] 3050 	mov	dptr,#0x000a
      000FCB C0 07            [24] 3051 	push	ar7
      000FCD C0 06            [24] 3052 	push	ar6
      000FCF C0 05            [24] 3053 	push	ar5
      000FD1 12r00r00         [24] 3054 	lcall	__mulint
      000FD4 AB 82            [24] 3055 	mov	r3,dpl
      000FD6 AC 83            [24] 3056 	mov	r4,dph
      000FD8 D0 05            [24] 3057 	pop	ar5
      000FDA D0 06            [24] 3058 	pop	ar6
      000FDC D0 07            [24] 3059 	pop	ar7
      000FDE 90r00rE3         [24] 3060 	mov	dptr,#_num_input_number_65536_88
      000FE1 EB               [12] 3061 	mov	a,r3
      000FE2 F0               [24] 3062 	movx	@dptr,a
      000FE3 EC               [12] 3063 	mov	a,r4
      000FE4 A3               [24] 3064 	inc	dptr
      000FE5 F0               [24] 3065 	movx	@dptr,a
                                   3066 ;	main.c:419: number+= digit_store[buffer_number];
      000FE6 ED               [12] 3067 	mov	a,r5
      000FE7 24rD8            [12] 3068 	add	a,#_num_input_digit_store_65536_88
      000FE9 F5 82            [12] 3069 	mov	dpl,a
      000FEB EE               [12] 3070 	mov	a,r6
      000FEC 34s00            [12] 3071 	addc	a,#(_num_input_digit_store_65536_88 >> 8)
      000FEE F5 83            [12] 3072 	mov	dph,a
      000FF0 E0               [24] 3073 	movx	a,@dptr
      000FF1 FC               [12] 3074 	mov	r4,a
      000FF2 7B 00            [12] 3075 	mov	r3,#0x00
      000FF4 90r00rE3         [24] 3076 	mov	dptr,#_num_input_number_65536_88
      000FF7 E0               [24] 3077 	movx	a,@dptr
      000FF8 F9               [12] 3078 	mov	r1,a
      000FF9 A3               [24] 3079 	inc	dptr
      000FFA E0               [24] 3080 	movx	a,@dptr
      000FFB FA               [12] 3081 	mov	r2,a
      000FFC EC               [12] 3082 	mov	a,r4
      000FFD 29               [12] 3083 	add	a,r1
      000FFE F9               [12] 3084 	mov	r1,a
      000FFF EB               [12] 3085 	mov	a,r3
      001000 3A               [12] 3086 	addc	a,r2
      001001 FA               [12] 3087 	mov	r2,a
      001002 90r00rE3         [24] 3088 	mov	dptr,#_num_input_number_65536_88
      001005 E9               [12] 3089 	mov	a,r1
      001006 F0               [24] 3090 	movx	@dptr,a
      001007 EA               [12] 3091 	mov	a,r2
      001008 A3               [24] 3092 	inc	dptr
      001009 F0               [24] 3093 	movx	@dptr,a
                                   3094 ;	main.c:416: for(int buffer_number=0; buffer_number<counter; buffer_number++)
      00100A 0D               [12] 3095 	inc	r5
      00100B BD 00 97         [24] 3096 	cjne	r5,#0x00,00112$
      00100E 0E               [12] 3097 	inc	r6
      00100F 80 94            [24] 3098 	sjmp	00112$
      001011                       3099 00110$:
                                   3100 ;	main.c:422: return number;
      001011 90r00rE3         [24] 3101 	mov	dptr,#_num_input_number_65536_88
      001014 E0               [24] 3102 	movx	a,@dptr
      001015 FE               [12] 3103 	mov	r6,a
      001016 A3               [24] 3104 	inc	dptr
      001017 E0               [24] 3105 	movx	a,@dptr
                                   3106 ;	main.c:423: }
      001018 8E 82            [24] 3107 	mov	dpl,r6
      00101A F5 83            [12] 3108 	mov	dph,a
      00101C 22               [24] 3109 	ret
                                   3110 	.area CSEG    (CODE)
                                   3111 	.area CONST   (CODE)
                                   3112 	.area CONST   (CODE)
      000000                       3113 ___str_0:
      000000 0A                    3114 	.db 0x0a
      000001 0D                    3115 	.db 0x0d
      000002 2A 2A 2A 2A 2A 2A 2A  3116 	.ascii "****************************** WELCOME *********************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 20 57 45 4C 43
             4F 4D 45 20 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      00003E 2A 2A 2A 2A 2A 2A 2A  3117 	.ascii "*********"
             2A 2A
      000047 0A                    3118 	.db 0x0a
      000048 0D                    3119 	.db 0x0d
      000049 00                    3120 	.db 0x00
                                   3121 	.area CSEG    (CODE)
                                   3122 	.area CONST   (CODE)
      00004A                       3123 ___str_1:
      00004A 0A                    3124 	.db 0x0a
      00004B 0D                    3125 	.db 0x0d
      00004C 45 6E 74 65 72 20 66  3126 	.ascii "Enter four digit number between 1-4800 for buffer size"
             6F 75 72 20 64 69 67
             69 74 20 6E 75 6D 62
             65 72 20 62 65 74 77
             65 65 6E 20 31 2D 34
             38 30 30 20 66 6F 72
             20 62 75 66 66 65 72
             20 73 69 7A 65
      000082 0A                    3127 	.db 0x0a
      000083 0D                    3128 	.db 0x0d
      000084 00                    3129 	.db 0x00
                                   3130 	.area CSEG    (CODE)
                                   3131 	.area CONST   (CODE)
      000085                       3132 ___str_2:
      000085 54 68 65 20 49 6E 70  3133 	.ascii "The Input number is=%d"
             75 74 20 6E 75 6D 62
             65 72 20 69 73 3D 25
             64
      00009B 0A                    3134 	.db 0x0a
      00009C 0D                    3135 	.db 0x0d
      00009D 00                    3136 	.db 0x00
                                   3137 	.area CSEG    (CODE)
                                   3138 	.area CONST   (CODE)
      00009E                       3139 ___str_3:
      00009E 49 6E 76 61 6C 69 64  3140 	.ascii "Invalid input. Please try again"
             20 69 6E 70 75 74 2E
             20 50 6C 65 61 73 65
             20 74 72 79 20 61 67
             61 69 6E
      0000BD 0A                    3141 	.db 0x0a
      0000BE 0D                    3142 	.db 0x0d
      0000BF 00                    3143 	.db 0x00
                                   3144 	.area CSEG    (CODE)
                                   3145 	.area CONST   (CODE)
      0000C0                       3146 ___str_4:
      0000C0 6D 61 6C 6C 6F 63 20  3147 	.ascii "malloc buffer 0 failed"
             62 75 66 66 65 72 20
             30 20 66 61 69 6C 65
             64
      0000D6 0A                    3148 	.db 0x0a
      0000D7 0D                    3149 	.db 0x0d
      0000D8 00                    3150 	.db 0x00
                                   3151 	.area CSEG    (CODE)
                                   3152 	.area CONST   (CODE)
      0000D9                       3153 ___str_5:
      0000D9 6D 61 6C 6C 6F 63 20  3154 	.ascii "malloc buffer 1 failed"
             62 75 66 66 65 72 20
             31 20 66 61 69 6C 65
             64
      0000EF 0A                    3155 	.db 0x0a
      0000F0 0D                    3156 	.db 0x0d
      0000F1 00                    3157 	.db 0x00
                                   3158 	.area CSEG    (CODE)
                                   3159 	.area CONST   (CODE)
      0000F2                       3160 ___str_6:
      0000F2 53 74 61 72 74 20 41  3161 	.ascii "Start Address of buffer_0 = 0x%x"
             64 64 72 65 73 73 20
             6F 66 20 62 75 66 66
             65 72 5F 30 20 3D 20
             30 78 25 78
      000112 0A                    3162 	.db 0x0a
      000113 0D                    3163 	.db 0x0d
      000114 00                    3164 	.db 0x00
                                   3165 	.area CSEG    (CODE)
                                   3166 	.area CONST   (CODE)
      000115                       3167 ___str_7:
      000115 53 74 61 72 74 20 41  3168 	.ascii "Start Address of buffer_1 = 0x%x"
             64 64 72 65 73 73 20
             6F 66 20 62 75 66 66
             65 72 5F 31 20 3D 20
             30 78 25 78
      000135 0A                    3169 	.db 0x0a
      000136 0D                    3170 	.db 0x0d
      000137 00                    3171 	.db 0x00
                                   3172 	.area CSEG    (CODE)
                                   3173 	.area CONST   (CODE)
      000138                       3174 ___str_8:
      000138 42 75 66 66 65 72 20  3175 	.ascii "Buffer 0 and Buffer 1 successfully Created"
             30 20 61 6E 64 20 42
             75 66 66 65 72 20 31
             20 73 75 63 63 65 73
             73 66 75 6C 6C 79 20
             43 72 65 61 74 65 64
      000162 0A                    3176 	.db 0x0a
      000163 0D                    3177 	.db 0x0d
      000164 00                    3178 	.db 0x00
                                   3179 	.area CSEG    (CODE)
                                   3180 	.area CONST   (CODE)
      000165                       3181 ___str_9:
      000165 0A                    3182 	.db 0x0a
      000166 0D                    3183 	.db 0x0d
      000167 20 4F 50 54 49 4F 4E  3184 	.ascii " OPTIONS "
             53 20
      000170 0A                    3185 	.db 0x0a
      000171 0D                    3186 	.db 0x0d
      000172 00                    3187 	.db 0x00
                                   3188 	.area CSEG    (CODE)
                                   3189 	.area CONST   (CODE)
      000173                       3190 ___str_10:
      000173 59 6F 75 20 63 61 6E  3191 	.ascii "You can enter characters to be stored in buffer 0"
             20 65 6E 74 65 72 20
             63 68 61 72 61 63 74
             65 72 73 20 74 6F 20
             62 65 20 73 74 6F 72
             65 64 20 69 6E 20 62
             75 66 66 65 72 20 30
      0001A4 0A                    3192 	.db 0x0a
      0001A5 0D                    3193 	.db 0x0d
      0001A6 00                    3194 	.db 0x00
                                   3195 	.area CSEG    (CODE)
                                   3196 	.area CONST   (CODE)
      0001A7                       3197 ___str_11:
      0001A7 50 72 65 73 73 20 2B  3198 	.ascii "Press + to create a new buffer of size between 30 and 300 by"
             20 74 6F 20 63 72 65
             61 74 65 20 61 20 6E
             65 77 20 62 75 66 66
             65 72 20 6F 66 20 73
             69 7A 65 20 62 65 74
             77 65 65 6E 20 33 30
             20 61 6E 64 20 33 30
             30 20 62 79
      0001E3 74 65 73              3199 	.ascii "tes"
      0001E6 0A                    3200 	.db 0x0a
      0001E7 0D                    3201 	.db 0x0d
      0001E8 00                    3202 	.db 0x00
                                   3203 	.area CSEG    (CODE)
                                   3204 	.area CONST   (CODE)
      0001E9                       3205 ___str_12:
      0001E9 50 72 65 73 73 20 2D  3206 	.ascii "Press - to delete a buffer."
             20 74 6F 20 64 65 6C
             65 74 65 20 61 20 62
             75 66 66 65 72 2E
      000204 0A                    3207 	.db 0x0a
      000205 0D                    3208 	.db 0x0d
      000206 00                    3209 	.db 0x00
                                   3210 	.area CSEG    (CODE)
                                   3211 	.area CONST   (CODE)
      000207                       3212 ___str_13:
      000207 50 72 65 73 73 20 3F  3213 	.ascii "Press ? to generate a heap report."
             20 74 6F 20 67 65 6E
             65 72 61 74 65 20 61
             20 68 65 61 70 20 72
             65 70 6F 72 74 2E
      000229 0A                    3214 	.db 0x0a
      00022A 0D                    3215 	.db 0x0d
      00022B 00                    3216 	.db 0x00
                                   3217 	.area CSEG    (CODE)
                                   3218 	.area CONST   (CODE)
      00022C                       3219 ___str_14:
      00022C 50 72 65 73 73 20 3D  3220 	.ascii "Press = to display current contents of buffer 0."
             20 74 6F 20 64 69 73
             70 6C 61 79 20 63 75
             72 72 65 6E 74 20 63
             6F 6E 74 65 6E 74 73
             20 6F 66 20 62 75 66
             66 65 72 20 30 2E
      00025C 0A                    3221 	.db 0x0a
      00025D 0D                    3222 	.db 0x0d
      00025E 00                    3223 	.db 0x00
                                   3224 	.area CSEG    (CODE)
                                   3225 	.area CONST   (CODE)
      00025F                       3226 ___str_15:
      00025F 50 72 65 73 73 20 40  3227 	.ascii "Press @ to free all buffers and start program again."
             20 74 6F 20 66 72 65
             65 20 61 6C 6C 20 62
             75 66 66 65 72 73 20
             61 6E 64 20 73 74 61
             72 74 20 70 72 6F 67
             72 61 6D 20 61 67 61
             69 6E 2E
      000293 0A                    3228 	.db 0x0a
      000294 0D                    3229 	.db 0x0d
      000295 00                    3230 	.db 0x00
                                   3231 	.area CSEG    (CODE)
                                   3232 	.area CONST   (CODE)
      000296                       3233 ___str_16:
      000296 50 72 65 73 73 20 23  3234 	.ascii "Press # to see the menu again."
             20 74 6F 20 73 65 65
             20 74 68 65 20 6D 65
             6E 75 20 61 67 61 69
             6E 2E
      0002B4 0A                    3235 	.db 0x0a
      0002B5 0D                    3236 	.db 0x0d
      0002B6 00                    3237 	.db 0x00
                                   3238 	.area CSEG    (CODE)
                                   3239 	.area CONST   (CODE)
      0002B7                       3240 ___str_17:
      0002B7 0A                    3241 	.db 0x0a
      0002B8 0D                    3242 	.db 0x0d
      0002B9 2A 2A 2A 2A 2A 2A 2A  3243 	.ascii "****************************THANK YOU***********************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             54 48 41 4E 4B 20 59
             4F 55 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      0002F5 2A 2A 2A 2A 2A        3244 	.ascii "*****"
      0002FA 0A                    3245 	.db 0x0a
      0002FB 0D                    3246 	.db 0x0d
      0002FC 00                    3247 	.db 0x00
                                   3248 	.area CSEG    (CODE)
                                   3249 	.area CONST   (CODE)
      0002FD                       3250 ___str_18:
      0002FD 43 72 65 61 74 65 64  3251 	.ascii "Created by Gauriech Ishaan Pilla."
             20 62 79 20 47 61 75
             72 69 65 63 68 20 49
             73 68 61 61 6E 20 50
             69 6C 6C 61 2E
      00031E 0A                    3252 	.db 0x0a
      00031F 0D                    3253 	.db 0x0d
      000320 00                    3254 	.db 0x00
                                   3255 	.area CSEG    (CODE)
                                   3256 	.area CONST   (CODE)
      000321                       3257 ___str_19:
      000321 0A                    3258 	.db 0x0a
      000322 0D                    3259 	.db 0x0d
      000323 45 6E 74 65 72 20 74  3260 	.ascii "Enter the character"
             68 65 20 63 68 61 72
             61 63 74 65 72
      000336 0A                    3261 	.db 0x0a
      000337 0D                    3262 	.db 0x0d
      000338 00                    3263 	.db 0x00
                                   3264 	.area CSEG    (CODE)
                                   3265 	.area CONST   (CODE)
      000339                       3266 ___str_20:
      000339 0A                    3267 	.db 0x0a
      00033A 0D                    3268 	.db 0x0d
      00033B 0A                    3269 	.db 0x0a
      00033C 0D                    3270 	.db 0x0d
      00033D 00                    3271 	.db 0x00
                                   3272 	.area CSEG    (CODE)
                                   3273 	.area CONST   (CODE)
      00033E                       3274 ___str_21:
      00033E 0A                    3275 	.db 0x0a
      00033F 0D                    3276 	.db 0x0d
      000340 42 75 66 66 65 72 20  3277 	.ascii "Buffer 0 is full."
             30 20 69 73 20 66 75
             6C 6C 2E
      000351 0A                    3278 	.db 0x0a
      000352 0D                    3279 	.db 0x0d
      000353 00                    3280 	.db 0x00
                                   3281 	.area CSEG    (CODE)
                                   3282 	.area CONST   (CODE)
      000354                       3283 ___str_22:
      000354 0A                    3284 	.db 0x0a
      000355 0D                    3285 	.db 0x0d
      000356 20 41 6C 6C 6F 63 61  3286 	.ascii " Allocate a new Buffer "
             74 65 20 61 20 6E 65
             77 20 42 75 66 66 65
             72 20
      00036D 0A                    3287 	.db 0x0a
      00036E 0D                    3288 	.db 0x0d
      00036F 00                    3289 	.db 0x00
                                   3290 	.area CSEG    (CODE)
                                   3291 	.area CONST   (CODE)
      000370                       3292 ___str_23:
      000370 0A                    3293 	.db 0x0a
      000371 0D                    3294 	.db 0x0d
      000372 45 6E 74 65 72 20 74  3295 	.ascii "Enter the buffer size between 1 and 850"
             68 65 20 62 75 66 66
             65 72 20 73 69 7A 65
             20 62 65 74 77 65 65
             6E 20 31 20 61 6E 64
             20 38 35 30
      000399 0A                    3296 	.db 0x0a
      00039A 0D                    3297 	.db 0x0d
      00039B 00                    3298 	.db 0x00
                                   3299 	.area CSEG    (CODE)
                                   3300 	.area CONST   (CODE)
      00039C                       3301 ___str_24:
      00039C 0A                    3302 	.db 0x0a
      00039D 0D                    3303 	.db 0x0d
      00039E 4D 65 6D 6F 72 79 20  3304 	.ascii "Memory Allocation for Buffer_%d Failed"
             41 6C 6C 6F 63 61 74
             69 6F 6E 20 66 6F 72
             20 42 75 66 66 65 72
             5F 25 64 20 46 61 69
             6C 65 64
      0003C4 0A                    3305 	.db 0x0a
      0003C5 0D                    3306 	.db 0x0d
      0003C6 50 72 65 73 73 20 27  3307 	.ascii "Press '+' to Try again"
             2B 27 20 74 6F 20 54
             72 79 20 61 67 61 69
             6E
      0003DC 0A                    3308 	.db 0x0a
      0003DD 0D                    3309 	.db 0x0d
      0003DE 00                    3310 	.db 0x00
                                   3311 	.area CSEG    (CODE)
                                   3312 	.area CONST   (CODE)
      0003DF                       3313 ___str_25:
      0003DF 0A                    3314 	.db 0x0a
      0003E0 0D                    3315 	.db 0x0d
      0003E1 4D 65 6D 6F 72 79 20  3316 	.ascii "Memory Allocation Successful for Buffer_%d"
             41 6C 6C 6F 63 61 74
             69 6F 6E 20 53 75 63
             63 65 73 73 66 75 6C
             20 66 6F 72 20 42 75
             66 66 65 72 5F 25 64
      00040B 0A                    3317 	.db 0x0a
      00040C 0D                    3318 	.db 0x0d
      00040D 00                    3319 	.db 0x00
                                   3320 	.area CSEG    (CODE)
                                   3321 	.area CONST   (CODE)
      00040E                       3322 ___str_26:
      00040E 0A                    3323 	.db 0x0a
      00040F 0D                    3324 	.db 0x0d
      000410 42 75 66 66 65 72 5F  3325 	.ascii "Buffer_%d allocated of size %d"
             25 64 20 61 6C 6C 6F
             63 61 74 65 64 20 6F
             66 20 73 69 7A 65 20
             25 64
      00042E 0A                    3326 	.db 0x0a
      00042F 0D                    3327 	.db 0x0d
      000430 00                    3328 	.db 0x00
                                   3329 	.area CSEG    (CODE)
                                   3330 	.area CONST   (CODE)
      000431                       3331 ___str_27:
      000431 0A                    3332 	.db 0x0a
      000432 0D                    3333 	.db 0x0d
      000433 53 74 61 72 74 20 41  3334 	.ascii "Start Address of buffer_%d = 0x%x"
             64 64 72 65 73 73 20
             6F 66 20 62 75 66 66
             65 72 5F 25 64 20 3D
             20 30 78 25 78
      000454 0A                    3335 	.db 0x0a
      000455 0D                    3336 	.db 0x0d
      000456 00                    3337 	.db 0x00
                                   3338 	.area CSEG    (CODE)
                                   3339 	.area CONST   (CODE)
      000457                       3340 ___str_28:
      000457 0A                    3341 	.db 0x0a
      000458 0D                    3342 	.db 0x0d
      000459 45 6E 74 65 72 20 61  3343 	.ascii "Enter a valid buffer number"
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             6E 75 6D 62 65 72
      000474 0A                    3344 	.db 0x0a
      000475 0D                    3345 	.db 0x0d
      000476 00                    3346 	.db 0x00
                                   3347 	.area CSEG    (CODE)
                                   3348 	.area CONST   (CODE)
      000477                       3349 ___str_29:
      000477 0A                    3350 	.db 0x0a
      000478 0D                    3351 	.db 0x0d
      000479 42 75 66 66 65 72 20  3352 	.ascii "Buffer 0 cannot be deleted!"
             30 20 63 61 6E 6E 6F
             74 20 62 65 20 64 65
             6C 65 74 65 64 21
      000494 0A                    3353 	.db 0x0a
      000495 0D                    3354 	.db 0x0d
      000496 00                    3355 	.db 0x00
                                   3356 	.area CSEG    (CODE)
                                   3357 	.area CONST   (CODE)
      000497                       3358 ___str_30:
      000497 0A                    3359 	.db 0x0a
      000498 0D                    3360 	.db 0x0d
      000499 44 65 6C 65 74 69 6E  3361 	.ascii "Deleting buffer 1"
             67 20 62 75 66 66 65
             72 20 31
      0004AA 0A                    3362 	.db 0x0a
      0004AB 0D                    3363 	.db 0x0d
      0004AC 00                    3364 	.db 0x00
                                   3365 	.area CSEG    (CODE)
                                   3366 	.area CONST   (CODE)
      0004AD                       3367 ___str_31:
      0004AD 42 75 66 66 65 72 20  3368 	.ascii "Buffer 1 is free"
             31 20 69 73 20 66 72
             65 65
      0004BD 00                    3369 	.db 0x00
                                   3370 	.area CSEG    (CODE)
                                   3371 	.area CONST   (CODE)
      0004BE                       3372 ___str_32:
      0004BE 0A                    3373 	.db 0x0a
      0004BF 0D                    3374 	.db 0x0d
      0004C0 44 65 6C 65 74 69 6E  3375 	.ascii "Deleting buffer %d "
             67 20 62 75 66 66 65
             72 20 25 64 20
      0004D3 0A                    3376 	.db 0x0a
      0004D4 0D                    3377 	.db 0x0d
      0004D5 00                    3378 	.db 0x00
                                   3379 	.area CSEG    (CODE)
                                   3380 	.area CONST   (CODE)
      0004D6                       3381 ___str_33:
      0004D6 0A                    3382 	.db 0x0a
      0004D7 0D                    3383 	.db 0x0d
      0004D8 42 75 66 66 65 72 20  3384 	.ascii "Buffer %d is Free"
             25 64 20 69 73 20 46
             72 65 65
      0004E9 0A                    3385 	.db 0x0a
      0004EA 0D                    3386 	.db 0x0d
      0004EB 00                    3387 	.db 0x00
                                   3388 	.area CSEG    (CODE)
                                   3389 	.area CONST   (CODE)
      0004EC                       3390 ___str_34:
      0004EC 0A                    3391 	.db 0x0a
      0004ED 0D                    3392 	.db 0x0d
      0004EE 45 6E 74 65 72 20 61  3393 	.ascii "Enter a valid buffer number"
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             6E 75 6D 62 65 72
      000509 0A                    3394 	.db 0x0a
      00050A 0D                    3395 	.db 0x0d
      00050B 50 72 65 73 73 20 27  3396 	.ascii "Press '-' to delete any valid buffer"
             2D 27 20 74 6F 20 64
             65 6C 65 74 65 20 61
             6E 79 20 76 61 6C 69
             64 20 62 75 66 66 65
             72
      00052F 0A                    3397 	.db 0x0a
      000530 0D                    3398 	.db 0x0d
      000531 00                    3399 	.db 0x00
                                   3400 	.area CSEG    (CODE)
                                   3401 	.area CONST   (CODE)
      000532                       3402 ___str_35:
      000532 2A 2A 2A 2A 2A 2A 2A  3403 	.ascii "****************************** HEAP REPORT *****************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 20 48 45 41 50
             20 52 45 50 4F 52 54
             20 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      00056E 2A 2A 2A 2A 2A 2A 2A  3404 	.ascii "*************"
             2A 2A 2A 2A 2A 2A
      00057B 00                    3405 	.db 0x00
                                   3406 	.area CSEG    (CODE)
                                   3407 	.area CONST   (CODE)
      00057C                       3408 ___str_36:
      00057C 0A                    3409 	.db 0x0a
      00057D 0D                    3410 	.db 0x0d
      00057E 42 75 66 66 65 72 20  3411 	.ascii "Buffer 0"
             30
      000586 0A                    3412 	.db 0x0a
      000587 0D                    3413 	.db 0x0d
      000588 00                    3414 	.db 0x00
                                   3415 	.area CSEG    (CODE)
                                   3416 	.area CONST   (CODE)
      000589                       3417 ___str_37:
      000589 0A                    3418 	.db 0x0a
      00058A 0D                    3419 	.db 0x0d
      00058B 53 74 61 72 74 20 41  3420 	.ascii "Start Address = 0x%x"
             64 64 72 65 73 73 20
             3D 20 30 78 25 78
      00059F 0A                    3421 	.db 0x0a
      0005A0 0D                    3422 	.db 0x0d
      0005A1 00                    3423 	.db 0x00
                                   3424 	.area CSEG    (CODE)
                                   3425 	.area CONST   (CODE)
      0005A2                       3426 ___str_38:
      0005A2 0A                    3427 	.db 0x0a
      0005A3 0D                    3428 	.db 0x0d
      0005A4 45 6E 64 69 6E 67 20  3429 	.ascii "Ending Address = 0x%x"
             41 64 64 72 65 73 73
             20 3D 20 30 78 25 78
      0005B9 0A                    3430 	.db 0x0a
      0005BA 0D                    3431 	.db 0x0d
      0005BB 00                    3432 	.db 0x00
                                   3433 	.area CSEG    (CODE)
                                   3434 	.area CONST   (CODE)
      0005BC                       3435 ___str_39:
      0005BC 0A                    3436 	.db 0x0a
      0005BD 0D                    3437 	.db 0x0d
      0005BE 42 75 66 66 65 72 20  3438 	.ascii "Buffer Size = %d"
             53 69 7A 65 20 3D 20
             25 64
      0005CE 0A                    3439 	.db 0x0a
      0005CF 0D                    3440 	.db 0x0d
      0005D0 00                    3441 	.db 0x00
                                   3442 	.area CSEG    (CODE)
                                   3443 	.area CONST   (CODE)
      0005D1                       3444 ___str_40:
      0005D1 0A                    3445 	.db 0x0a
      0005D2 0D                    3446 	.db 0x0d
      0005D3 53 74 6F 72 61 67 65  3447 	.ascii "Storage characters in buffer = %d"
             20 63 68 61 72 61 63
             74 65 72 73 20 69 6E
             20 62 75 66 66 65 72
             20 3D 20 25 64
      0005F4 0A                    3448 	.db 0x0a
      0005F5 0D                    3449 	.db 0x0d
      0005F6 00                    3450 	.db 0x00
                                   3451 	.area CSEG    (CODE)
                                   3452 	.area CONST   (CODE)
      0005F7                       3453 ___str_41:
      0005F7 0A                    3454 	.db 0x0a
      0005F8 0D                    3455 	.db 0x0d
      0005F9 46 72 65 65 20 53 70  3456 	.ascii "Free Spaces in buffer = %d"
             61 63 65 73 20 69 6E
             20 62 75 66 66 65 72
             20 3D 20 25 64
      000613 0A                    3457 	.db 0x0a
      000614 0D                    3458 	.db 0x0d
      000615 00                    3459 	.db 0x00
                                   3460 	.area CSEG    (CODE)
                                   3461 	.area CONST   (CODE)
      000616                       3462 ___str_42:
      000616 0A                    3463 	.db 0x0a
      000617 0D                    3464 	.db 0x0d
      000618 2D 2D 2D 2D 2D 2D 2D  3465 	.ascii "------------------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      000654 2D 2D 2D 2D 2D 2D 2D  3466 	.ascii "-----------"
             2D 2D 2D 2D
      00065F 0A                    3467 	.db 0x0a
      000660 0D                    3468 	.db 0x0d
      000661 00                    3469 	.db 0x00
                                   3470 	.area CSEG    (CODE)
                                   3471 	.area CONST   (CODE)
      000662                       3472 ___str_43:
      000662 0A                    3473 	.db 0x0a
      000663 0D                    3474 	.db 0x0d
      000664 42 75 66 66 65 72 20  3475 	.ascii "Buffer 1"
             31
      00066C 0A                    3476 	.db 0x0a
      00066D 0D                    3477 	.db 0x0d
      00066E 00                    3478 	.db 0x00
                                   3479 	.area CSEG    (CODE)
                                   3480 	.area CONST   (CODE)
      00066F                       3481 ___str_44:
      00066F 0A                    3482 	.db 0x0a
      000670 0D                    3483 	.db 0x0d
      000671 53 74 6F 72 61 67 65  3484 	.ascii "Storage characters in buffer = 0"
             20 63 68 61 72 61 63
             74 65 72 73 20 69 6E
             20 62 75 66 66 65 72
             20 3D 20 30
      000691 0A                    3485 	.db 0x0a
      000692 0D                    3486 	.db 0x0d
      000693 00                    3487 	.db 0x00
                                   3488 	.area CSEG    (CODE)
                                   3489 	.area CONST   (CODE)
      000694                       3490 ___str_45:
      000694 0A                    3491 	.db 0x0a
      000695 0D                    3492 	.db 0x0d
      000696 42 75 66 66 65 72 20  3493 	.ascii "Buffer %d"
             25 64
      00069F 0A                    3494 	.db 0x0a
      0006A0 0D                    3495 	.db 0x0d
      0006A1 00                    3496 	.db 0x00
                                   3497 	.area CSEG    (CODE)
                                   3498 	.area CONST   (CODE)
      0006A2                       3499 ___str_46:
      0006A2 0A                    3500 	.db 0x0a
      0006A3 0D                    3501 	.db 0x0d
      0006A4 4E 75 6D 62 65 72 20  3502 	.ascii "Number of storage characters = %d"
             6F 66 20 73 74 6F 72
             61 67 65 20 63 68 61
             72 61 63 74 65 72 73
             20 3D 20 25 64
      0006C5 0A                    3503 	.db 0x0a
      0006C6 0D                    3504 	.db 0x0d
      0006C7 00                    3505 	.db 0x00
                                   3506 	.area CSEG    (CODE)
                                   3507 	.area CONST   (CODE)
      0006C8                       3508 ___str_47:
      0006C8 0A                    3509 	.db 0x0a
      0006C9 0D                    3510 	.db 0x0d
      0006CA 54 6F 74 61 6C 20 6E  3511 	.ascii "Total number of characters received = %d"
             75 6D 62 65 72 20 6F
             66 20 63 68 61 72 61
             63 74 65 72 73 20 72
             65 63 65 69 76 65 64
             20 3D 20 25 64
      0006F2 0A                    3512 	.db 0x0a
      0006F3 0D                    3513 	.db 0x0d
      0006F4 00                    3514 	.db 0x00
                                   3515 	.area CSEG    (CODE)
                                   3516 	.area CONST   (CODE)
      0006F5                       3517 ___str_48:
      0006F5 0A                    3518 	.db 0x0a
      0006F6 0D                    3519 	.db 0x0d
      0006F7 54 6F 74 61 6C 20 6E  3520 	.ascii "Total number of buffers that were allocated since the start "
             75 6D 62 65 72 20 6F
             66 20 62 75 66 66 65
             72 73 20 74 68 61 74
             20 77 65 72 65 20 61
             6C 6C 6F 63 61 74 65
             64 20 73 69 6E 63 65
             20 74 68 65 20 73 74
             61 72 74 20
      000733 6F 66 20 74 68 65 20  3521 	.ascii "of the program = %d"
             70 72 6F 67 72 61 6D
             20 3D 20 25 64
      000746 0A                    3522 	.db 0x0a
      000747 0D                    3523 	.db 0x0d
      000748 00                    3524 	.db 0x00
                                   3525 	.area CSEG    (CODE)
                                   3526 	.area CONST   (CODE)
      000749                       3527 ___str_49:
      000749 0A                    3528 	.db 0x0a
      00074A 0D                    3529 	.db 0x0d
      00074B 54 6F 74 61 6C 20 73  3530 	.ascii "Total storage characters stored since last '?' = %d"
             74 6F 72 61 67 65 20
             63 68 61 72 61 63 74
             65 72 73 20 73 74 6F
             72 65 64 20 73 69 6E
             63 65 20 6C 61 73 74
             20 27 3F 27 20 3D 20
             25 64
      00077E 0A                    3531 	.db 0x0a
      00077F 0D                    3532 	.db 0x0d
      000780 00                    3533 	.db 0x00
                                   3534 	.area CSEG    (CODE)
                                   3535 	.area CONST   (CODE)
      000781                       3536 ___str_50:
      000781 0A                    3537 	.db 0x0a
      000782 0D                    3538 	.db 0x0d
      000783 43 6F 6E 74 65 6E 74  3539 	.ascii "Contents of Buffer 0"
             73 20 6F 66 20 42 75
             66 66 65 72 20 30
      000797 0A                    3540 	.db 0x0a
      000798 0D                    3541 	.db 0x0d
      000799 00                    3542 	.db 0x00
                                   3543 	.area CSEG    (CODE)
                                   3544 	.area CONST   (CODE)
      00079A                       3545 ___str_51:
      00079A 30 78 25 78 3E 3E 20  3546 	.ascii "0x%x>> %x"
             25 78
      0007A3 00                    3547 	.db 0x00
                                   3548 	.area CSEG    (CODE)
                                   3549 	.area CONST   (CODE)
      0007A4                       3550 ___str_52:
      0007A4 20 25 78              3551 	.ascii " %x"
      0007A7 00                    3552 	.db 0x00
                                   3553 	.area CSEG    (CODE)
                                   3554 	.area CONST   (CODE)
      0007A8                       3555 ___str_53:
      0007A8 0A                    3556 	.db 0x0a
      0007A9 0D                    3557 	.db 0x0d
      0007AA 30 78 25 78 3E 3E 20  3558 	.ascii "0x%x>> %x"
             25 78
      0007B3 00                    3559 	.db 0x00
                                   3560 	.area CSEG    (CODE)
                                   3561 	.area CONST   (CODE)
      0007B4                       3562 ___str_54:
      0007B4 0A                    3563 	.db 0x0a
      0007B5 0D                    3564 	.db 0x0d
      0007B6 46 72 65 65 69 6E 67  3565 	.ascii "Freeing Buffer 0 "
             20 42 75 66 66 65 72
             20 30 20
      0007C7 0A                    3566 	.db 0x0a
      0007C8 0D                    3567 	.db 0x0d
      0007C9 00                    3568 	.db 0x00
                                   3569 	.area CSEG    (CODE)
                                   3570 	.area CONST   (CODE)
      0007CA                       3571 ___str_55:
      0007CA 0A                    3572 	.db 0x0a
      0007CB 0D                    3573 	.db 0x0d
      0007CC 42 75 66 66 65 72 20  3574 	.ascii "Buffer 0 is free"
             30 20 69 73 20 66 72
             65 65
      0007DC 0A                    3575 	.db 0x0a
      0007DD 0D                    3576 	.db 0x0d
      0007DE 00                    3577 	.db 0x00
                                   3578 	.area CSEG    (CODE)
                                   3579 	.area CONST   (CODE)
      0007DF                       3580 ___str_56:
      0007DF 0A                    3581 	.db 0x0a
      0007E0 0D                    3582 	.db 0x0d
      0007E1 46 72 65 65 69 6E 67  3583 	.ascii "Freeing Buffer 1 "
             20 42 75 66 66 65 72
             20 31 20
      0007F2 0A                    3584 	.db 0x0a
      0007F3 0D                    3585 	.db 0x0d
      0007F4 00                    3586 	.db 0x00
                                   3587 	.area CSEG    (CODE)
                                   3588 	.area CONST   (CODE)
      0007F5                       3589 ___str_57:
      0007F5 0A                    3590 	.db 0x0a
      0007F6 0D                    3591 	.db 0x0d
      0007F7 42 75 66 66 65 72 20  3592 	.ascii "Buffer 1 is free"
             31 20 69 73 20 66 72
             65 65
      000807 0A                    3593 	.db 0x0a
      000808 0D                    3594 	.db 0x0d
      000809 00                    3595 	.db 0x00
                                   3596 	.area CSEG    (CODE)
                                   3597 	.area CONST   (CODE)
      00080A                       3598 ___str_58:
      00080A 0A                    3599 	.db 0x0a
      00080B 0D                    3600 	.db 0x0d
      00080C 46 72 65 65 69 6E 67  3601 	.ascii "Freeing buffer_%d "
             20 62 75 66 66 65 72
             5F 25 64 20
      00081E 0A                    3602 	.db 0x0a
      00081F 0D                    3603 	.db 0x0d
      000820 00                    3604 	.db 0x00
                                   3605 	.area CSEG    (CODE)
                                   3606 	.area CONST   (CODE)
      000821                       3607 ___str_59:
      000821 0A                    3608 	.db 0x0a
      000822 0D                    3609 	.db 0x0d
      000823 42 75 66 66 65 72 20  3610 	.ascii "Buffer %d is free "
             25 64 20 69 73 20 66
             72 65 65 20
      000835 0A                    3611 	.db 0x0a
      000836 0D                    3612 	.db 0x0d
      000837 00                    3613 	.db 0x00
                                   3614 	.area CSEG    (CODE)
                                   3615 	.area CONST   (CODE)
      000838                       3616 ___str_60:
      000838 0A                    3617 	.db 0x0a
      000839 0D                    3618 	.db 0x0d
      00083A 00                    3619 	.db 0x00
                                   3620 	.area CSEG    (CODE)
                                   3621 	.area XINIT   (CODE)
                                   3622 	.area CABS    (ABS,CODE)
