                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _dataout
                                     13 	.globl __sdcc_external_startup
                                     14 	.globl _free
                                     15 	.globl _malloc
                                     16 	.globl _printf_tiny
                                     17 	.globl _TF1
                                     18 	.globl _TR1
                                     19 	.globl _TF0
                                     20 	.globl _TR0
                                     21 	.globl _IE1
                                     22 	.globl _IT1
                                     23 	.globl _IE0
                                     24 	.globl _IT0
                                     25 	.globl _SM0
                                     26 	.globl _SM1
                                     27 	.globl _SM2
                                     28 	.globl _REN
                                     29 	.globl _TB8
                                     30 	.globl _RB8
                                     31 	.globl _TI
                                     32 	.globl _RI
                                     33 	.globl _CY
                                     34 	.globl _AC
                                     35 	.globl _F0
                                     36 	.globl _RS1
                                     37 	.globl _RS0
                                     38 	.globl _OV
                                     39 	.globl _F1
                                     40 	.globl _P
                                     41 	.globl _RD
                                     42 	.globl _WR
                                     43 	.globl _T1
                                     44 	.globl _T0
                                     45 	.globl _INT1
                                     46 	.globl _INT0
                                     47 	.globl _TXD0
                                     48 	.globl _TXD
                                     49 	.globl _RXD0
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _P2_7
                                     60 	.globl _P2_6
                                     61 	.globl _P2_5
                                     62 	.globl _P2_4
                                     63 	.globl _P2_3
                                     64 	.globl _P2_2
                                     65 	.globl _P2_1
                                     66 	.globl _P2_0
                                     67 	.globl _P1_7
                                     68 	.globl _P1_6
                                     69 	.globl _P1_5
                                     70 	.globl _P1_4
                                     71 	.globl _P1_3
                                     72 	.globl _P1_2
                                     73 	.globl _P1_1
                                     74 	.globl _P1_0
                                     75 	.globl _P0_7
                                     76 	.globl _P0_6
                                     77 	.globl _P0_5
                                     78 	.globl _P0_4
                                     79 	.globl _P0_3
                                     80 	.globl _P0_2
                                     81 	.globl _P0_1
                                     82 	.globl _P0_0
                                     83 	.globl _PS
                                     84 	.globl _PT1
                                     85 	.globl _PX1
                                     86 	.globl _PT0
                                     87 	.globl _PX0
                                     88 	.globl _EA
                                     89 	.globl _ES
                                     90 	.globl _ET1
                                     91 	.globl _EX1
                                     92 	.globl _ET0
                                     93 	.globl _EX0
                                     94 	.globl _BREG_F7
                                     95 	.globl _BREG_F6
                                     96 	.globl _BREG_F5
                                     97 	.globl _BREG_F4
                                     98 	.globl _BREG_F3
                                     99 	.globl _BREG_F2
                                    100 	.globl _BREG_F1
                                    101 	.globl _BREG_F0
                                    102 	.globl _P5_7
                                    103 	.globl _P5_6
                                    104 	.globl _P5_5
                                    105 	.globl _P5_4
                                    106 	.globl _P5_3
                                    107 	.globl _P5_2
                                    108 	.globl _P5_1
                                    109 	.globl _P5_0
                                    110 	.globl _P4_7
                                    111 	.globl _P4_6
                                    112 	.globl _P4_5
                                    113 	.globl _P4_4
                                    114 	.globl _P4_3
                                    115 	.globl _P4_2
                                    116 	.globl _P4_1
                                    117 	.globl _P4_0
                                    118 	.globl _PX0L
                                    119 	.globl _PT0L
                                    120 	.globl _PX1L
                                    121 	.globl _PT1L
                                    122 	.globl _PSL
                                    123 	.globl _PT2L
                                    124 	.globl _PPCL
                                    125 	.globl _EC
                                    126 	.globl _CCF0
                                    127 	.globl _CCF1
                                    128 	.globl _CCF2
                                    129 	.globl _CCF3
                                    130 	.globl _CCF4
                                    131 	.globl _CR
                                    132 	.globl _CF
                                    133 	.globl _TF2
                                    134 	.globl _EXF2
                                    135 	.globl _RCLK
                                    136 	.globl _TCLK
                                    137 	.globl _EXEN2
                                    138 	.globl _TR2
                                    139 	.globl _C_T2
                                    140 	.globl _CP_RL2
                                    141 	.globl _T2CON_7
                                    142 	.globl _T2CON_6
                                    143 	.globl _T2CON_5
                                    144 	.globl _T2CON_4
                                    145 	.globl _T2CON_3
                                    146 	.globl _T2CON_2
                                    147 	.globl _T2CON_1
                                    148 	.globl _T2CON_0
                                    149 	.globl _PT2
                                    150 	.globl _ET2
                                    151 	.globl _TMOD
                                    152 	.globl _TL1
                                    153 	.globl _TL0
                                    154 	.globl _TH1
                                    155 	.globl _TH0
                                    156 	.globl _TCON
                                    157 	.globl _SP
                                    158 	.globl _SCON
                                    159 	.globl _SBUF0
                                    160 	.globl _SBUF
                                    161 	.globl _PSW
                                    162 	.globl _PCON
                                    163 	.globl _P3
                                    164 	.globl _P2
                                    165 	.globl _P1
                                    166 	.globl _P0
                                    167 	.globl _IP
                                    168 	.globl _IE
                                    169 	.globl _DP0L
                                    170 	.globl _DPL
                                    171 	.globl _DP0H
                                    172 	.globl _DPH
                                    173 	.globl _B
                                    174 	.globl _ACC
                                    175 	.globl _EECON
                                    176 	.globl _KBF
                                    177 	.globl _KBE
                                    178 	.globl _KBLS
                                    179 	.globl _BRL
                                    180 	.globl _BDRCON
                                    181 	.globl _T2MOD
                                    182 	.globl _SPDAT
                                    183 	.globl _SPSTA
                                    184 	.globl _SPCON
                                    185 	.globl _SADEN
                                    186 	.globl _SADDR
                                    187 	.globl _WDTPRG
                                    188 	.globl _WDTRST
                                    189 	.globl _P5
                                    190 	.globl _P4
                                    191 	.globl _IPH1
                                    192 	.globl _IPL1
                                    193 	.globl _IPH0
                                    194 	.globl _IPL0
                                    195 	.globl _IEN1
                                    196 	.globl _IEN0
                                    197 	.globl _CMOD
                                    198 	.globl _CL
                                    199 	.globl _CH
                                    200 	.globl _CCON
                                    201 	.globl _CCAPM4
                                    202 	.globl _CCAPM3
                                    203 	.globl _CCAPM2
                                    204 	.globl _CCAPM1
                                    205 	.globl _CCAPM0
                                    206 	.globl _CCAP4L
                                    207 	.globl _CCAP3L
                                    208 	.globl _CCAP2L
                                    209 	.globl _CCAP1L
                                    210 	.globl _CCAP0L
                                    211 	.globl _CCAP4H
                                    212 	.globl _CCAP3H
                                    213 	.globl _CCAP2H
                                    214 	.globl _CCAP1H
                                    215 	.globl _CCAP0H
                                    216 	.globl _CKCON1
                                    217 	.globl _CKCON0
                                    218 	.globl _CKRL
                                    219 	.globl _AUXR1
                                    220 	.globl _AUXR
                                    221 	.globl _TH2
                                    222 	.globl _TL2
                                    223 	.globl _RCAP2H
                                    224 	.globl _RCAP2L
                                    225 	.globl _T2CON
                                    226 	.globl _num_input
                                    227 	.globl _putchar
                                    228 	.globl _getchar
                                    229 ;--------------------------------------------------------
                                    230 ; special function registers
                                    231 ;--------------------------------------------------------
                                    232 	.area RSEG    (ABS,DATA)
      000000                        233 	.org 0x0000
                           0000C8   234 _T2CON	=	0x00c8
                           0000CA   235 _RCAP2L	=	0x00ca
                           0000CB   236 _RCAP2H	=	0x00cb
                           0000CC   237 _TL2	=	0x00cc
                           0000CD   238 _TH2	=	0x00cd
                           00008E   239 _AUXR	=	0x008e
                           0000A2   240 _AUXR1	=	0x00a2
                           000097   241 _CKRL	=	0x0097
                           00008F   242 _CKCON0	=	0x008f
                           0000AF   243 _CKCON1	=	0x00af
                           0000FA   244 _CCAP0H	=	0x00fa
                           0000FB   245 _CCAP1H	=	0x00fb
                           0000FC   246 _CCAP2H	=	0x00fc
                           0000FD   247 _CCAP3H	=	0x00fd
                           0000FE   248 _CCAP4H	=	0x00fe
                           0000EA   249 _CCAP0L	=	0x00ea
                           0000EB   250 _CCAP1L	=	0x00eb
                           0000EC   251 _CCAP2L	=	0x00ec
                           0000ED   252 _CCAP3L	=	0x00ed
                           0000EE   253 _CCAP4L	=	0x00ee
                           0000DA   254 _CCAPM0	=	0x00da
                           0000DB   255 _CCAPM1	=	0x00db
                           0000DC   256 _CCAPM2	=	0x00dc
                           0000DD   257 _CCAPM3	=	0x00dd
                           0000DE   258 _CCAPM4	=	0x00de
                           0000D8   259 _CCON	=	0x00d8
                           0000F9   260 _CH	=	0x00f9
                           0000E9   261 _CL	=	0x00e9
                           0000D9   262 _CMOD	=	0x00d9
                           0000A8   263 _IEN0	=	0x00a8
                           0000B1   264 _IEN1	=	0x00b1
                           0000B8   265 _IPL0	=	0x00b8
                           0000B7   266 _IPH0	=	0x00b7
                           0000B2   267 _IPL1	=	0x00b2
                           0000B3   268 _IPH1	=	0x00b3
                           0000C0   269 _P4	=	0x00c0
                           0000E8   270 _P5	=	0x00e8
                           0000A6   271 _WDTRST	=	0x00a6
                           0000A7   272 _WDTPRG	=	0x00a7
                           0000A9   273 _SADDR	=	0x00a9
                           0000B9   274 _SADEN	=	0x00b9
                           0000C3   275 _SPCON	=	0x00c3
                           0000C4   276 _SPSTA	=	0x00c4
                           0000C5   277 _SPDAT	=	0x00c5
                           0000C9   278 _T2MOD	=	0x00c9
                           00009B   279 _BDRCON	=	0x009b
                           00009A   280 _BRL	=	0x009a
                           00009C   281 _KBLS	=	0x009c
                           00009D   282 _KBE	=	0x009d
                           00009E   283 _KBF	=	0x009e
                           0000D2   284 _EECON	=	0x00d2
                           0000E0   285 _ACC	=	0x00e0
                           0000F0   286 _B	=	0x00f0
                           000083   287 _DPH	=	0x0083
                           000083   288 _DP0H	=	0x0083
                           000082   289 _DPL	=	0x0082
                           000082   290 _DP0L	=	0x0082
                           0000A8   291 _IE	=	0x00a8
                           0000B8   292 _IP	=	0x00b8
                           000080   293 _P0	=	0x0080
                           000090   294 _P1	=	0x0090
                           0000A0   295 _P2	=	0x00a0
                           0000B0   296 _P3	=	0x00b0
                           000087   297 _PCON	=	0x0087
                           0000D0   298 _PSW	=	0x00d0
                           000099   299 _SBUF	=	0x0099
                           000099   300 _SBUF0	=	0x0099
                           000098   301 _SCON	=	0x0098
                           000081   302 _SP	=	0x0081
                           000088   303 _TCON	=	0x0088
                           00008C   304 _TH0	=	0x008c
                           00008D   305 _TH1	=	0x008d
                           00008A   306 _TL0	=	0x008a
                           00008B   307 _TL1	=	0x008b
                           000089   308 _TMOD	=	0x0089
                                    309 ;--------------------------------------------------------
                                    310 ; special function bits
                                    311 ;--------------------------------------------------------
                                    312 	.area RSEG    (ABS,DATA)
      000000                        313 	.org 0x0000
                           0000AD   314 _ET2	=	0x00ad
                           0000BD   315 _PT2	=	0x00bd
                           0000C8   316 _T2CON_0	=	0x00c8
                           0000C9   317 _T2CON_1	=	0x00c9
                           0000CA   318 _T2CON_2	=	0x00ca
                           0000CB   319 _T2CON_3	=	0x00cb
                           0000CC   320 _T2CON_4	=	0x00cc
                           0000CD   321 _T2CON_5	=	0x00cd
                           0000CE   322 _T2CON_6	=	0x00ce
                           0000CF   323 _T2CON_7	=	0x00cf
                           0000C8   324 _CP_RL2	=	0x00c8
                           0000C9   325 _C_T2	=	0x00c9
                           0000CA   326 _TR2	=	0x00ca
                           0000CB   327 _EXEN2	=	0x00cb
                           0000CC   328 _TCLK	=	0x00cc
                           0000CD   329 _RCLK	=	0x00cd
                           0000CE   330 _EXF2	=	0x00ce
                           0000CF   331 _TF2	=	0x00cf
                           0000DF   332 _CF	=	0x00df
                           0000DE   333 _CR	=	0x00de
                           0000DC   334 _CCF4	=	0x00dc
                           0000DB   335 _CCF3	=	0x00db
                           0000DA   336 _CCF2	=	0x00da
                           0000D9   337 _CCF1	=	0x00d9
                           0000D8   338 _CCF0	=	0x00d8
                           0000AE   339 _EC	=	0x00ae
                           0000BE   340 _PPCL	=	0x00be
                           0000BD   341 _PT2L	=	0x00bd
                           0000BC   342 _PSL	=	0x00bc
                           0000BB   343 _PT1L	=	0x00bb
                           0000BA   344 _PX1L	=	0x00ba
                           0000B9   345 _PT0L	=	0x00b9
                           0000B8   346 _PX0L	=	0x00b8
                           0000C0   347 _P4_0	=	0x00c0
                           0000C1   348 _P4_1	=	0x00c1
                           0000C2   349 _P4_2	=	0x00c2
                           0000C3   350 _P4_3	=	0x00c3
                           0000C4   351 _P4_4	=	0x00c4
                           0000C5   352 _P4_5	=	0x00c5
                           0000C6   353 _P4_6	=	0x00c6
                           0000C7   354 _P4_7	=	0x00c7
                           0000E8   355 _P5_0	=	0x00e8
                           0000E9   356 _P5_1	=	0x00e9
                           0000EA   357 _P5_2	=	0x00ea
                           0000EB   358 _P5_3	=	0x00eb
                           0000EC   359 _P5_4	=	0x00ec
                           0000ED   360 _P5_5	=	0x00ed
                           0000EE   361 _P5_6	=	0x00ee
                           0000EF   362 _P5_7	=	0x00ef
                           0000F0   363 _BREG_F0	=	0x00f0
                           0000F1   364 _BREG_F1	=	0x00f1
                           0000F2   365 _BREG_F2	=	0x00f2
                           0000F3   366 _BREG_F3	=	0x00f3
                           0000F4   367 _BREG_F4	=	0x00f4
                           0000F5   368 _BREG_F5	=	0x00f5
                           0000F6   369 _BREG_F6	=	0x00f6
                           0000F7   370 _BREG_F7	=	0x00f7
                           0000A8   371 _EX0	=	0x00a8
                           0000A9   372 _ET0	=	0x00a9
                           0000AA   373 _EX1	=	0x00aa
                           0000AB   374 _ET1	=	0x00ab
                           0000AC   375 _ES	=	0x00ac
                           0000AF   376 _EA	=	0x00af
                           0000B8   377 _PX0	=	0x00b8
                           0000B9   378 _PT0	=	0x00b9
                           0000BA   379 _PX1	=	0x00ba
                           0000BB   380 _PT1	=	0x00bb
                           0000BC   381 _PS	=	0x00bc
                           000080   382 _P0_0	=	0x0080
                           000081   383 _P0_1	=	0x0081
                           000082   384 _P0_2	=	0x0082
                           000083   385 _P0_3	=	0x0083
                           000084   386 _P0_4	=	0x0084
                           000085   387 _P0_5	=	0x0085
                           000086   388 _P0_6	=	0x0086
                           000087   389 _P0_7	=	0x0087
                           000090   390 _P1_0	=	0x0090
                           000091   391 _P1_1	=	0x0091
                           000092   392 _P1_2	=	0x0092
                           000093   393 _P1_3	=	0x0093
                           000094   394 _P1_4	=	0x0094
                           000095   395 _P1_5	=	0x0095
                           000096   396 _P1_6	=	0x0096
                           000097   397 _P1_7	=	0x0097
                           0000A0   398 _P2_0	=	0x00a0
                           0000A1   399 _P2_1	=	0x00a1
                           0000A2   400 _P2_2	=	0x00a2
                           0000A3   401 _P2_3	=	0x00a3
                           0000A4   402 _P2_4	=	0x00a4
                           0000A5   403 _P2_5	=	0x00a5
                           0000A6   404 _P2_6	=	0x00a6
                           0000A7   405 _P2_7	=	0x00a7
                           0000B0   406 _P3_0	=	0x00b0
                           0000B1   407 _P3_1	=	0x00b1
                           0000B2   408 _P3_2	=	0x00b2
                           0000B3   409 _P3_3	=	0x00b3
                           0000B4   410 _P3_4	=	0x00b4
                           0000B5   411 _P3_5	=	0x00b5
                           0000B6   412 _P3_6	=	0x00b6
                           0000B7   413 _P3_7	=	0x00b7
                           0000B0   414 _RXD	=	0x00b0
                           0000B0   415 _RXD0	=	0x00b0
                           0000B1   416 _TXD	=	0x00b1
                           0000B1   417 _TXD0	=	0x00b1
                           0000B2   418 _INT0	=	0x00b2
                           0000B3   419 _INT1	=	0x00b3
                           0000B4   420 _T0	=	0x00b4
                           0000B5   421 _T1	=	0x00b5
                           0000B6   422 _WR	=	0x00b6
                           0000B7   423 _RD	=	0x00b7
                           0000D0   424 _P	=	0x00d0
                           0000D1   425 _F1	=	0x00d1
                           0000D2   426 _OV	=	0x00d2
                           0000D3   427 _RS0	=	0x00d3
                           0000D4   428 _RS1	=	0x00d4
                           0000D5   429 _F0	=	0x00d5
                           0000D6   430 _AC	=	0x00d6
                           0000D7   431 _CY	=	0x00d7
                           000098   432 _RI	=	0x0098
                           000099   433 _TI	=	0x0099
                           00009A   434 _RB8	=	0x009a
                           00009B   435 _TB8	=	0x009b
                           00009C   436 _REN	=	0x009c
                           00009D   437 _SM2	=	0x009d
                           00009E   438 _SM1	=	0x009e
                           00009F   439 _SM0	=	0x009f
                           000088   440 _IT0	=	0x0088
                           000089   441 _IE0	=	0x0089
                           00008A   442 _IT1	=	0x008a
                           00008B   443 _IE1	=	0x008b
                           00008C   444 _TR0	=	0x008c
                           00008D   445 _TF0	=	0x008d
                           00008E   446 _TR1	=	0x008e
                           00008F   447 _TF1	=	0x008f
                                    448 ;--------------------------------------------------------
                                    449 ; overlayable register banks
                                    450 ;--------------------------------------------------------
                                    451 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        452 	.ds 8
                                    453 ;--------------------------------------------------------
                                    454 ; internal ram data
                                    455 ;--------------------------------------------------------
                                    456 	.area DSEG    (DATA)
      000000                        457 _main_sloc0_1_0:
      000000                        458 	.ds 2
      000002                        459 _main_sloc1_1_0:
      000002                        460 	.ds 2
      000004                        461 _main_sloc2_1_0:
      000004                        462 	.ds 1
      000005                        463 _main_sloc3_1_0:
      000005                        464 	.ds 2
      000007                        465 _main_sloc4_1_0:
      000007                        466 	.ds 2
      000009                        467 _main_sloc5_1_0:
      000009                        468 	.ds 2
      00000B                        469 _main_sloc6_1_0:
      00000B                        470 	.ds 2
                                    471 ;--------------------------------------------------------
                                    472 ; overlayable items in internal ram 
                                    473 ;--------------------------------------------------------
                                    474 ;--------------------------------------------------------
                                    475 ; Stack segment in internal ram 
                                    476 ;--------------------------------------------------------
                                    477 	.area	SSEG
      000000                        478 __start__stack:
      000000                        479 	.ds	1
                                    480 
                                    481 ;--------------------------------------------------------
                                    482 ; indirectly addressable internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area ISEG    (DATA)
                                    485 ;--------------------------------------------------------
                                    486 ; absolute internal ram data
                                    487 ;--------------------------------------------------------
                                    488 	.area IABS    (ABS,DATA)
                                    489 	.area IABS    (ABS,DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; bit data
                                    492 ;--------------------------------------------------------
                                    493 	.area BSEG    (BIT)
                                    494 ;--------------------------------------------------------
                                    495 ; paged external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area PSEG    (PAG,XDATA)
                                    498 ;--------------------------------------------------------
                                    499 ; external ram data
                                    500 ;--------------------------------------------------------
                                    501 	.area XSEG    (XDATA)
      000000                        502 _dataout_v_65536_46:
      000000                        503 	.ds 1
                           008000   504 _dataout_k_65536_47	=	0x8000
      000001                        505 _main_buffer_1_65536_49:
      000001                        506 	.ds 2
      000003                        507 _main_buffer_n_65536_49:
      000003                        508 	.ds 100
      000067                        509 _main_char_stored_65536_49:
      000067                        510 	.ds 2
      000069                        511 _main_count_65536_49:
      000069                        512 	.ds 2
      00006B                        513 _main_buff_size_65536_49:
      00006B                        514 	.ds 100
      0000CF                        515 _main_number_65536_49:
      0000CF                        516 	.ds 2
      0000D1                        517 _main_number2_65536_49:
      0000D1                        518 	.ds 2
      0000D3                        519 _main_flag_65537_50:
      0000D3                        520 	.ds 2
      0000D5                        521 _num_input_digit_65536_86:
      0000D5                        522 	.ds 1
      0000D6                        523 _num_input_digit_store_65536_86:
      0000D6                        524 	.ds 10
      0000E0                        525 _num_input_counter_65536_86:
      0000E0                        526 	.ds 1
      0000E1                        527 _num_input_number_65536_86:
      0000E1                        528 	.ds 2
      0000E3                        529 _putchar_c_65536_92:
      0000E3                        530 	.ds 2
                                    531 ;--------------------------------------------------------
                                    532 ; absolute external ram data
                                    533 ;--------------------------------------------------------
                                    534 	.area XABS    (ABS,XDATA)
                                    535 ;--------------------------------------------------------
                                    536 ; external initialized ram data
                                    537 ;--------------------------------------------------------
                                    538 	.area XISEG   (XDATA)
                                    539 	.area HOME    (CODE)
                                    540 	.area GSINIT0 (CODE)
                                    541 	.area GSINIT1 (CODE)
                                    542 	.area GSINIT2 (CODE)
                                    543 	.area GSINIT3 (CODE)
                                    544 	.area GSINIT4 (CODE)
                                    545 	.area GSINIT5 (CODE)
                                    546 	.area GSINIT  (CODE)
                                    547 	.area GSFINAL (CODE)
                                    548 	.area CSEG    (CODE)
                                    549 ;--------------------------------------------------------
                                    550 ; interrupt vector 
                                    551 ;--------------------------------------------------------
                                    552 	.area HOME    (CODE)
      000000                        553 __interrupt_vect:
      000000 02r00r00         [24]  554 	ljmp	__sdcc_gsinit_startup
                                    555 ;--------------------------------------------------------
                                    556 ; global & static initialisations
                                    557 ;--------------------------------------------------------
                                    558 	.area HOME    (CODE)
                                    559 	.area GSINIT  (CODE)
                                    560 	.area GSFINAL (CODE)
                                    561 	.area GSINIT  (CODE)
                                    562 	.globl __sdcc_gsinit_startup
                                    563 	.globl __sdcc_program_startup
                                    564 	.globl __start__stack
                                    565 	.globl __mcs51_genXINIT
                                    566 	.globl __mcs51_genXRAMCLEAR
                                    567 	.globl __mcs51_genRAMCLEAR
                                    568 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  569 	ljmp	__sdcc_program_startup
                                    570 ;--------------------------------------------------------
                                    571 ; Home
                                    572 ;--------------------------------------------------------
                                    573 	.area HOME    (CODE)
                                    574 	.area HOME    (CODE)
      000003                        575 __sdcc_program_startup:
      000003 02r00r13         [24]  576 	ljmp	_main
                                    577 ;	return from main will return to caller
                                    578 ;--------------------------------------------------------
                                    579 ; code
                                    580 ;--------------------------------------------------------
                                    581 	.area CSEG    (CODE)
                                    582 ;------------------------------------------------------------
                                    583 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    584 ;------------------------------------------------------------
                                    585 ;	main.c:37: _sdcc_external_startup()
                                    586 ;	-----------------------------------------
                                    587 ;	 function _sdcc_external_startup
                                    588 ;	-----------------------------------------
      000000                        589 __sdcc_external_startup:
                           000007   590 	ar7 = 0x07
                           000006   591 	ar6 = 0x06
                           000005   592 	ar5 = 0x05
                           000004   593 	ar4 = 0x04
                           000003   594 	ar3 = 0x03
                           000002   595 	ar2 = 0x02
                           000001   596 	ar1 = 0x01
                           000000   597 	ar0 = 0x00
                                    598 ;	main.c:40: AUXR |= 0X0C;
      000000 43 8E 0C         [24]  599 	orl	_AUXR,#0x0c
                                    600 ;	main.c:41: return 0;
      000003 90 00 00         [24]  601 	mov	dptr,#0x0000
                                    602 ;	main.c:42: }
      000006 22               [24]  603 	ret
                                    604 ;------------------------------------------------------------
                                    605 ;Allocation info for local variables in function 'dataout'
                                    606 ;------------------------------------------------------------
                                    607 ;v                         Allocated with name '_dataout_v_65536_46'
                                    608 ;k                         Allocated with name '_dataout_k_65536_47'
                                    609 ;------------------------------------------------------------
                                    610 ;	main.c:46: void dataout(uint8_t v)
                                    611 ;	-----------------------------------------
                                    612 ;	 function dataout
                                    613 ;	-----------------------------------------
      000007                        614 _dataout:
      000007 E5 82            [12]  615 	mov	a,dpl
      000009 90r00r00         [24]  616 	mov	dptr,#_dataout_v_65536_46
      00000C F0               [24]  617 	movx	@dptr,a
                                    618 ;	main.c:49: k=v;
      00000D E0               [24]  619 	movx	a,@dptr
      00000E 90 80 00         [24]  620 	mov	dptr,#_dataout_k_65536_47
      000011 F0               [24]  621 	movx	@dptr,a
                                    622 ;	main.c:50: }
      000012 22               [24]  623 	ret
                                    624 ;------------------------------------------------------------
                                    625 ;Allocation info for local variables in function 'main'
                                    626 ;------------------------------------------------------------
                                    627 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    628 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                    629 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                    630 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                    631 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                    632 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                    633 ;sloc6                     Allocated with name '_main_sloc6_1_0'
                                    634 ;buffer_0                  Allocated with name '_main_buffer_0_65536_49'
                                    635 ;buffer_1                  Allocated with name '_main_buffer_1_65536_49'
                                    636 ;buffer_n                  Allocated with name '_main_buffer_n_65536_49'
                                    637 ;Buffer_0temp              Allocated with name '_main_Buffer_0temp_65536_49'
                                    638 ;Buffer_1temp              Allocated with name '_main_Buffer_1temp_65536_49'
                                    639 ;input_char                Allocated with name '_main_input_char_65536_49'
                                    640 ;total_char                Allocated with name '_main_total_char_65536_49'
                                    641 ;char_stored               Allocated with name '_main_char_stored_65536_49'
                                    642 ;count                     Allocated with name '_main_count_65536_49'
                                    643 ;buff_size                 Allocated with name '_main_buff_size_65536_49'
                                    644 ;i                         Allocated with name '_main_i_65536_49'
                                    645 ;j                         Allocated with name '_main_j_65536_49'
                                    646 ;num_del                   Allocated with name '_main_num_del_65536_49'
                                    647 ;k                         Allocated with name '_main_k_65536_49'
                                    648 ;buff_0_count              Allocated with name '_main_buff_0_count_65536_49'
                                    649 ;total_buff_count          Allocated with name '_main_total_buff_count_65536_49'
                                    650 ;number                    Allocated with name '_main_number_65536_49'
                                    651 ;number2                   Allocated with name '_main_number2_65536_49'
                                    652 ;flag                      Allocated with name '_main_flag_65537_50'
                                    653 ;divisible                 Allocated with name '_main_divisible_131074_52'
                                    654 ;------------------------------------------------------------
                                    655 ;	main.c:62: void main(void)
                                    656 ;	-----------------------------------------
                                    657 ;	 function main
                                    658 ;	-----------------------------------------
      000013                        659 _main:
                                    660 ;	main.c:76: unsigned int char_stored=0;
      000013 90r00r67         [24]  661 	mov	dptr,#_main_char_stored_65536_49
      000016 E4               [12]  662 	clr	a
      000017 F0               [24]  663 	movx	@dptr,a
      000018 A3               [24]  664 	inc	dptr
      000019 F0               [24]  665 	movx	@dptr,a
                                    666 ;	main.c:77: unsigned int count=0;
      00001A 90r00r69         [24]  667 	mov	dptr,#_main_count_65536_49
      00001D F0               [24]  668 	movx	@dptr,a
      00001E A3               [24]  669 	inc	dptr
      00001F F0               [24]  670 	movx	@dptr,a
                                    671 ;	main.c:90: printf_tiny("\n\r****************************** WELCOME ******************************\n\r");
      000020 74r00            [12]  672 	mov	a,#___str_0
      000022 C0 E0            [24]  673 	push	acc
      000024 74s00            [12]  674 	mov	a,#(___str_0 >> 8)
      000026 C0 E0            [24]  675 	push	acc
      000028 12r00r00         [24]  676 	lcall	_printf_tiny
      00002B 15 81            [12]  677 	dec	sp
      00002D 15 81            [12]  678 	dec	sp
                                    679 ;	main.c:91: printf_tiny("\n\rEnter four digit number between 48-4800 for buffer size\n\r");
      00002F 74r4A            [12]  680 	mov	a,#___str_1
      000031 C0 E0            [24]  681 	push	acc
      000033 74s00            [12]  682 	mov	a,#(___str_1 >> 8)
      000035 C0 E0            [24]  683 	push	acc
      000037 12r00r00         [24]  684 	lcall	_printf_tiny
      00003A 15 81            [12]  685 	dec	sp
      00003C 15 81            [12]  686 	dec	sp
                                    687 ;	main.c:95: do
      00003E                        688 00108$:
                                    689 ;	main.c:97: number=num_input();
      00003E 12r0Fr2A         [24]  690 	lcall	_num_input
      000041 AE 82            [24]  691 	mov	r6,dpl
      000043 AF 83            [24]  692 	mov	r7,dph
                                    693 ;	main.c:98: printf_tiny("The Input number is=%d\n\r", number);
      000045 C0 07            [24]  694 	push	ar7
      000047 C0 06            [24]  695 	push	ar6
      000049 C0 06            [24]  696 	push	ar6
      00004B C0 07            [24]  697 	push	ar7
      00004D 74r86            [12]  698 	mov	a,#___str_2
      00004F C0 E0            [24]  699 	push	acc
      000051 74s00            [12]  700 	mov	a,#(___str_2 >> 8)
      000053 C0 E0            [24]  701 	push	acc
      000055 12r00r00         [24]  702 	lcall	_printf_tiny
      000058 E5 81            [12]  703 	mov	a,sp
      00005A 24 FC            [12]  704 	add	a,#0xfc
      00005C F5 81            [12]  705 	mov	sp,a
      00005E D0 06            [24]  706 	pop	ar6
      000060 D0 07            [24]  707 	pop	ar7
                                    708 ;	main.c:99: int divisible= number%16;
      000062 90r00r00         [24]  709 	mov	dptr,#__modsint_PARM_2
      000065 74 10            [12]  710 	mov	a,#0x10
      000067 F0               [24]  711 	movx	@dptr,a
      000068 E4               [12]  712 	clr	a
      000069 A3               [24]  713 	inc	dptr
      00006A F0               [24]  714 	movx	@dptr,a
                                    715 ;	main.c:101: if((number<48 || number>4800))
      00006B 8E 82            [24]  716 	mov	dpl,r6
      00006D 8F 83            [24]  717 	mov	dph,r7
      00006F C0 07            [24]  718 	push	ar7
      000071 C0 06            [24]  719 	push	ar6
      000073 12r00r00         [24]  720 	lcall	__modsint
      000076 AC 82            [24]  721 	mov	r4,dpl
      000078 AD 83            [24]  722 	mov	r5,dph
      00007A D0 06            [24]  723 	pop	ar6
      00007C D0 07            [24]  724 	pop	ar7
      00007E C3               [12]  725 	clr	c
      00007F EE               [12]  726 	mov	a,r6
      000080 94 30            [12]  727 	subb	a,#0x30
      000082 EF               [12]  728 	mov	a,r7
      000083 64 80            [12]  729 	xrl	a,#0x80
      000085 94 80            [12]  730 	subb	a,#0x80
      000087 40 0E            [24]  731 	jc	00104$
      000089 74 C0            [12]  732 	mov	a,#0xc0
      00008B 9E               [12]  733 	subb	a,r6
      00008C 74 92            [12]  734 	mov	a,#(0x12 ^ 0x80)
      00008E 8F F0            [24]  735 	mov	b,r7
      000090 63 F0 80         [24]  736 	xrl	b,#0x80
      000093 95 F0            [12]  737 	subb	a,b
      000095 50 20            [24]  738 	jnc	00105$
      000097                        739 00104$:
                                    740 ;	main.c:103: printf_tiny("Invalid input. Please try again\n\r");
      000097 74r9F            [12]  741 	mov	a,#___str_3
      000099 C0 E0            [24]  742 	push	acc
      00009B 74s00            [12]  743 	mov	a,#(___str_3 >> 8)
      00009D C0 E0            [24]  744 	push	acc
      00009F 12r00r00         [24]  745 	lcall	_printf_tiny
      0000A2 15 81            [12]  746 	dec	sp
      0000A4 15 81            [12]  747 	dec	sp
                                    748 ;	main.c:104: number=0;
      0000A6 90r00rCF         [24]  749 	mov	dptr,#_main_number_65536_49
      0000A9 E4               [12]  750 	clr	a
      0000AA F0               [24]  751 	movx	@dptr,a
      0000AB A3               [24]  752 	inc	dptr
      0000AC F0               [24]  753 	movx	@dptr,a
                                    754 ;	main.c:105: flag=1;
      0000AD 90r00rD3         [24]  755 	mov	dptr,#_main_flag_65537_50
      0000B0 04               [12]  756 	inc	a
      0000B1 F0               [24]  757 	movx	@dptr,a
      0000B2 E4               [12]  758 	clr	a
      0000B3 A3               [24]  759 	inc	dptr
      0000B4 F0               [24]  760 	movx	@dptr,a
      0000B5 80 33            [24]  761 	sjmp	00109$
      0000B7                        762 00105$:
                                    763 ;	main.c:107: else if(divisible==0)
      0000B7 EC               [12]  764 	mov	a,r4
      0000B8 4D               [12]  765 	orl	a,r5
      0000B9 70 11            [24]  766 	jnz	00102$
                                    767 ;	main.c:109: number=number;
      0000BB 90r00rCF         [24]  768 	mov	dptr,#_main_number_65536_49
      0000BE EE               [12]  769 	mov	a,r6
      0000BF F0               [24]  770 	movx	@dptr,a
      0000C0 EF               [12]  771 	mov	a,r7
      0000C1 A3               [24]  772 	inc	dptr
      0000C2 F0               [24]  773 	movx	@dptr,a
                                    774 ;	main.c:110: flag=0;
      0000C3 90r00rD3         [24]  775 	mov	dptr,#_main_flag_65537_50
      0000C6 E4               [12]  776 	clr	a
      0000C7 F0               [24]  777 	movx	@dptr,a
      0000C8 A3               [24]  778 	inc	dptr
      0000C9 F0               [24]  779 	movx	@dptr,a
      0000CA 80 1E            [24]  780 	sjmp	00109$
      0000CC                        781 00102$:
                                    782 ;	main.c:114: printf_tiny("Invalid input. Please try again\n\r");
      0000CC 74r9F            [12]  783 	mov	a,#___str_3
      0000CE C0 E0            [24]  784 	push	acc
      0000D0 74s00            [12]  785 	mov	a,#(___str_3 >> 8)
      0000D2 C0 E0            [24]  786 	push	acc
      0000D4 12r00r00         [24]  787 	lcall	_printf_tiny
      0000D7 15 81            [12]  788 	dec	sp
      0000D9 15 81            [12]  789 	dec	sp
                                    790 ;	main.c:115: number=0;
      0000DB 90r00rCF         [24]  791 	mov	dptr,#_main_number_65536_49
      0000DE E4               [12]  792 	clr	a
      0000DF F0               [24]  793 	movx	@dptr,a
      0000E0 A3               [24]  794 	inc	dptr
      0000E1 F0               [24]  795 	movx	@dptr,a
                                    796 ;	main.c:116: flag=1;
      0000E2 90r00rD3         [24]  797 	mov	dptr,#_main_flag_65537_50
      0000E5 04               [12]  798 	inc	a
      0000E6 F0               [24]  799 	movx	@dptr,a
      0000E7 E4               [12]  800 	clr	a
      0000E8 A3               [24]  801 	inc	dptr
      0000E9 F0               [24]  802 	movx	@dptr,a
      0000EA                        803 00109$:
                                    804 ;	main.c:119: while(flag==1);
      0000EA 90r00rD3         [24]  805 	mov	dptr,#_main_flag_65537_50
      0000ED E0               [24]  806 	movx	a,@dptr
      0000EE FE               [12]  807 	mov	r6,a
      0000EF A3               [24]  808 	inc	dptr
      0000F0 E0               [24]  809 	movx	a,@dptr
      0000F1 FF               [12]  810 	mov	r7,a
      0000F2 BE 01 06         [24]  811 	cjne	r6,#0x01,00373$
      0000F5 BF 00 03         [24]  812 	cjne	r7,#0x00,00373$
      0000F8 02r00r3E         [24]  813 	ljmp	00108$
      0000FB                        814 00373$:
                                    815 ;	main.c:126: do
      0000FB 90r00rCF         [24]  816 	mov	dptr,#_main_number_65536_49
      0000FE E0               [24]  817 	movx	a,@dptr
      0000FF FE               [12]  818 	mov	r6,a
      000100 A3               [24]  819 	inc	dptr
      000101 E0               [24]  820 	movx	a,@dptr
      000102 FF               [12]  821 	mov	r7,a
      000103                        822 00116$:
                                    823 ;	main.c:129: if ((buffer_0 = malloc(number)) == 0)
      000103 8E 82            [24]  824 	mov	dpl,r6
      000105 8F 83            [24]  825 	mov	dph,r7
      000107 C0 07            [24]  826 	push	ar7
      000109 C0 06            [24]  827 	push	ar6
      00010B 12r00r00         [24]  828 	lcall	_malloc
      00010E AC 82            [24]  829 	mov	r4,dpl
      000110 AD 83            [24]  830 	mov	r5,dph
      000112 D0 06            [24]  831 	pop	ar6
      000114 D0 07            [24]  832 	pop	ar7
      000116 EC               [12]  833 	mov	a,r4
      000117 4D               [12]  834 	orl	a,r5
      000118 70 1F            [24]  835 	jnz	00112$
                                    836 ;	main.c:132: printf_tiny("malloc buffer 0 failed\n\r");
      00011A C0 07            [24]  837 	push	ar7
      00011C C0 06            [24]  838 	push	ar6
      00011E C0 05            [24]  839 	push	ar5
      000120 C0 04            [24]  840 	push	ar4
      000122 74rC1            [12]  841 	mov	a,#___str_4
      000124 C0 E0            [24]  842 	push	acc
      000126 74s00            [12]  843 	mov	a,#(___str_4 >> 8)
      000128 C0 E0            [24]  844 	push	acc
      00012A 12r00r00         [24]  845 	lcall	_printf_tiny
      00012D 15 81            [12]  846 	dec	sp
      00012F 15 81            [12]  847 	dec	sp
      000131 D0 04            [24]  848 	pop	ar4
      000133 D0 05            [24]  849 	pop	ar5
      000135 D0 06            [24]  850 	pop	ar6
      000137 D0 07            [24]  851 	pop	ar7
      000139                        852 00112$:
                                    853 ;	main.c:133: if ((buffer_1 = malloc(number)) == 0)
      000139 8E 82            [24]  854 	mov	dpl,r6
      00013B 8F 83            [24]  855 	mov	dph,r7
      00013D C0 07            [24]  856 	push	ar7
      00013F C0 06            [24]  857 	push	ar6
      000141 C0 05            [24]  858 	push	ar5
      000143 C0 04            [24]  859 	push	ar4
      000145 12r00r00         [24]  860 	lcall	_malloc
      000148 AA 82            [24]  861 	mov	r2,dpl
      00014A AB 83            [24]  862 	mov	r3,dph
      00014C D0 04            [24]  863 	pop	ar4
      00014E D0 05            [24]  864 	pop	ar5
      000150 D0 06            [24]  865 	pop	ar6
      000152 D0 07            [24]  866 	pop	ar7
      000154 90r00r01         [24]  867 	mov	dptr,#_main_buffer_1_65536_49
      000157 EA               [12]  868 	mov	a,r2
      000158 F0               [24]  869 	movx	@dptr,a
      000159 EB               [12]  870 	mov	a,r3
      00015A A3               [24]  871 	inc	dptr
      00015B F0               [24]  872 	movx	@dptr,a
      00015C EA               [12]  873 	mov	a,r2
      00015D 4B               [12]  874 	orl	a,r3
      00015E 70 56            [24]  875 	jnz	00117$
                                    876 ;	main.c:135: printf_tiny("malloc buffer 1 failed\n\r");
      000160 C0 06            [24]  877 	push	ar6
      000162 C0 07            [24]  878 	push	ar7
      000164 C0 07            [24]  879 	push	ar7
      000166 C0 06            [24]  880 	push	ar6
      000168 C0 05            [24]  881 	push	ar5
      00016A C0 04            [24]  882 	push	ar4
      00016C C0 03            [24]  883 	push	ar3
      00016E C0 02            [24]  884 	push	ar2
      000170 74rDA            [12]  885 	mov	a,#___str_5
      000172 C0 E0            [24]  886 	push	acc
      000174 74s00            [12]  887 	mov	a,#(___str_5 >> 8)
      000176 C0 E0            [24]  888 	push	acc
      000178 12r00r00         [24]  889 	lcall	_printf_tiny
      00017B 15 81            [12]  890 	dec	sp
      00017D 15 81            [12]  891 	dec	sp
      00017F D0 02            [24]  892 	pop	ar2
      000181 D0 03            [24]  893 	pop	ar3
      000183 D0 04            [24]  894 	pop	ar4
      000185 D0 05            [24]  895 	pop	ar5
      000187 D0 06            [24]  896 	pop	ar6
      000189 D0 07            [24]  897 	pop	ar7
                                    898 ;	main.c:137: free(buffer_0);
      00018B 8C 00            [24]  899 	mov	ar0,r4
      00018D 8D 01            [24]  900 	mov	ar1,r5
      00018F 7F 00            [12]  901 	mov	r7,#0x00
      000191 88 82            [24]  902 	mov	dpl,r0
      000193 89 83            [24]  903 	mov	dph,r1
      000195 8F F0            [24]  904 	mov	b,r7
      000197 C0 07            [24]  905 	push	ar7
      000199 C0 06            [24]  906 	push	ar6
      00019B C0 05            [24]  907 	push	ar5
      00019D C0 04            [24]  908 	push	ar4
      00019F C0 03            [24]  909 	push	ar3
      0001A1 C0 02            [24]  910 	push	ar2
      0001A3 12r00r00         [24]  911 	lcall	_free
      0001A6 D0 02            [24]  912 	pop	ar2
      0001A8 D0 03            [24]  913 	pop	ar3
      0001AA D0 04            [24]  914 	pop	ar4
      0001AC D0 05            [24]  915 	pop	ar5
      0001AE D0 06            [24]  916 	pop	ar6
      0001B0 D0 07            [24]  917 	pop	ar7
                                    918 ;	main.c:356: goto ishaan;
      0001B2 D0 07            [24]  919 	pop	ar7
      0001B4 D0 06            [24]  920 	pop	ar6
                                    921 ;	main.c:137: free(buffer_0);
      0001B6                        922 00117$:
                                    923 ;	main.c:140: while ((buffer_0 == 0) || (buffer_1 == 0));
      0001B6 EC               [12]  924 	mov	a,r4
      0001B7 4D               [12]  925 	orl	a,r5
      0001B8 70 03            [24]  926 	jnz	00376$
      0001BA 02r01r03         [24]  927 	ljmp	00116$
      0001BD                        928 00376$:
      0001BD EA               [12]  929 	mov	a,r2
      0001BE 4B               [12]  930 	orl	a,r3
      0001BF 70 03            [24]  931 	jnz	00377$
      0001C1 02r01r03         [24]  932 	ljmp	00116$
      0001C4                        933 00377$:
                                    934 ;	main.c:141: Buffer_0temp=(uint16_t)buffer_0;
      0001C4 8C 06            [24]  935 	mov	ar6,r4
      0001C6 8D 07            [24]  936 	mov	ar7,r5
      0001C8 8E*0B            [24]  937 	mov	_main_sloc6_1_0,r6
      0001CA 8F*0C            [24]  938 	mov	(_main_sloc6_1_0 + 1),r7
                                    939 ;	main.c:142: Buffer_1temp=(uint16_t)buffer_1;
      0001CC 8A*09            [24]  940 	mov	_main_sloc5_1_0,r2
      0001CE 8B*0A            [24]  941 	mov	(_main_sloc5_1_0 + 1),r3
                                    942 ;	main.c:143: printf_tiny("Start Address of buffer_0 = 0x%x\n\r",Buffer_0temp);
      0001D0 C0 05            [24]  943 	push	ar5
      0001D2 C0 04            [24]  944 	push	ar4
      0001D4 C0*0B            [24]  945 	push	_main_sloc6_1_0
      0001D6 C0*0C            [24]  946 	push	(_main_sloc6_1_0 + 1)
      0001D8 74rF3            [12]  947 	mov	a,#___str_6
      0001DA C0 E0            [24]  948 	push	acc
      0001DC 74s00            [12]  949 	mov	a,#(___str_6 >> 8)
      0001DE C0 E0            [24]  950 	push	acc
      0001E0 12r00r00         [24]  951 	lcall	_printf_tiny
      0001E3 E5 81            [12]  952 	mov	a,sp
      0001E5 24 FC            [12]  953 	add	a,#0xfc
      0001E7 F5 81            [12]  954 	mov	sp,a
                                    955 ;	main.c:144: printf_tiny("Start Address of buffer_1 = 0x%x\n\r",Buffer_1temp);
      0001E9 C0*09            [24]  956 	push	_main_sloc5_1_0
      0001EB C0*0A            [24]  957 	push	(_main_sloc5_1_0 + 1)
      0001ED 74r16            [12]  958 	mov	a,#___str_7
      0001EF C0 E0            [24]  959 	push	acc
      0001F1 74s01            [12]  960 	mov	a,#(___str_7 >> 8)
      0001F3 C0 E0            [24]  961 	push	acc
      0001F5 12r00r00         [24]  962 	lcall	_printf_tiny
      0001F8 E5 81            [12]  963 	mov	a,sp
      0001FA 24 FC            [12]  964 	add	a,#0xfc
      0001FC F5 81            [12]  965 	mov	sp,a
                                    966 ;	main.c:145: printf_tiny("Buffer 0 and Buffer 1 successfully Created\n\r");
      0001FE 74r39            [12]  967 	mov	a,#___str_8
      000200 C0 E0            [24]  968 	push	acc
      000202 74s01            [12]  969 	mov	a,#(___str_8 >> 8)
      000204 C0 E0            [24]  970 	push	acc
      000206 12r00r00         [24]  971 	lcall	_printf_tiny
      000209 15 81            [12]  972 	dec	sp
      00020B 15 81            [12]  973 	dec	sp
                                    974 ;	main.c:146: printf_tiny("\n\r OPTIONS \n\r");
      00020D 74r66            [12]  975 	mov	a,#___str_9
      00020F C0 E0            [24]  976 	push	acc
      000211 74s01            [12]  977 	mov	a,#(___str_9 >> 8)
      000213 C0 E0            [24]  978 	push	acc
      000215 12r00r00         [24]  979 	lcall	_printf_tiny
      000218 15 81            [12]  980 	dec	sp
      00021A 15 81            [12]  981 	dec	sp
                                    982 ;	main.c:147: printf_tiny("You can enter characters to be stored in buffer 0\n\r");
      00021C 74r74            [12]  983 	mov	a,#___str_10
      00021E C0 E0            [24]  984 	push	acc
      000220 74s01            [12]  985 	mov	a,#(___str_10 >> 8)
      000222 C0 E0            [24]  986 	push	acc
      000224 12r00r00         [24]  987 	lcall	_printf_tiny
      000227 15 81            [12]  988 	dec	sp
      000229 15 81            [12]  989 	dec	sp
                                    990 ;	main.c:148: printf_tiny("Press + to create a new buffer of size between 30 and 300 bytes\n\r");
      00022B 74rA8            [12]  991 	mov	a,#___str_11
      00022D C0 E0            [24]  992 	push	acc
      00022F 74s01            [12]  993 	mov	a,#(___str_11 >> 8)
      000231 C0 E0            [24]  994 	push	acc
      000233 12r00r00         [24]  995 	lcall	_printf_tiny
      000236 15 81            [12]  996 	dec	sp
      000238 15 81            [12]  997 	dec	sp
                                    998 ;	main.c:149: printf_tiny("Press - to delete a buffer.\n\r");
      00023A 74rEA            [12]  999 	mov	a,#___str_12
      00023C C0 E0            [24] 1000 	push	acc
      00023E 74s01            [12] 1001 	mov	a,#(___str_12 >> 8)
      000240 C0 E0            [24] 1002 	push	acc
      000242 12r00r00         [24] 1003 	lcall	_printf_tiny
      000245 15 81            [12] 1004 	dec	sp
      000247 15 81            [12] 1005 	dec	sp
                                   1006 ;	main.c:150: printf_tiny("Press ? to generate a heap report.\n\r");
      000249 74r08            [12] 1007 	mov	a,#___str_13
      00024B C0 E0            [24] 1008 	push	acc
      00024D 74s02            [12] 1009 	mov	a,#(___str_13 >> 8)
      00024F C0 E0            [24] 1010 	push	acc
      000251 12r00r00         [24] 1011 	lcall	_printf_tiny
      000254 15 81            [12] 1012 	dec	sp
      000256 15 81            [12] 1013 	dec	sp
                                   1014 ;	main.c:151: printf_tiny("Press = to display current contents of buffer 0.\n\r");
      000258 74r2D            [12] 1015 	mov	a,#___str_14
      00025A C0 E0            [24] 1016 	push	acc
      00025C 74s02            [12] 1017 	mov	a,#(___str_14 >> 8)
      00025E C0 E0            [24] 1018 	push	acc
      000260 12r00r00         [24] 1019 	lcall	_printf_tiny
      000263 15 81            [12] 1020 	dec	sp
      000265 15 81            [12] 1021 	dec	sp
                                   1022 ;	main.c:152: printf_tiny("Press @ to free all buffers and start program again.\n\r");
      000267 74r60            [12] 1023 	mov	a,#___str_15
      000269 C0 E0            [24] 1024 	push	acc
      00026B 74s02            [12] 1025 	mov	a,#(___str_15 >> 8)
      00026D C0 E0            [24] 1026 	push	acc
      00026F 12r00r00         [24] 1027 	lcall	_printf_tiny
      000272 15 81            [12] 1028 	dec	sp
      000274 15 81            [12] 1029 	dec	sp
                                   1030 ;	main.c:153: printf_tiny("Press # to see the menu again.\n\r");
      000276 74r97            [12] 1031 	mov	a,#___str_16
      000278 C0 E0            [24] 1032 	push	acc
      00027A 74s02            [12] 1033 	mov	a,#(___str_16 >> 8)
      00027C C0 E0            [24] 1034 	push	acc
      00027E 12r00r00         [24] 1035 	lcall	_printf_tiny
      000281 15 81            [12] 1036 	dec	sp
      000283 15 81            [12] 1037 	dec	sp
                                   1038 ;	main.c:154: printf_tiny("\n\r****************************THANK YOU****************************\n\r");
      000285 74rB8            [12] 1039 	mov	a,#___str_17
      000287 C0 E0            [24] 1040 	push	acc
      000289 74s02            [12] 1041 	mov	a,#(___str_17 >> 8)
      00028B C0 E0            [24] 1042 	push	acc
      00028D 12r00r00         [24] 1043 	lcall	_printf_tiny
      000290 15 81            [12] 1044 	dec	sp
      000292 15 81            [12] 1045 	dec	sp
                                   1046 ;	main.c:155: printf_tiny("Created by Gauriech Ishaan Pilla.\n\r");
      000294 74rFE            [12] 1047 	mov	a,#___str_18
      000296 C0 E0            [24] 1048 	push	acc
      000298 74s02            [12] 1049 	mov	a,#(___str_18 >> 8)
      00029A C0 E0            [24] 1050 	push	acc
      00029C 12r00r00         [24] 1051 	lcall	_printf_tiny
      00029F 15 81            [12] 1052 	dec	sp
      0002A1 15 81            [12] 1053 	dec	sp
      0002A3 D0 04            [24] 1054 	pop	ar4
      0002A5 D0 05            [24] 1055 	pop	ar5
                                   1056 ;	main.c:160: ishaan:
      0002A7 78 00            [12] 1057 	mov	r0,#0x00
      0002A9 79 00            [12] 1058 	mov	r1,#0x00
      0002AB 75*00 02         [24] 1059 	mov	_main_sloc0_1_0,#0x02
                                   1060 ;	1-genFromRTrack replaced	mov	(_main_sloc0_1_0 + 1),#0x00
      0002AE 89*01            [24] 1061 	mov	(_main_sloc0_1_0 + 1),r1
      0002B0 E4               [12] 1062 	clr	a
      0002B1 F5*02            [12] 1063 	mov	_main_sloc1_1_0,a
      0002B3 F5*03            [12] 1064 	mov	(_main_sloc1_1_0 + 1),a
      0002B5                       1065 00119$:
                                   1066 ;	main.c:161: printf_tiny("\n\rEnter the character or press # to see menu again\n\r");
      0002B5 C0 05            [24] 1067 	push	ar5
      0002B7 C0 04            [24] 1068 	push	ar4
      0002B9 C0 01            [24] 1069 	push	ar1
      0002BB C0 00            [24] 1070 	push	ar0
      0002BD 74r22            [12] 1071 	mov	a,#___str_19
      0002BF C0 E0            [24] 1072 	push	acc
      0002C1 74s03            [12] 1073 	mov	a,#(___str_19 >> 8)
      0002C3 C0 E0            [24] 1074 	push	acc
      0002C5 12r00r00         [24] 1075 	lcall	_printf_tiny
      0002C8 15 81            [12] 1076 	dec	sp
      0002CA 15 81            [12] 1077 	dec	sp
                                   1078 ;	main.c:163: input_char=getchar();
      0002CC 12r10r51         [24] 1079 	lcall	_getchar
      0002CF AA 82            [24] 1080 	mov	r2,dpl
      0002D1 D0 00            [24] 1081 	pop	ar0
      0002D3 D0 01            [24] 1082 	pop	ar1
      0002D5 D0 04            [24] 1083 	pop	ar4
      0002D7 D0 05            [24] 1084 	pop	ar5
      0002D9 8A*04            [24] 1085 	mov	_main_sloc2_1_0,r2
                                   1086 ;	main.c:164: total_char++;
      0002DB 08               [12] 1087 	inc	r0
      0002DC B8 00 01         [24] 1088 	cjne	r0,#0x00,00378$
      0002DF 09               [12] 1089 	inc	r1
      0002E0                       1090 00378$:
                                   1091 ;	main.c:165: putchar(input_char);
      0002E0 85*04*05         [24] 1092 	mov	_main_sloc3_1_0,_main_sloc2_1_0
      0002E3 75*06 00         [24] 1093 	mov	(_main_sloc3_1_0 + 1),#0x00
      0002E6 85*05 82         [24] 1094 	mov	dpl,_main_sloc3_1_0
      0002E9 85*06 83         [24] 1095 	mov	dph,(_main_sloc3_1_0 + 1)
      0002EC C0 05            [24] 1096 	push	ar5
      0002EE C0 04            [24] 1097 	push	ar4
      0002F0 C0 01            [24] 1098 	push	ar1
      0002F2 C0 00            [24] 1099 	push	ar0
      0002F4 12r10r32         [24] 1100 	lcall	_putchar
                                   1101 ;	main.c:166: printf_tiny("\n\r\n\r");
      0002F7 74r57            [12] 1102 	mov	a,#___str_20
      0002F9 C0 E0            [24] 1103 	push	acc
      0002FB 74s03            [12] 1104 	mov	a,#(___str_20 >> 8)
      0002FD C0 E0            [24] 1105 	push	acc
      0002FF 12r00r00         [24] 1106 	lcall	_printf_tiny
      000302 15 81            [12] 1107 	dec	sp
      000304 15 81            [12] 1108 	dec	sp
      000306 D0 00            [24] 1109 	pop	ar0
      000308 D0 01            [24] 1110 	pop	ar1
      00030A D0 04            [24] 1111 	pop	ar4
      00030C D0 05            [24] 1112 	pop	ar5
                                   1113 ;	main.c:169: if(((input_char)>='a') && (((input_char)<='z') && (count<number)))
      00030E 74 9F            [12] 1114 	mov	a,#0x100 - 0x61
      000310 25*04            [12] 1115 	add	a,_main_sloc2_1_0
      000312 50 68            [24] 1116 	jnc	00179$
      000314 E5*04            [12] 1117 	mov	a,_main_sloc2_1_0
      000316 24 85            [12] 1118 	add	a,#0xff - 0x7a
      000318 40 62            [24] 1119 	jc	00179$
      00031A C0 00            [24] 1120 	push	ar0
      00031C C0 01            [24] 1121 	push	ar1
      00031E 90r00r69         [24] 1122 	mov	dptr,#_main_count_65536_49
      000321 E0               [24] 1123 	movx	a,@dptr
      000322 F5*07            [12] 1124 	mov	_main_sloc4_1_0,a
      000324 A3               [24] 1125 	inc	dptr
      000325 E0               [24] 1126 	movx	a,@dptr
      000326 F5*08            [12] 1127 	mov	(_main_sloc4_1_0 + 1),a
      000328 90r00rCF         [24] 1128 	mov	dptr,#_main_number_65536_49
      00032B E0               [24] 1129 	movx	a,@dptr
      00032C F8               [12] 1130 	mov	r0,a
      00032D A3               [24] 1131 	inc	dptr
      00032E E0               [24] 1132 	movx	a,@dptr
      00032F F9               [12] 1133 	mov	r1,a
      000330 C3               [12] 1134 	clr	c
      000331 E5*07            [12] 1135 	mov	a,_main_sloc4_1_0
      000333 98               [12] 1136 	subb	a,r0
      000334 E5*08            [12] 1137 	mov	a,(_main_sloc4_1_0 + 1)
      000336 99               [12] 1138 	subb	a,r1
      000337 D0 01            [24] 1139 	pop	ar1
      000339 D0 00            [24] 1140 	pop	ar0
      00033B 50 3F            [24] 1141 	jnc	00179$
                                   1142 ;	main.c:171: DEBUGPORT('A');
      00033D 75 82 41         [24] 1143 	mov	dpl,#0x41
      000340 C0 05            [24] 1144 	push	ar5
      000342 C0 04            [24] 1145 	push	ar4
      000344 C0 01            [24] 1146 	push	ar1
      000346 C0 00            [24] 1147 	push	ar0
      000348 12r00r07         [24] 1148 	lcall	_dataout
      00034B D0 00            [24] 1149 	pop	ar0
      00034D D0 01            [24] 1150 	pop	ar1
      00034F D0 04            [24] 1151 	pop	ar4
      000351 D0 05            [24] 1152 	pop	ar5
                                   1153 ;	main.c:172: char_stored++;
      000353 90r00r67         [24] 1154 	mov	dptr,#_main_char_stored_65536_49
      000356 E0               [24] 1155 	movx	a,@dptr
      000357 24 01            [12] 1156 	add	a,#0x01
      000359 F0               [24] 1157 	movx	@dptr,a
      00035A A3               [24] 1158 	inc	dptr
      00035B E0               [24] 1159 	movx	a,@dptr
      00035C 34 00            [12] 1160 	addc	a,#0x00
      00035E F0               [24] 1161 	movx	@dptr,a
                                   1162 ;	main.c:173: *((buffer_0)+count)=input_char;
      00035F E5*07            [12] 1163 	mov	a,_main_sloc4_1_0
      000361 2C               [12] 1164 	add	a,r4
      000362 F5 82            [12] 1165 	mov	dpl,a
      000364 E5*08            [12] 1166 	mov	a,(_main_sloc4_1_0 + 1)
      000366 3D               [12] 1167 	addc	a,r5
      000367 F5 83            [12] 1168 	mov	dph,a
      000369 E5*04            [12] 1169 	mov	a,_main_sloc2_1_0
      00036B F0               [24] 1170 	movx	@dptr,a
                                   1171 ;	main.c:174: count++;
      00036C 90r00r69         [24] 1172 	mov	dptr,#_main_count_65536_49
      00036F 74 01            [12] 1173 	mov	a,#0x01
      000371 25*07            [12] 1174 	add	a,_main_sloc4_1_0
      000373 F0               [24] 1175 	movx	@dptr,a
      000374 E4               [12] 1176 	clr	a
      000375 35*08            [12] 1177 	addc	a,(_main_sloc4_1_0 + 1)
      000377 A3               [24] 1178 	inc	dptr
      000378 F0               [24] 1179 	movx	@dptr,a
      000379 02r02rB5         [24] 1180 	ljmp	00119$
      00037C                       1181 00179$:
                                   1182 ;	main.c:178: else if(((count) == (number)) && (input_char != '+') && (input_char != '-') && (input_char != '?') && (input_char != '=') && (input_char != '@')&& (input_char != '#'))
      00037C C0 00            [24] 1183 	push	ar0
      00037E C0 01            [24] 1184 	push	ar1
      000380 90r00r69         [24] 1185 	mov	dptr,#_main_count_65536_49
      000383 E0               [24] 1186 	movx	a,@dptr
      000384 F5*07            [12] 1187 	mov	_main_sloc4_1_0,a
      000386 A3               [24] 1188 	inc	dptr
      000387 E0               [24] 1189 	movx	a,@dptr
      000388 F5*08            [12] 1190 	mov	(_main_sloc4_1_0 + 1),a
      00038A 90r00rCF         [24] 1191 	mov	dptr,#_main_number_65536_49
      00038D E0               [24] 1192 	movx	a,@dptr
      00038E F8               [12] 1193 	mov	r0,a
      00038F A3               [24] 1194 	inc	dptr
      000390 E0               [24] 1195 	movx	a,@dptr
      000391 F9               [12] 1196 	mov	r1,a
      000392 E8               [12] 1197 	mov	a,r0
      000393 B5*07 06         [24] 1198 	cjne	a,_main_sloc4_1_0,00382$
      000396 E9               [12] 1199 	mov	a,r1
      000397 B5*08 02         [24] 1200 	cjne	a,(_main_sloc4_1_0 + 1),00382$
      00039A 80 06            [24] 1201 	sjmp	00383$
      00039C                       1202 00382$:
      00039C D0 01            [24] 1203 	pop	ar1
      00039E D0 00            [24] 1204 	pop	ar0
      0003A0 80 59            [24] 1205 	sjmp	00170$
      0003A2                       1206 00383$:
      0003A2 D0 01            [24] 1207 	pop	ar1
      0003A4 D0 00            [24] 1208 	pop	ar0
      0003A6 74 2B            [12] 1209 	mov	a,#0x2b
      0003A8 B5*04 02         [24] 1210 	cjne	a,_main_sloc2_1_0,00384$
      0003AB 80 4E            [24] 1211 	sjmp	00170$
      0003AD                       1212 00384$:
      0003AD 74 2D            [12] 1213 	mov	a,#0x2d
      0003AF B5*04 02         [24] 1214 	cjne	a,_main_sloc2_1_0,00385$
      0003B2 80 47            [24] 1215 	sjmp	00170$
      0003B4                       1216 00385$:
      0003B4 74 3F            [12] 1217 	mov	a,#0x3f
      0003B6 B5*04 02         [24] 1218 	cjne	a,_main_sloc2_1_0,00386$
      0003B9 80 40            [24] 1219 	sjmp	00170$
      0003BB                       1220 00386$:
      0003BB 74 3D            [12] 1221 	mov	a,#0x3d
      0003BD B5*04 02         [24] 1222 	cjne	a,_main_sloc2_1_0,00387$
      0003C0 80 39            [24] 1223 	sjmp	00170$
      0003C2                       1224 00387$:
      0003C2 74 40            [12] 1225 	mov	a,#0x40
      0003C4 B5*04 02         [24] 1226 	cjne	a,_main_sloc2_1_0,00388$
      0003C7 80 32            [24] 1227 	sjmp	00170$
      0003C9                       1228 00388$:
      0003C9 74 23            [12] 1229 	mov	a,#0x23
      0003CB B5*04 02         [24] 1230 	cjne	a,_main_sloc2_1_0,00389$
      0003CE 80 2B            [24] 1231 	sjmp	00170$
      0003D0                       1232 00389$:
                                   1233 ;	main.c:180: putchar(input_char);
      0003D0 85*05 82         [24] 1234 	mov	dpl,_main_sloc3_1_0
      0003D3 85*06 83         [24] 1235 	mov	dph,(_main_sloc3_1_0 + 1)
      0003D6 C0 05            [24] 1236 	push	ar5
      0003D8 C0 04            [24] 1237 	push	ar4
      0003DA C0 01            [24] 1238 	push	ar1
      0003DC C0 00            [24] 1239 	push	ar0
      0003DE 12r10r32         [24] 1240 	lcall	_putchar
                                   1241 ;	main.c:181: printf_tiny("\n\rBuffer 0 is full.\n\r");
      0003E1 74r5C            [12] 1242 	mov	a,#___str_21
      0003E3 C0 E0            [24] 1243 	push	acc
      0003E5 74s03            [12] 1244 	mov	a,#(___str_21 >> 8)
      0003E7 C0 E0            [24] 1245 	push	acc
      0003E9 12r00r00         [24] 1246 	lcall	_printf_tiny
      0003EC 15 81            [12] 1247 	dec	sp
      0003EE 15 81            [12] 1248 	dec	sp
      0003F0 D0 00            [24] 1249 	pop	ar0
      0003F2 D0 01            [24] 1250 	pop	ar1
      0003F4 D0 04            [24] 1251 	pop	ar4
      0003F6 D0 05            [24] 1252 	pop	ar5
      0003F8 02r02rB5         [24] 1253 	ljmp	00119$
      0003FB                       1254 00170$:
                                   1255 ;	main.c:184: else if(input_char == '+')
      0003FB 74 2B            [12] 1256 	mov	a,#0x2b
      0003FD B5*04 02         [24] 1257 	cjne	a,_main_sloc2_1_0,00390$
      000400 80 03            [24] 1258 	sjmp	00391$
      000402                       1259 00390$:
      000402 02r05rAE         [24] 1260 	ljmp	00167$
      000405                       1261 00391$:
                                   1262 ;	main.c:186: DEBUGPORT(1);
      000405 C0 00            [24] 1263 	push	ar0
      000407 C0 01            [24] 1264 	push	ar1
      000409 75 82 01         [24] 1265 	mov	dpl,#0x01
      00040C C0 05            [24] 1266 	push	ar5
      00040E C0 04            [24] 1267 	push	ar4
      000410 C0 01            [24] 1268 	push	ar1
      000412 C0 00            [24] 1269 	push	ar0
      000414 12r00r07         [24] 1270 	lcall	_dataout
                                   1271 ;	main.c:187: printf_tiny("\n\r Allocate a new Buffer \n\r");
      000417 74r72            [12] 1272 	mov	a,#___str_22
      000419 C0 E0            [24] 1273 	push	acc
      00041B 74s03            [12] 1274 	mov	a,#(___str_22 >> 8)
      00041D C0 E0            [24] 1275 	push	acc
      00041F 12r00r00         [24] 1276 	lcall	_printf_tiny
      000422 15 81            [12] 1277 	dec	sp
      000424 15 81            [12] 1278 	dec	sp
                                   1279 ;	main.c:188: printf_tiny("\n\rEnter the buffer size between 30 and 300\n\r");
      000426 74r8E            [12] 1280 	mov	a,#___str_23
      000428 C0 E0            [24] 1281 	push	acc
      00042A 74s03            [12] 1282 	mov	a,#(___str_23 >> 8)
      00042C C0 E0            [24] 1283 	push	acc
      00042E 12r00r00         [24] 1284 	lcall	_printf_tiny
      000431 15 81            [12] 1285 	dec	sp
      000433 15 81            [12] 1286 	dec	sp
      000435 D0 00            [24] 1287 	pop	ar0
      000437 D0 01            [24] 1288 	pop	ar1
                                   1289 ;	main.c:191: number2=num_input();
      000439 12r0Fr2A         [24] 1290 	lcall	_num_input
      00043C A8 82            [24] 1291 	mov	r0,dpl
      00043E A9 83            [24] 1292 	mov	r1,dph
      000440 D0 04            [24] 1293 	pop	ar4
      000442 D0 05            [24] 1294 	pop	ar5
      000444 88*07            [24] 1295 	mov	_main_sloc4_1_0,r0
      000446 89*08            [24] 1296 	mov	(_main_sloc4_1_0 + 1),r1
                                   1297 ;	main.c:192: if((number2<30 || number2>300))
      000448 C3               [12] 1298 	clr	c
      000449 E5*07            [12] 1299 	mov	a,_main_sloc4_1_0
      00044B 94 1E            [12] 1300 	subb	a,#0x1e
      00044D E5*08            [12] 1301 	mov	a,(_main_sloc4_1_0 + 1)
      00044F 64 80            [12] 1302 	xrl	a,#0x80
      000451 94 80            [12] 1303 	subb	a,#0x80
      000453 D0 01            [24] 1304 	pop	ar1
      000455 D0 00            [24] 1305 	pop	ar0
      000457 40 10            [24] 1306 	jc	00120$
      000459 74 2C            [12] 1307 	mov	a,#0x2c
      00045B 95*07            [12] 1308 	subb	a,_main_sloc4_1_0
      00045D 74 81            [12] 1309 	mov	a,#(0x01 ^ 0x80)
      00045F 85*08 F0         [24] 1310 	mov	b,(_main_sloc4_1_0 + 1)
      000462 63 F0 80         [24] 1311 	xrl	b,#0x80
      000465 95 F0            [12] 1312 	subb	a,b
      000467 50 09            [24] 1313 	jnc	00121$
      000469                       1314 00120$:
                                   1315 ;	main.c:194: number2=0;
      000469 90r00rD1         [24] 1316 	mov	dptr,#_main_number2_65536_49
      00046C E4               [12] 1317 	clr	a
      00046D F0               [24] 1318 	movx	@dptr,a
      00046E A3               [24] 1319 	inc	dptr
      00046F F0               [24] 1320 	movx	@dptr,a
      000470 80 0A            [24] 1321 	sjmp	00122$
      000472                       1322 00121$:
                                   1323 ;	main.c:198: number2=number2;
      000472 90r00rD1         [24] 1324 	mov	dptr,#_main_number2_65536_49
      000475 E5*07            [12] 1325 	mov	a,_main_sloc4_1_0
      000477 F0               [24] 1326 	movx	@dptr,a
      000478 E5*08            [12] 1327 	mov	a,(_main_sloc4_1_0 + 1)
      00047A A3               [24] 1328 	inc	dptr
      00047B F0               [24] 1329 	movx	@dptr,a
      00047C                       1330 00122$:
                                   1331 ;	main.c:200: buffer_n[i]=malloc(number2);
      00047C C0 00            [24] 1332 	push	ar0
      00047E C0 01            [24] 1333 	push	ar1
      000480 E5*02            [12] 1334 	mov	a,_main_sloc1_1_0
      000482 25*02            [12] 1335 	add	a,_main_sloc1_1_0
      000484 F8               [12] 1336 	mov	r0,a
      000485 E5*03            [12] 1337 	mov	a,(_main_sloc1_1_0 + 1)
      000487 33               [12] 1338 	rlc	a
      000488 F9               [12] 1339 	mov	r1,a
      000489 E8               [12] 1340 	mov	a,r0
      00048A 24r03            [12] 1341 	add	a,#_main_buffer_n_65536_49
      00048C F5*07            [12] 1342 	mov	_main_sloc4_1_0,a
      00048E E9               [12] 1343 	mov	a,r1
      00048F 34s00            [12] 1344 	addc	a,#(_main_buffer_n_65536_49 >> 8)
      000491 F5*08            [12] 1345 	mov	(_main_sloc4_1_0 + 1),a
      000493 90r00rD1         [24] 1346 	mov	dptr,#_main_number2_65536_49
      000496 E0               [24] 1347 	movx	a,@dptr
      000497 F5*05            [12] 1348 	mov	_main_sloc3_1_0,a
      000499 A3               [24] 1349 	inc	dptr
      00049A E0               [24] 1350 	movx	a,@dptr
      00049B F5*06            [12] 1351 	mov	(_main_sloc3_1_0 + 1),a
      00049D 85*05 82         [24] 1352 	mov	dpl,_main_sloc3_1_0
      0004A0 85*06 83         [24] 1353 	mov	dph,(_main_sloc3_1_0 + 1)
      0004A3 C0 05            [24] 1354 	push	ar5
      0004A5 C0 04            [24] 1355 	push	ar4
      0004A7 12r00r00         [24] 1356 	lcall	_malloc
      0004AA A8 82            [24] 1357 	mov	r0,dpl
      0004AC A9 83            [24] 1358 	mov	r1,dph
      0004AE D0 04            [24] 1359 	pop	ar4
      0004B0 D0 05            [24] 1360 	pop	ar5
      0004B2 85*07 82         [24] 1361 	mov	dpl,_main_sloc4_1_0
      0004B5 85*08 83         [24] 1362 	mov	dph,(_main_sloc4_1_0 + 1)
      0004B8 E8               [12] 1363 	mov	a,r0
      0004B9 F0               [24] 1364 	movx	@dptr,a
      0004BA E9               [12] 1365 	mov	a,r1
      0004BB A3               [24] 1366 	inc	dptr
      0004BC F0               [24] 1367 	movx	@dptr,a
                                   1368 ;	main.c:202: if(buffer_n[i]==NULL)
      0004BD E8               [12] 1369 	mov	a,r0
      0004BE 49               [12] 1370 	orl	a,r1
      0004BF D0 01            [24] 1371 	pop	ar1
      0004C1 D0 00            [24] 1372 	pop	ar0
      0004C3 70 39            [24] 1373 	jnz	00125$
                                   1374 ;	main.c:204: printf_tiny("\n\rMemory Allocation for Buffer_%d Failed\n\rPress '+' to Try again\n\r",i+2);
      0004C5 C0 00            [24] 1375 	push	ar0
      0004C7 C0 01            [24] 1376 	push	ar1
      0004C9 74 02            [12] 1377 	mov	a,#0x02
      0004CB 25*02            [12] 1378 	add	a,_main_sloc1_1_0
      0004CD F8               [12] 1379 	mov	r0,a
      0004CE E4               [12] 1380 	clr	a
      0004CF 35*03            [12] 1381 	addc	a,(_main_sloc1_1_0 + 1)
      0004D1 F9               [12] 1382 	mov	r1,a
      0004D2 C0 05            [24] 1383 	push	ar5
      0004D4 C0 04            [24] 1384 	push	ar4
      0004D6 C0 01            [24] 1385 	push	ar1
      0004D8 C0 00            [24] 1386 	push	ar0
      0004DA C0 00            [24] 1387 	push	ar0
      0004DC C0 01            [24] 1388 	push	ar1
      0004DE 74rBB            [12] 1389 	mov	a,#___str_24
      0004E0 C0 E0            [24] 1390 	push	acc
      0004E2 74s03            [12] 1391 	mov	a,#(___str_24 >> 8)
      0004E4 C0 E0            [24] 1392 	push	acc
      0004E6 12r00r00         [24] 1393 	lcall	_printf_tiny
      0004E9 E5 81            [12] 1394 	mov	a,sp
      0004EB 24 FC            [12] 1395 	add	a,#0xfc
      0004ED F5 81            [12] 1396 	mov	sp,a
      0004EF D0 00            [24] 1397 	pop	ar0
      0004F1 D0 01            [24] 1398 	pop	ar1
      0004F3 D0 04            [24] 1399 	pop	ar4
      0004F5 D0 05            [24] 1400 	pop	ar5
      0004F7 D0 01            [24] 1401 	pop	ar1
      0004F9 D0 00            [24] 1402 	pop	ar0
      0004FB 02r02rB5         [24] 1403 	ljmp	00119$
      0004FE                       1404 00125$:
                                   1405 ;	main.c:208: printf_tiny("\n\rMemory Allocation Successful for Buffer_%d\n\r",(i+2));
      0004FE C0 00            [24] 1406 	push	ar0
      000500 C0 01            [24] 1407 	push	ar1
      000502 74 02            [12] 1408 	mov	a,#0x02
      000504 25*02            [12] 1409 	add	a,_main_sloc1_1_0
      000506 F8               [12] 1410 	mov	r0,a
      000507 E4               [12] 1411 	clr	a
      000508 35*03            [12] 1412 	addc	a,(_main_sloc1_1_0 + 1)
      00050A F9               [12] 1413 	mov	r1,a
      00050B C0 05            [24] 1414 	push	ar5
      00050D C0 04            [24] 1415 	push	ar4
      00050F C0 01            [24] 1416 	push	ar1
      000511 C0 00            [24] 1417 	push	ar0
      000513 C0 00            [24] 1418 	push	ar0
      000515 C0 01            [24] 1419 	push	ar1
      000517 74rFE            [12] 1420 	mov	a,#___str_25
      000519 C0 E0            [24] 1421 	push	acc
      00051B 74s03            [12] 1422 	mov	a,#(___str_25 >> 8)
      00051D C0 E0            [24] 1423 	push	acc
      00051F 12r00r00         [24] 1424 	lcall	_printf_tiny
      000522 E5 81            [12] 1425 	mov	a,sp
      000524 24 FC            [12] 1426 	add	a,#0xfc
      000526 F5 81            [12] 1427 	mov	sp,a
      000528 D0 00            [24] 1428 	pop	ar0
      00052A D0 01            [24] 1429 	pop	ar1
                                   1430 ;	main.c:209: printf_tiny("\n\rBuffer_%d allocated of size %d\n\r",(i+2),number2);
      00052C C0 01            [24] 1431 	push	ar1
      00052E C0 00            [24] 1432 	push	ar0
      000530 C0*05            [24] 1433 	push	_main_sloc3_1_0
      000532 C0*06            [24] 1434 	push	(_main_sloc3_1_0 + 1)
      000534 C0 00            [24] 1435 	push	ar0
      000536 C0 01            [24] 1436 	push	ar1
      000538 74r2D            [12] 1437 	mov	a,#___str_26
      00053A C0 E0            [24] 1438 	push	acc
      00053C 74s04            [12] 1439 	mov	a,#(___str_26 >> 8)
      00053E C0 E0            [24] 1440 	push	acc
      000540 12r00r00         [24] 1441 	lcall	_printf_tiny
      000543 E5 81            [12] 1442 	mov	a,sp
      000545 24 FA            [12] 1443 	add	a,#0xfa
      000547 F5 81            [12] 1444 	mov	sp,a
      000549 D0 00            [24] 1445 	pop	ar0
      00054B D0 01            [24] 1446 	pop	ar1
                                   1447 ;	main.c:210: printf_tiny("\n\rStart Address of buffer_%d = 0x%x\n\r",(i+2),(uint16_t)(buffer_n[i]));
      00054D 85*07 82         [24] 1448 	mov	dpl,_main_sloc4_1_0
      000550 85*08 83         [24] 1449 	mov	dph,(_main_sloc4_1_0 + 1)
      000553 E0               [24] 1450 	movx	a,@dptr
      000554 FA               [12] 1451 	mov	r2,a
      000555 A3               [24] 1452 	inc	dptr
      000556 E0               [24] 1453 	movx	a,@dptr
      000557 FB               [12] 1454 	mov	r3,a
      000558 C0 01            [24] 1455 	push	ar1
      00055A C0 00            [24] 1456 	push	ar0
      00055C C0 02            [24] 1457 	push	ar2
      00055E C0 03            [24] 1458 	push	ar3
      000560 C0 00            [24] 1459 	push	ar0
      000562 C0 01            [24] 1460 	push	ar1
      000564 74r50            [12] 1461 	mov	a,#___str_27
      000566 C0 E0            [24] 1462 	push	acc
      000568 74s04            [12] 1463 	mov	a,#(___str_27 >> 8)
      00056A C0 E0            [24] 1464 	push	acc
      00056C 12r00r00         [24] 1465 	lcall	_printf_tiny
      00056F E5 81            [12] 1466 	mov	a,sp
      000571 24 FA            [12] 1467 	add	a,#0xfa
      000573 F5 81            [12] 1468 	mov	sp,a
      000575 D0 00            [24] 1469 	pop	ar0
      000577 D0 01            [24] 1470 	pop	ar1
      000579 D0 04            [24] 1471 	pop	ar4
      00057B D0 05            [24] 1472 	pop	ar5
                                   1473 ;	main.c:211: buff_size[j]=number2;
      00057D E5*00            [12] 1474 	mov	a,_main_sloc0_1_0
      00057F 25*00            [12] 1475 	add	a,_main_sloc0_1_0
      000581 FA               [12] 1476 	mov	r2,a
      000582 E5*01            [12] 1477 	mov	a,(_main_sloc0_1_0 + 1)
      000584 33               [12] 1478 	rlc	a
      000585 FB               [12] 1479 	mov	r3,a
      000586 EA               [12] 1480 	mov	a,r2
      000587 24r6B            [12] 1481 	add	a,#_main_buff_size_65536_49
      000589 F5 82            [12] 1482 	mov	dpl,a
      00058B EB               [12] 1483 	mov	a,r3
      00058C 34s00            [12] 1484 	addc	a,#(_main_buff_size_65536_49 >> 8)
      00058E F5 83            [12] 1485 	mov	dph,a
      000590 E5*05            [12] 1486 	mov	a,_main_sloc3_1_0
      000592 F0               [24] 1487 	movx	@dptr,a
      000593 E5*06            [12] 1488 	mov	a,(_main_sloc3_1_0 + 1)
      000595 A3               [24] 1489 	inc	dptr
      000596 F0               [24] 1490 	movx	@dptr,a
                                   1491 ;	main.c:212: j++;
      000597 05*00            [12] 1492 	inc	_main_sloc0_1_0
      000599 E4               [12] 1493 	clr	a
      00059A B5*00 02         [24] 1494 	cjne	a,_main_sloc0_1_0,00395$
      00059D 05*01            [12] 1495 	inc	(_main_sloc0_1_0 + 1)
      00059F                       1496 00395$:
                                   1497 ;	main.c:213: i++;
      00059F 05*02            [12] 1498 	inc	_main_sloc1_1_0
      0005A1 E4               [12] 1499 	clr	a
      0005A2 B5*02 02         [24] 1500 	cjne	a,_main_sloc1_1_0,00396$
      0005A5 05*03            [12] 1501 	inc	(_main_sloc1_1_0 + 1)
      0005A7                       1502 00396$:
      0005A7 D0 01            [24] 1503 	pop	ar1
      0005A9 D0 00            [24] 1504 	pop	ar0
      0005AB 02r02rB5         [24] 1505 	ljmp	00119$
      0005AE                       1506 00167$:
                                   1507 ;	main.c:219: else if(input_char == '-')
      0005AE 74 2D            [12] 1508 	mov	a,#0x2d
      0005B0 B5*04 02         [24] 1509 	cjne	a,_main_sloc2_1_0,00397$
      0005B3 80 03            [24] 1510 	sjmp	00398$
      0005B5                       1511 00397$:
      0005B5 02r07r68         [24] 1512 	ljmp	00164$
      0005B8                       1513 00398$:
                                   1514 ;	main.c:221: DEBUGPORT(2);
      0005B8 75 82 02         [24] 1515 	mov	dpl,#0x02
      0005BB C0 05            [24] 1516 	push	ar5
      0005BD C0 04            [24] 1517 	push	ar4
      0005BF C0 01            [24] 1518 	push	ar1
      0005C1 C0 00            [24] 1519 	push	ar0
      0005C3 12r00r07         [24] 1520 	lcall	_dataout
                                   1521 ;	main.c:222: printf_tiny("\n\rEnter a valid buffer number\n\r");
      0005C6 74r76            [12] 1522 	mov	a,#___str_28
      0005C8 C0 E0            [24] 1523 	push	acc
      0005CA 74s04            [12] 1524 	mov	a,#(___str_28 >> 8)
      0005CC C0 E0            [24] 1525 	push	acc
      0005CE 12r00r00         [24] 1526 	lcall	_printf_tiny
      0005D1 15 81            [12] 1527 	dec	sp
      0005D3 15 81            [12] 1528 	dec	sp
                                   1529 ;	main.c:225: num_del=num_input();
      0005D5 12r0Fr2A         [24] 1530 	lcall	_num_input
      0005D8 AA 82            [24] 1531 	mov	r2,dpl
      0005DA AB 83            [24] 1532 	mov	r3,dph
      0005DC D0 00            [24] 1533 	pop	ar0
      0005DE D0 01            [24] 1534 	pop	ar1
      0005E0 D0 04            [24] 1535 	pop	ar4
      0005E2 D0 05            [24] 1536 	pop	ar5
                                   1537 ;	main.c:227: if(num_del == 0)
      0005E4 EA               [12] 1538 	mov	a,r2
      0005E5 4B               [12] 1539 	orl	a,r3
      0005E6 70 22            [24] 1540 	jnz	00135$
                                   1541 ;	main.c:229: printf_tiny("\n\rBuffer 0 cannot be deleted!\n\r");
      0005E8 C0 05            [24] 1542 	push	ar5
      0005EA C0 04            [24] 1543 	push	ar4
      0005EC C0 01            [24] 1544 	push	ar1
      0005EE C0 00            [24] 1545 	push	ar0
      0005F0 74r96            [12] 1546 	mov	a,#___str_29
      0005F2 C0 E0            [24] 1547 	push	acc
      0005F4 74s04            [12] 1548 	mov	a,#(___str_29 >> 8)
      0005F6 C0 E0            [24] 1549 	push	acc
      0005F8 12r00r00         [24] 1550 	lcall	_printf_tiny
      0005FB 15 81            [12] 1551 	dec	sp
      0005FD 15 81            [12] 1552 	dec	sp
      0005FF D0 00            [24] 1553 	pop	ar0
      000601 D0 01            [24] 1554 	pop	ar1
      000603 D0 04            [24] 1555 	pop	ar4
      000605 D0 05            [24] 1556 	pop	ar5
      000607 02r02rB5         [24] 1557 	ljmp	00119$
      00060A                       1558 00135$:
                                   1559 ;	main.c:231: else if(num_del == 1)
      00060A BA 01 56         [24] 1560 	cjne	r2,#0x01,00132$
      00060D BB 00 53         [24] 1561 	cjne	r3,#0x00,00132$
                                   1562 ;	main.c:233: free(buffer_1);
      000610 C0 00            [24] 1563 	push	ar0
      000612 C0 01            [24] 1564 	push	ar1
      000614 90r00r01         [24] 1565 	mov	dptr,#_main_buffer_1_65536_49
      000617 E0               [24] 1566 	movx	a,@dptr
      000618 F8               [12] 1567 	mov	r0,a
      000619 A3               [24] 1568 	inc	dptr
      00061A E0               [24] 1569 	movx	a,@dptr
      00061B F9               [12] 1570 	mov	r1,a
      00061C 7F 00            [12] 1571 	mov	r7,#0x00
      00061E 88 82            [24] 1572 	mov	dpl,r0
      000620 89 83            [24] 1573 	mov	dph,r1
      000622 8F F0            [24] 1574 	mov	b,r7
      000624 C0 05            [24] 1575 	push	ar5
      000626 C0 04            [24] 1576 	push	ar4
      000628 C0 01            [24] 1577 	push	ar1
      00062A C0 00            [24] 1578 	push	ar0
      00062C 12r00r00         [24] 1579 	lcall	_free
                                   1580 ;	main.c:234: printf_tiny("\n\rDeleting buffer 1\n\r");
      00062F 74rB6            [12] 1581 	mov	a,#___str_30
      000631 C0 E0            [24] 1582 	push	acc
      000633 74s04            [12] 1583 	mov	a,#(___str_30 >> 8)
      000635 C0 E0            [24] 1584 	push	acc
      000637 12r00r00         [24] 1585 	lcall	_printf_tiny
      00063A 15 81            [12] 1586 	dec	sp
      00063C 15 81            [12] 1587 	dec	sp
                                   1588 ;	main.c:235: buffer_1 = 0;
      00063E 90r00r01         [24] 1589 	mov	dptr,#_main_buffer_1_65536_49
      000641 E4               [12] 1590 	clr	a
      000642 F0               [24] 1591 	movx	@dptr,a
      000643 A3               [24] 1592 	inc	dptr
      000644 F0               [24] 1593 	movx	@dptr,a
                                   1594 ;	main.c:236: printf_tiny("Buffer 1 is free");
      000645 74rCC            [12] 1595 	mov	a,#___str_31
      000647 C0 E0            [24] 1596 	push	acc
      000649 74s04            [12] 1597 	mov	a,#(___str_31 >> 8)
      00064B C0 E0            [24] 1598 	push	acc
      00064D 12r00r00         [24] 1599 	lcall	_printf_tiny
      000650 15 81            [12] 1600 	dec	sp
      000652 15 81            [12] 1601 	dec	sp
      000654 D0 00            [24] 1602 	pop	ar0
      000656 D0 01            [24] 1603 	pop	ar1
      000658 D0 04            [24] 1604 	pop	ar4
      00065A D0 05            [24] 1605 	pop	ar5
      00065C D0 01            [24] 1606 	pop	ar1
      00065E D0 00            [24] 1607 	pop	ar0
      000660 02r02rB5         [24] 1608 	ljmp	00119$
      000663                       1609 00132$:
                                   1610 ;	main.c:238: else if(num_del>1 && num_del <(i+2))
      000663 C3               [12] 1611 	clr	c
      000664 74 01            [12] 1612 	mov	a,#0x01
      000666 9A               [12] 1613 	subb	a,r2
      000667 74 80            [12] 1614 	mov	a,#(0x00 ^ 0x80)
      000669 8B F0            [24] 1615 	mov	b,r3
      00066B 63 F0 80         [24] 1616 	xrl	b,#0x80
      00066E 95 F0            [12] 1617 	subb	a,b
      000670 40 03            [24] 1618 	jc	00402$
      000672 02r07r46         [24] 1619 	ljmp	00128$
      000675                       1620 00402$:
      000675 74 02            [12] 1621 	mov	a,#0x02
      000677 25*02            [12] 1622 	add	a,_main_sloc1_1_0
      000679 FE               [12] 1623 	mov	r6,a
      00067A E4               [12] 1624 	clr	a
      00067B 35*03            [12] 1625 	addc	a,(_main_sloc1_1_0 + 1)
      00067D FF               [12] 1626 	mov	r7,a
      00067E C3               [12] 1627 	clr	c
      00067F EA               [12] 1628 	mov	a,r2
      000680 9E               [12] 1629 	subb	a,r6
      000681 EB               [12] 1630 	mov	a,r3
      000682 64 80            [12] 1631 	xrl	a,#0x80
      000684 8F F0            [24] 1632 	mov	b,r7
      000686 63 F0 80         [24] 1633 	xrl	b,#0x80
      000689 95 F0            [12] 1634 	subb	a,b
      00068B 40 03            [24] 1635 	jc	00403$
      00068D 02r07r46         [24] 1636 	ljmp	00128$
      000690                       1637 00403$:
                                   1638 ;	main.c:240: printf_tiny("\n\rDeleting buffer %d \n\r",num_del);
      000690 C0 00            [24] 1639 	push	ar0
      000692 C0 01            [24] 1640 	push	ar1
      000694 C0 05            [24] 1641 	push	ar5
      000696 C0 04            [24] 1642 	push	ar4
      000698 C0 03            [24] 1643 	push	ar3
      00069A C0 02            [24] 1644 	push	ar2
      00069C C0 01            [24] 1645 	push	ar1
      00069E C0 00            [24] 1646 	push	ar0
      0006A0 C0 02            [24] 1647 	push	ar2
      0006A2 C0 03            [24] 1648 	push	ar3
      0006A4 74rDD            [12] 1649 	mov	a,#___str_32
      0006A6 C0 E0            [24] 1650 	push	acc
      0006A8 74s04            [12] 1651 	mov	a,#(___str_32 >> 8)
      0006AA C0 E0            [24] 1652 	push	acc
      0006AC 12r00r00         [24] 1653 	lcall	_printf_tiny
      0006AF E5 81            [12] 1654 	mov	a,sp
      0006B1 24 FC            [12] 1655 	add	a,#0xfc
      0006B3 F5 81            [12] 1656 	mov	sp,a
      0006B5 D0 00            [24] 1657 	pop	ar0
      0006B7 D0 01            [24] 1658 	pop	ar1
      0006B9 D0 02            [24] 1659 	pop	ar2
      0006BB D0 03            [24] 1660 	pop	ar3
      0006BD D0 04            [24] 1661 	pop	ar4
      0006BF D0 05            [24] 1662 	pop	ar5
                                   1663 ;	main.c:241: free(buffer_n[num_del-2]);
      0006C1 8A 07            [24] 1664 	mov	ar7,r2
      0006C3 1F               [12] 1665 	dec	r7
      0006C4 1F               [12] 1666 	dec	r7
      0006C5 C2 D5            [12] 1667 	clr	F0
      0006C7 75 F0 02         [24] 1668 	mov	b,#0x02
      0006CA EF               [12] 1669 	mov	a,r7
      0006CB 30 E7 04         [24] 1670 	jnb	acc.7,00404$
      0006CE B2 D5            [12] 1671 	cpl	F0
      0006D0 F4               [12] 1672 	cpl	a
      0006D1 04               [12] 1673 	inc	a
      0006D2                       1674 00404$:
      0006D2 A4               [48] 1675 	mul	ab
      0006D3 30 D5 0A         [24] 1676 	jnb	F0,00405$
      0006D6 F4               [12] 1677 	cpl	a
      0006D7 24 01            [12] 1678 	add	a,#0x01
      0006D9 C5 F0            [12] 1679 	xch	a,b
      0006DB F4               [12] 1680 	cpl	a
      0006DC 34 00            [12] 1681 	addc	a,#0x00
      0006DE C5 F0            [12] 1682 	xch	a,b
      0006E0                       1683 00405$:
      0006E0 24r03            [12] 1684 	add	a,#_main_buffer_n_65536_49
      0006E2 F5*07            [12] 1685 	mov	_main_sloc4_1_0,a
      0006E4 74s00            [12] 1686 	mov	a,#(_main_buffer_n_65536_49 >> 8)
      0006E6 35 F0            [12] 1687 	addc	a,b
      0006E8 F5*08            [12] 1688 	mov	(_main_sloc4_1_0 + 1),a
      0006EA 85*07 82         [24] 1689 	mov	dpl,_main_sloc4_1_0
      0006ED 85*08 83         [24] 1690 	mov	dph,(_main_sloc4_1_0 + 1)
      0006F0 E0               [24] 1691 	movx	a,@dptr
      0006F1 F8               [12] 1692 	mov	r0,a
      0006F2 A3               [24] 1693 	inc	dptr
      0006F3 E0               [24] 1694 	movx	a,@dptr
      0006F4 F9               [12] 1695 	mov	r1,a
      0006F5 7F 00            [12] 1696 	mov	r7,#0x00
      0006F7 88 82            [24] 1697 	mov	dpl,r0
      0006F9 89 83            [24] 1698 	mov	dph,r1
      0006FB 8F F0            [24] 1699 	mov	b,r7
      0006FD C0 05            [24] 1700 	push	ar5
      0006FF C0 04            [24] 1701 	push	ar4
      000701 C0 03            [24] 1702 	push	ar3
      000703 C0 02            [24] 1703 	push	ar2
      000705 C0 01            [24] 1704 	push	ar1
      000707 C0 00            [24] 1705 	push	ar0
      000709 12r00r00         [24] 1706 	lcall	_free
      00070C D0 00            [24] 1707 	pop	ar0
      00070E D0 01            [24] 1708 	pop	ar1
      000710 D0 02            [24] 1709 	pop	ar2
      000712 D0 03            [24] 1710 	pop	ar3
                                   1711 ;	main.c:242: printf_tiny("\n\rBuffer %d is Free\n\r",num_del);
      000714 C0 01            [24] 1712 	push	ar1
      000716 C0 00            [24] 1713 	push	ar0
      000718 C0 02            [24] 1714 	push	ar2
      00071A C0 03            [24] 1715 	push	ar3
      00071C 74rF5            [12] 1716 	mov	a,#___str_33
      00071E C0 E0            [24] 1717 	push	acc
      000720 74s04            [12] 1718 	mov	a,#(___str_33 >> 8)
      000722 C0 E0            [24] 1719 	push	acc
      000724 12r00r00         [24] 1720 	lcall	_printf_tiny
      000727 E5 81            [12] 1721 	mov	a,sp
      000729 24 FC            [12] 1722 	add	a,#0xfc
      00072B F5 81            [12] 1723 	mov	sp,a
      00072D D0 00            [24] 1724 	pop	ar0
      00072F D0 01            [24] 1725 	pop	ar1
      000731 D0 04            [24] 1726 	pop	ar4
      000733 D0 05            [24] 1727 	pop	ar5
                                   1728 ;	main.c:243: buffer_n[num_del-2]=0;
      000735 85*07 82         [24] 1729 	mov	dpl,_main_sloc4_1_0
      000738 85*08 83         [24] 1730 	mov	dph,(_main_sloc4_1_0 + 1)
      00073B E4               [12] 1731 	clr	a
      00073C F0               [24] 1732 	movx	@dptr,a
      00073D A3               [24] 1733 	inc	dptr
      00073E F0               [24] 1734 	movx	@dptr,a
      00073F D0 01            [24] 1735 	pop	ar1
      000741 D0 00            [24] 1736 	pop	ar0
      000743 02r02rB5         [24] 1737 	ljmp	00119$
      000746                       1738 00128$:
                                   1739 ;	main.c:248: printf_tiny("\n\rEnter a valid buffer number\n\rPress '-' to delete any valid buffer\n\r");
      000746 C0 05            [24] 1740 	push	ar5
      000748 C0 04            [24] 1741 	push	ar4
      00074A C0 01            [24] 1742 	push	ar1
      00074C C0 00            [24] 1743 	push	ar0
      00074E 74r0B            [12] 1744 	mov	a,#___str_34
      000750 C0 E0            [24] 1745 	push	acc
      000752 74s05            [12] 1746 	mov	a,#(___str_34 >> 8)
      000754 C0 E0            [24] 1747 	push	acc
      000756 12r00r00         [24] 1748 	lcall	_printf_tiny
      000759 15 81            [12] 1749 	dec	sp
      00075B 15 81            [12] 1750 	dec	sp
      00075D D0 00            [24] 1751 	pop	ar0
      00075F D0 01            [24] 1752 	pop	ar1
      000761 D0 04            [24] 1753 	pop	ar4
      000763 D0 05            [24] 1754 	pop	ar5
      000765 02r02rB5         [24] 1755 	ljmp	00119$
      000768                       1756 00164$:
                                   1757 ;	main.c:257: else if(input_char == '?')
      000768 74 3F            [12] 1758 	mov	a,#0x3f
      00076A B5*04 02         [24] 1759 	cjne	a,_main_sloc2_1_0,00406$
      00076D 80 03            [24] 1760 	sjmp	00407$
      00076F                       1761 00406$:
      00076F 02r0Cr04         [24] 1762 	ljmp	00161$
      000772                       1763 00407$:
                                   1764 ;	main.c:259: DEBUGPORT(3);
      000772 75 82 03         [24] 1765 	mov	dpl,#0x03
      000775 C0 05            [24] 1766 	push	ar5
      000777 C0 04            [24] 1767 	push	ar4
      000779 C0 01            [24] 1768 	push	ar1
      00077B C0 00            [24] 1769 	push	ar0
      00077D 12r00r07         [24] 1770 	lcall	_dataout
                                   1771 ;	main.c:260: printf_tiny("****************************** HEAP REPORT ******************************");
      000780 74r51            [12] 1772 	mov	a,#___str_35
      000782 C0 E0            [24] 1773 	push	acc
      000784 74s05            [12] 1774 	mov	a,#(___str_35 >> 8)
      000786 C0 E0            [24] 1775 	push	acc
      000788 12r00r00         [24] 1776 	lcall	_printf_tiny
      00078B 15 81            [12] 1777 	dec	sp
      00078D 15 81            [12] 1778 	dec	sp
                                   1779 ;	main.c:262: printf_tiny("\n\rBuffer 0\n\r");
      00078F 74r9B            [12] 1780 	mov	a,#___str_36
      000791 C0 E0            [24] 1781 	push	acc
      000793 74s05            [12] 1782 	mov	a,#(___str_36 >> 8)
      000795 C0 E0            [24] 1783 	push	acc
      000797 12r00r00         [24] 1784 	lcall	_printf_tiny
      00079A 15 81            [12] 1785 	dec	sp
      00079C 15 81            [12] 1786 	dec	sp
                                   1787 ;	main.c:263: printf_tiny("\n\rStart Address = 0x%x\n\r",Buffer_0temp);
      00079E C0*0B            [24] 1788 	push	_main_sloc6_1_0
      0007A0 C0*0C            [24] 1789 	push	(_main_sloc6_1_0 + 1)
      0007A2 74rA8            [12] 1790 	mov	a,#___str_37
      0007A4 C0 E0            [24] 1791 	push	acc
      0007A6 74s05            [12] 1792 	mov	a,#(___str_37 >> 8)
      0007A8 C0 E0            [24] 1793 	push	acc
      0007AA 12r00r00         [24] 1794 	lcall	_printf_tiny
      0007AD E5 81            [12] 1795 	mov	a,sp
      0007AF 24 FC            [12] 1796 	add	a,#0xfc
      0007B1 F5 81            [12] 1797 	mov	sp,a
      0007B3 D0 00            [24] 1798 	pop	ar0
      0007B5 D0 01            [24] 1799 	pop	ar1
      0007B7 D0 04            [24] 1800 	pop	ar4
      0007B9 D0 05            [24] 1801 	pop	ar5
                                   1802 ;	main.c:264: printf_tiny("\n\rEnding Address = 0x%x\n\r",(Buffer_0temp)+(number));
      0007BB 90r00rCF         [24] 1803 	mov	dptr,#_main_number_65536_49
      0007BE E0               [24] 1804 	movx	a,@dptr
      0007BF FE               [12] 1805 	mov	r6,a
      0007C0 A3               [24] 1806 	inc	dptr
      0007C1 E0               [24] 1807 	movx	a,@dptr
      0007C2 FF               [12] 1808 	mov	r7,a
      0007C3 AA*0B            [24] 1809 	mov	r2,_main_sloc6_1_0
      0007C5 AB*0C            [24] 1810 	mov	r3,(_main_sloc6_1_0 + 1)
      0007C7 8E*07            [24] 1811 	mov	_main_sloc4_1_0,r6
      0007C9 8F*08            [24] 1812 	mov	(_main_sloc4_1_0 + 1),r7
      0007CB E5*07            [12] 1813 	mov	a,_main_sloc4_1_0
      0007CD 2A               [12] 1814 	add	a,r2
      0007CE FA               [12] 1815 	mov	r2,a
      0007CF E5*08            [12] 1816 	mov	a,(_main_sloc4_1_0 + 1)
      0007D1 3B               [12] 1817 	addc	a,r3
      0007D2 FB               [12] 1818 	mov	r3,a
      0007D3 C0 07            [24] 1819 	push	ar7
      0007D5 C0 06            [24] 1820 	push	ar6
      0007D7 C0 05            [24] 1821 	push	ar5
      0007D9 C0 04            [24] 1822 	push	ar4
      0007DB C0 01            [24] 1823 	push	ar1
      0007DD C0 00            [24] 1824 	push	ar0
      0007DF C0 02            [24] 1825 	push	ar2
      0007E1 C0 03            [24] 1826 	push	ar3
      0007E3 74rC1            [12] 1827 	mov	a,#___str_38
      0007E5 C0 E0            [24] 1828 	push	acc
      0007E7 74s05            [12] 1829 	mov	a,#(___str_38 >> 8)
      0007E9 C0 E0            [24] 1830 	push	acc
      0007EB 12r00r00         [24] 1831 	lcall	_printf_tiny
      0007EE E5 81            [12] 1832 	mov	a,sp
      0007F0 24 FC            [12] 1833 	add	a,#0xfc
      0007F2 F5 81            [12] 1834 	mov	sp,a
      0007F4 D0 00            [24] 1835 	pop	ar0
      0007F6 D0 01            [24] 1836 	pop	ar1
      0007F8 D0 04            [24] 1837 	pop	ar4
      0007FA D0 05            [24] 1838 	pop	ar5
      0007FC D0 06            [24] 1839 	pop	ar6
      0007FE D0 07            [24] 1840 	pop	ar7
                                   1841 ;	main.c:265: printf_tiny("\n\rBuffer Size = %d\n\r",number);
      000800 C0 07            [24] 1842 	push	ar7
      000802 C0 06            [24] 1843 	push	ar6
      000804 C0 05            [24] 1844 	push	ar5
      000806 C0 04            [24] 1845 	push	ar4
      000808 C0 01            [24] 1846 	push	ar1
      00080A C0 00            [24] 1847 	push	ar0
      00080C C0 06            [24] 1848 	push	ar6
      00080E C0 07            [24] 1849 	push	ar7
      000810 74rDB            [12] 1850 	mov	a,#___str_39
      000812 C0 E0            [24] 1851 	push	acc
      000814 74s05            [12] 1852 	mov	a,#(___str_39 >> 8)
      000816 C0 E0            [24] 1853 	push	acc
      000818 12r00r00         [24] 1854 	lcall	_printf_tiny
      00081B E5 81            [12] 1855 	mov	a,sp
      00081D 24 FC            [12] 1856 	add	a,#0xfc
      00081F F5 81            [12] 1857 	mov	sp,a
      000821 D0 00            [24] 1858 	pop	ar0
      000823 D0 01            [24] 1859 	pop	ar1
                                   1860 ;	main.c:266: printf_tiny("\n\rStorage characters in buffer = %d\n\r",char_stored);
      000825 90r00r67         [24] 1861 	mov	dptr,#_main_char_stored_65536_49
      000828 E0               [24] 1862 	movx	a,@dptr
      000829 FA               [12] 1863 	mov	r2,a
      00082A A3               [24] 1864 	inc	dptr
      00082B E0               [24] 1865 	movx	a,@dptr
      00082C FB               [12] 1866 	mov	r3,a
      00082D C0 03            [24] 1867 	push	ar3
      00082F C0 02            [24] 1868 	push	ar2
      000831 C0 01            [24] 1869 	push	ar1
      000833 C0 00            [24] 1870 	push	ar0
      000835 C0 02            [24] 1871 	push	ar2
      000837 C0 03            [24] 1872 	push	ar3
      000839 74rF0            [12] 1873 	mov	a,#___str_40
      00083B C0 E0            [24] 1874 	push	acc
      00083D 74s05            [12] 1875 	mov	a,#(___str_40 >> 8)
      00083F C0 E0            [24] 1876 	push	acc
      000841 12r00r00         [24] 1877 	lcall	_printf_tiny
      000844 E5 81            [12] 1878 	mov	a,sp
      000846 24 FC            [12] 1879 	add	a,#0xfc
      000848 F5 81            [12] 1880 	mov	sp,a
      00084A D0 00            [24] 1881 	pop	ar0
      00084C D0 01            [24] 1882 	pop	ar1
      00084E D0 02            [24] 1883 	pop	ar2
      000850 D0 03            [24] 1884 	pop	ar3
                                   1885 ;	main.c:267: printf_tiny("\n\rFree Spaces in buffer = %d\n\r",(number-char_stored));
      000852 E5*07            [12] 1886 	mov	a,_main_sloc4_1_0
      000854 C3               [12] 1887 	clr	c
      000855 9A               [12] 1888 	subb	a,r2
      000856 FA               [12] 1889 	mov	r2,a
      000857 E5*08            [12] 1890 	mov	a,(_main_sloc4_1_0 + 1)
      000859 9B               [12] 1891 	subb	a,r3
      00085A FB               [12] 1892 	mov	r3,a
      00085B C0 01            [24] 1893 	push	ar1
      00085D C0 00            [24] 1894 	push	ar0
      00085F C0 02            [24] 1895 	push	ar2
      000861 C0 03            [24] 1896 	push	ar3
      000863 74r16            [12] 1897 	mov	a,#___str_41
      000865 C0 E0            [24] 1898 	push	acc
      000867 74s06            [12] 1899 	mov	a,#(___str_41 >> 8)
      000869 C0 E0            [24] 1900 	push	acc
      00086B 12r00r00         [24] 1901 	lcall	_printf_tiny
      00086E E5 81            [12] 1902 	mov	a,sp
      000870 24 FC            [12] 1903 	add	a,#0xfc
      000872 F5 81            [12] 1904 	mov	sp,a
                                   1905 ;	main.c:268: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000874 74r35            [12] 1906 	mov	a,#___str_42
      000876 C0 E0            [24] 1907 	push	acc
      000878 74s06            [12] 1908 	mov	a,#(___str_42 >> 8)
      00087A C0 E0            [24] 1909 	push	acc
      00087C 12r00r00         [24] 1910 	lcall	_printf_tiny
      00087F 15 81            [12] 1911 	dec	sp
      000881 15 81            [12] 1912 	dec	sp
      000883 D0 00            [24] 1913 	pop	ar0
      000885 D0 01            [24] 1914 	pop	ar1
      000887 D0 04            [24] 1915 	pop	ar4
      000889 D0 05            [24] 1916 	pop	ar5
      00088B D0 06            [24] 1917 	pop	ar6
      00088D D0 07            [24] 1918 	pop	ar7
                                   1919 ;	main.c:270: if(buffer_1 != 0)
      00088F 90r00r01         [24] 1920 	mov	dptr,#_main_buffer_1_65536_49
      000892 E0               [24] 1921 	movx	a,@dptr
      000893 F5 F0            [12] 1922 	mov	b,a
      000895 A3               [24] 1923 	inc	dptr
      000896 E0               [24] 1924 	movx	a,@dptr
      000897 45 F0            [12] 1925 	orl	a,b
      000899 70 03            [24] 1926 	jnz	00408$
      00089B 02r09r6B         [24] 1927 	ljmp	00228$
      00089E                       1928 00408$:
                                   1929 ;	main.c:272: printf_tiny("\n\rBuffer 1\n\r");
      00089E C0 07            [24] 1930 	push	ar7
      0008A0 C0 06            [24] 1931 	push	ar6
      0008A2 C0 05            [24] 1932 	push	ar5
      0008A4 C0 04            [24] 1933 	push	ar4
      0008A6 C0 01            [24] 1934 	push	ar1
      0008A8 C0 00            [24] 1935 	push	ar0
      0008AA 74r81            [12] 1936 	mov	a,#___str_43
      0008AC C0 E0            [24] 1937 	push	acc
      0008AE 74s06            [12] 1938 	mov	a,#(___str_43 >> 8)
      0008B0 C0 E0            [24] 1939 	push	acc
      0008B2 12r00r00         [24] 1940 	lcall	_printf_tiny
      0008B5 15 81            [12] 1941 	dec	sp
      0008B7 15 81            [12] 1942 	dec	sp
                                   1943 ;	main.c:273: printf_tiny("\n\rStart Address = 0x%x\n\r",Buffer_1temp);
      0008B9 C0*09            [24] 1944 	push	_main_sloc5_1_0
      0008BB C0*0A            [24] 1945 	push	(_main_sloc5_1_0 + 1)
      0008BD 74rA8            [12] 1946 	mov	a,#___str_37
      0008BF C0 E0            [24] 1947 	push	acc
      0008C1 74s05            [12] 1948 	mov	a,#(___str_37 >> 8)
      0008C3 C0 E0            [24] 1949 	push	acc
      0008C5 12r00r00         [24] 1950 	lcall	_printf_tiny
      0008C8 E5 81            [12] 1951 	mov	a,sp
      0008CA 24 FC            [12] 1952 	add	a,#0xfc
      0008CC F5 81            [12] 1953 	mov	sp,a
                                   1954 ;	main.c:274: printf_tiny("\n\rEnding Address = 0x%x\n\r",Buffer_1temp+number);
      0008CE AA*09            [24] 1955 	mov	r2,_main_sloc5_1_0
      0008D0 AB*0A            [24] 1956 	mov	r3,(_main_sloc5_1_0 + 1)
      0008D2 E5*07            [12] 1957 	mov	a,_main_sloc4_1_0
      0008D4 2A               [12] 1958 	add	a,r2
      0008D5 FA               [12] 1959 	mov	r2,a
      0008D6 E5*08            [12] 1960 	mov	a,(_main_sloc4_1_0 + 1)
      0008D8 3B               [12] 1961 	addc	a,r3
      0008D9 FB               [12] 1962 	mov	r3,a
      0008DA C0 02            [24] 1963 	push	ar2
      0008DC C0 03            [24] 1964 	push	ar3
      0008DE 74rC1            [12] 1965 	mov	a,#___str_38
      0008E0 C0 E0            [24] 1966 	push	acc
      0008E2 74s05            [12] 1967 	mov	a,#(___str_38 >> 8)
      0008E4 C0 E0            [24] 1968 	push	acc
      0008E6 12r00r00         [24] 1969 	lcall	_printf_tiny
      0008E9 E5 81            [12] 1970 	mov	a,sp
      0008EB 24 FC            [12] 1971 	add	a,#0xfc
      0008ED F5 81            [12] 1972 	mov	sp,a
      0008EF D0 00            [24] 1973 	pop	ar0
      0008F1 D0 01            [24] 1974 	pop	ar1
      0008F3 D0 04            [24] 1975 	pop	ar4
      0008F5 D0 05            [24] 1976 	pop	ar5
      0008F7 D0 06            [24] 1977 	pop	ar6
      0008F9 D0 07            [24] 1978 	pop	ar7
                                   1979 ;	main.c:275: printf_tiny("\n\rBuffer Size = %d\n\r",number);
      0008FB C0 07            [24] 1980 	push	ar7
      0008FD C0 06            [24] 1981 	push	ar6
      0008FF C0 05            [24] 1982 	push	ar5
      000901 C0 04            [24] 1983 	push	ar4
      000903 C0 01            [24] 1984 	push	ar1
      000905 C0 00            [24] 1985 	push	ar0
      000907 C0 06            [24] 1986 	push	ar6
      000909 C0 07            [24] 1987 	push	ar7
      00090B 74rDB            [12] 1988 	mov	a,#___str_39
      00090D C0 E0            [24] 1989 	push	acc
      00090F 74s05            [12] 1990 	mov	a,#(___str_39 >> 8)
      000911 C0 E0            [24] 1991 	push	acc
      000913 12r00r00         [24] 1992 	lcall	_printf_tiny
      000916 E5 81            [12] 1993 	mov	a,sp
      000918 24 FC            [12] 1994 	add	a,#0xfc
      00091A F5 81            [12] 1995 	mov	sp,a
                                   1996 ;	main.c:276: printf_tiny("\n\rStorage characters in buffer = 0\n\r");
      00091C 74r8E            [12] 1997 	mov	a,#___str_44
      00091E C0 E0            [24] 1998 	push	acc
      000920 74s06            [12] 1999 	mov	a,#(___str_44 >> 8)
      000922 C0 E0            [24] 2000 	push	acc
      000924 12r00r00         [24] 2001 	lcall	_printf_tiny
      000927 15 81            [12] 2002 	dec	sp
      000929 15 81            [12] 2003 	dec	sp
      00092B D0 00            [24] 2004 	pop	ar0
      00092D D0 01            [24] 2005 	pop	ar1
      00092F D0 04            [24] 2006 	pop	ar4
      000931 D0 05            [24] 2007 	pop	ar5
      000933 D0 06            [24] 2008 	pop	ar6
      000935 D0 07            [24] 2009 	pop	ar7
                                   2010 ;	main.c:277: printf_tiny("\n\rFree Spaces in buffer = %d\n\r",(number));
      000937 C0 05            [24] 2011 	push	ar5
      000939 C0 04            [24] 2012 	push	ar4
      00093B C0 01            [24] 2013 	push	ar1
      00093D C0 00            [24] 2014 	push	ar0
      00093F C0 06            [24] 2015 	push	ar6
      000941 C0 07            [24] 2016 	push	ar7
      000943 74r16            [12] 2017 	mov	a,#___str_41
      000945 C0 E0            [24] 2018 	push	acc
      000947 74s06            [12] 2019 	mov	a,#(___str_41 >> 8)
      000949 C0 E0            [24] 2020 	push	acc
      00094B 12r00r00         [24] 2021 	lcall	_printf_tiny
      00094E E5 81            [12] 2022 	mov	a,sp
      000950 24 FC            [12] 2023 	add	a,#0xfc
      000952 F5 81            [12] 2024 	mov	sp,a
                                   2025 ;	main.c:278: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000954 74r35            [12] 2026 	mov	a,#___str_42
      000956 C0 E0            [24] 2027 	push	acc
      000958 74s06            [12] 2028 	mov	a,#(___str_42 >> 8)
      00095A C0 E0            [24] 2029 	push	acc
      00095C 12r00r00         [24] 2030 	lcall	_printf_tiny
      00095F 15 81            [12] 2031 	dec	sp
      000961 15 81            [12] 2032 	dec	sp
      000963 D0 00            [24] 2033 	pop	ar0
      000965 D0 01            [24] 2034 	pop	ar1
      000967 D0 04            [24] 2035 	pop	ar4
      000969 D0 05            [24] 2036 	pop	ar5
                                   2037 ;	main.c:281: for(k=2; k<=(i+2); k++)
      00096B                       2038 00228$:
      00096B 74 02            [12] 2039 	mov	a,#0x02
      00096D 25*02            [12] 2040 	add	a,_main_sloc1_1_0
      00096F F5*05            [12] 2041 	mov	_main_sloc3_1_0,a
      000971 E4               [12] 2042 	clr	a
      000972 35*03            [12] 2043 	addc	a,(_main_sloc1_1_0 + 1)
      000974 F5*06            [12] 2044 	mov	(_main_sloc3_1_0 + 1),a
      000976 7A 02            [12] 2045 	mov	r2,#0x02
      000978 7B 00            [12] 2046 	mov	r3,#0x00
      00097A                       2047 00187$:
      00097A C3               [12] 2048 	clr	c
      00097B E5*05            [12] 2049 	mov	a,_main_sloc3_1_0
      00097D 9A               [12] 2050 	subb	a,r2
      00097E E5*06            [12] 2051 	mov	a,(_main_sloc3_1_0 + 1)
      000980 64 80            [12] 2052 	xrl	a,#0x80
      000982 8B F0            [24] 2053 	mov	b,r3
      000984 63 F0 80         [24] 2054 	xrl	b,#0x80
      000987 95 F0            [12] 2055 	subb	a,b
      000989 50 03            [24] 2056 	jnc	00409$
      00098B 02r0Br59         [24] 2057 	ljmp	00141$
      00098E                       2058 00409$:
                                   2059 ;	main.c:283: if(buffer_n[k-2]!=0)
      00098E C0 00            [24] 2060 	push	ar0
      000990 C0 01            [24] 2061 	push	ar1
      000992 EA               [12] 2062 	mov	a,r2
      000993 F5*07            [12] 2063 	mov	_main_sloc4_1_0,a
      000995 24 FE            [12] 2064 	add	a,#0xfe
      000997 F9               [12] 2065 	mov	r1,a
      000998 C2 D5            [12] 2066 	clr	F0
      00099A 75 F0 02         [24] 2067 	mov	b,#0x02
      00099D E9               [12] 2068 	mov	a,r1
      00099E 30 E7 04         [24] 2069 	jnb	acc.7,00410$
      0009A1 B2 D5            [12] 2070 	cpl	F0
      0009A3 F4               [12] 2071 	cpl	a
      0009A4 04               [12] 2072 	inc	a
      0009A5                       2073 00410$:
      0009A5 A4               [48] 2074 	mul	ab
      0009A6 30 D5 0A         [24] 2075 	jnb	F0,00411$
      0009A9 F4               [12] 2076 	cpl	a
      0009AA 24 01            [12] 2077 	add	a,#0x01
      0009AC C5 F0            [12] 2078 	xch	a,b
      0009AE F4               [12] 2079 	cpl	a
      0009AF 34 00            [12] 2080 	addc	a,#0x00
      0009B1 C5 F0            [12] 2081 	xch	a,b
      0009B3                       2082 00411$:
      0009B3 24r03            [12] 2083 	add	a,#_main_buffer_n_65536_49
      0009B5 F5 82            [12] 2084 	mov	dpl,a
      0009B7 74s00            [12] 2085 	mov	a,#(_main_buffer_n_65536_49 >> 8)
      0009B9 35 F0            [12] 2086 	addc	a,b
      0009BB F5 83            [12] 2087 	mov	dph,a
      0009BD E0               [24] 2088 	movx	a,@dptr
      0009BE F8               [12] 2089 	mov	r0,a
      0009BF A3               [24] 2090 	inc	dptr
      0009C0 E0               [24] 2091 	movx	a,@dptr
      0009C1 48               [12] 2092 	orl	a,r0
      0009C2 D0 01            [24] 2093 	pop	ar1
      0009C4 D0 00            [24] 2094 	pop	ar0
      0009C6 70 03            [24] 2095 	jnz	00412$
      0009C8 02r0Br51         [24] 2096 	ljmp	00188$
      0009CB                       2097 00412$:
                                   2098 ;	main.c:285: printf_tiny("\n\rBuffer %d\n\r",k);
      0009CB C0 00            [24] 2099 	push	ar0
      0009CD C0 01            [24] 2100 	push	ar1
      0009CF C0 05            [24] 2101 	push	ar5
      0009D1 C0 04            [24] 2102 	push	ar4
      0009D3 C0 03            [24] 2103 	push	ar3
      0009D5 C0 02            [24] 2104 	push	ar2
      0009D7 C0 01            [24] 2105 	push	ar1
      0009D9 C0 00            [24] 2106 	push	ar0
      0009DB C0 02            [24] 2107 	push	ar2
      0009DD C0 03            [24] 2108 	push	ar3
      0009DF 74rB3            [12] 2109 	mov	a,#___str_45
      0009E1 C0 E0            [24] 2110 	push	acc
      0009E3 74s06            [12] 2111 	mov	a,#(___str_45 >> 8)
      0009E5 C0 E0            [24] 2112 	push	acc
      0009E7 12r00r00         [24] 2113 	lcall	_printf_tiny
      0009EA E5 81            [12] 2114 	mov	a,sp
      0009EC 24 FC            [12] 2115 	add	a,#0xfc
      0009EE F5 81            [12] 2116 	mov	sp,a
      0009F0 D0 00            [24] 2117 	pop	ar0
      0009F2 D0 01            [24] 2118 	pop	ar1
      0009F4 D0 02            [24] 2119 	pop	ar2
      0009F6 D0 03            [24] 2120 	pop	ar3
      0009F8 D0 04            [24] 2121 	pop	ar4
      0009FA D0 05            [24] 2122 	pop	ar5
                                   2123 ;	main.c:286: printf_tiny("\n\rStart Address = 0x%x\n\r",(uint16_t)buffer_n[k-2]);
      0009FC E5*07            [12] 2124 	mov	a,_main_sloc4_1_0
      0009FE 24 FE            [12] 2125 	add	a,#0xfe
      000A00 F9               [12] 2126 	mov	r1,a
      000A01 C2 D5            [12] 2127 	clr	F0
      000A03 75 F0 02         [24] 2128 	mov	b,#0x02
      000A06 E9               [12] 2129 	mov	a,r1
      000A07 30 E7 04         [24] 2130 	jnb	acc.7,00413$
      000A0A B2 D5            [12] 2131 	cpl	F0
      000A0C F4               [12] 2132 	cpl	a
      000A0D 04               [12] 2133 	inc	a
      000A0E                       2134 00413$:
      000A0E A4               [48] 2135 	mul	ab
      000A0F 30 D5 0A         [24] 2136 	jnb	F0,00414$
      000A12 F4               [12] 2137 	cpl	a
      000A13 24 01            [12] 2138 	add	a,#0x01
      000A15 C5 F0            [12] 2139 	xch	a,b
      000A17 F4               [12] 2140 	cpl	a
      000A18 34 00            [12] 2141 	addc	a,#0x00
      000A1A C5 F0            [12] 2142 	xch	a,b
      000A1C                       2143 00414$:
      000A1C 24r03            [12] 2144 	add	a,#_main_buffer_n_65536_49
      000A1E F8               [12] 2145 	mov	r0,a
      000A1F 74s00            [12] 2146 	mov	a,#(_main_buffer_n_65536_49 >> 8)
      000A21 35 F0            [12] 2147 	addc	a,b
      000A23 F9               [12] 2148 	mov	r1,a
      000A24 88 82            [24] 2149 	mov	dpl,r0
      000A26 89 83            [24] 2150 	mov	dph,r1
      000A28 E0               [24] 2151 	movx	a,@dptr
      000A29 FE               [12] 2152 	mov	r6,a
      000A2A A3               [24] 2153 	inc	dptr
      000A2B E0               [24] 2154 	movx	a,@dptr
      000A2C FF               [12] 2155 	mov	r7,a
      000A2D C0 05            [24] 2156 	push	ar5
      000A2F C0 04            [24] 2157 	push	ar4
      000A31 C0 03            [24] 2158 	push	ar3
      000A33 C0 02            [24] 2159 	push	ar2
      000A35 C0 01            [24] 2160 	push	ar1
      000A37 C0 00            [24] 2161 	push	ar0
      000A39 C0 06            [24] 2162 	push	ar6
      000A3B C0 07            [24] 2163 	push	ar7
      000A3D 74rA8            [12] 2164 	mov	a,#___str_37
      000A3F C0 E0            [24] 2165 	push	acc
      000A41 74s05            [12] 2166 	mov	a,#(___str_37 >> 8)
      000A43 C0 E0            [24] 2167 	push	acc
      000A45 12r00r00         [24] 2168 	lcall	_printf_tiny
      000A48 E5 81            [12] 2169 	mov	a,sp
      000A4A 24 FC            [12] 2170 	add	a,#0xfc
      000A4C F5 81            [12] 2171 	mov	sp,a
      000A4E D0 00            [24] 2172 	pop	ar0
      000A50 D0 01            [24] 2173 	pop	ar1
      000A52 D0 02            [24] 2174 	pop	ar2
      000A54 D0 03            [24] 2175 	pop	ar3
      000A56 D0 04            [24] 2176 	pop	ar4
      000A58 D0 05            [24] 2177 	pop	ar5
                                   2178 ;	main.c:287: printf_tiny("\n\rEnding Address = 0x%x\n\r",(uint16_t)(buffer_n[k-2])+(uint16_t)(buff_size[k]));
      000A5A 88 82            [24] 2179 	mov	dpl,r0
      000A5C 89 83            [24] 2180 	mov	dph,r1
      000A5E E0               [24] 2181 	movx	a,@dptr
      000A5F F8               [12] 2182 	mov	r0,a
      000A60 A3               [24] 2183 	inc	dptr
      000A61 E0               [24] 2184 	movx	a,@dptr
      000A62 F9               [12] 2185 	mov	r1,a
      000A63 88*07            [24] 2186 	mov	_main_sloc4_1_0,r0
      000A65 89*08            [24] 2187 	mov	(_main_sloc4_1_0 + 1),r1
      000A67 EA               [12] 2188 	mov	a,r2
      000A68 2A               [12] 2189 	add	a,r2
      000A69 FE               [12] 2190 	mov	r6,a
      000A6A EB               [12] 2191 	mov	a,r3
      000A6B 33               [12] 2192 	rlc	a
      000A6C FF               [12] 2193 	mov	r7,a
      000A6D EE               [12] 2194 	mov	a,r6
      000A6E 24r6B            [12] 2195 	add	a,#_main_buff_size_65536_49
      000A70 FE               [12] 2196 	mov	r6,a
      000A71 EF               [12] 2197 	mov	a,r7
      000A72 34s00            [12] 2198 	addc	a,#(_main_buff_size_65536_49 >> 8)
      000A74 FF               [12] 2199 	mov	r7,a
      000A75 8E 82            [24] 2200 	mov	dpl,r6
      000A77 8F 83            [24] 2201 	mov	dph,r7
      000A79 E0               [24] 2202 	movx	a,@dptr
      000A7A F8               [12] 2203 	mov	r0,a
      000A7B A3               [24] 2204 	inc	dptr
      000A7C E0               [24] 2205 	movx	a,@dptr
      000A7D F9               [12] 2206 	mov	r1,a
      000A7E E8               [12] 2207 	mov	a,r0
      000A7F 25*07            [12] 2208 	add	a,_main_sloc4_1_0
      000A81 F8               [12] 2209 	mov	r0,a
      000A82 E9               [12] 2210 	mov	a,r1
      000A83 35*08            [12] 2211 	addc	a,(_main_sloc4_1_0 + 1)
      000A85 F9               [12] 2212 	mov	r1,a
      000A86 C0 07            [24] 2213 	push	ar7
      000A88 C0 06            [24] 2214 	push	ar6
      000A8A C0 05            [24] 2215 	push	ar5
      000A8C C0 04            [24] 2216 	push	ar4
      000A8E C0 03            [24] 2217 	push	ar3
      000A90 C0 02            [24] 2218 	push	ar2
      000A92 C0 01            [24] 2219 	push	ar1
      000A94 C0 00            [24] 2220 	push	ar0
      000A96 C0 00            [24] 2221 	push	ar0
      000A98 C0 01            [24] 2222 	push	ar1
      000A9A 74rC1            [12] 2223 	mov	a,#___str_38
      000A9C C0 E0            [24] 2224 	push	acc
      000A9E 74s05            [12] 2225 	mov	a,#(___str_38 >> 8)
      000AA0 C0 E0            [24] 2226 	push	acc
      000AA2 12r00r00         [24] 2227 	lcall	_printf_tiny
      000AA5 E5 81            [12] 2228 	mov	a,sp
      000AA7 24 FC            [12] 2229 	add	a,#0xfc
      000AA9 F5 81            [12] 2230 	mov	sp,a
      000AAB D0 00            [24] 2231 	pop	ar0
      000AAD D0 01            [24] 2232 	pop	ar1
      000AAF D0 02            [24] 2233 	pop	ar2
      000AB1 D0 03            [24] 2234 	pop	ar3
      000AB3 D0 04            [24] 2235 	pop	ar4
      000AB5 D0 05            [24] 2236 	pop	ar5
      000AB7 D0 06            [24] 2237 	pop	ar6
      000AB9 D0 07            [24] 2238 	pop	ar7
                                   2239 ;	main.c:288: printf_tiny("\n\rBuffer Size = %d\n\r",buff_size[k]);
      000ABB 8E 82            [24] 2240 	mov	dpl,r6
      000ABD 8F 83            [24] 2241 	mov	dph,r7
      000ABF E0               [24] 2242 	movx	a,@dptr
      000AC0 F8               [12] 2243 	mov	r0,a
      000AC1 A3               [24] 2244 	inc	dptr
      000AC2 E0               [24] 2245 	movx	a,@dptr
      000AC3 F9               [12] 2246 	mov	r1,a
      000AC4 C0 07            [24] 2247 	push	ar7
      000AC6 C0 06            [24] 2248 	push	ar6
      000AC8 C0 05            [24] 2249 	push	ar5
      000ACA C0 04            [24] 2250 	push	ar4
      000ACC C0 03            [24] 2251 	push	ar3
      000ACE C0 02            [24] 2252 	push	ar2
      000AD0 C0 01            [24] 2253 	push	ar1
      000AD2 C0 00            [24] 2254 	push	ar0
      000AD4 C0 00            [24] 2255 	push	ar0
      000AD6 C0 01            [24] 2256 	push	ar1
      000AD8 74rDB            [12] 2257 	mov	a,#___str_39
      000ADA C0 E0            [24] 2258 	push	acc
      000ADC 74s05            [12] 2259 	mov	a,#(___str_39 >> 8)
      000ADE C0 E0            [24] 2260 	push	acc
      000AE0 12r00r00         [24] 2261 	lcall	_printf_tiny
      000AE3 E5 81            [12] 2262 	mov	a,sp
      000AE5 24 FC            [12] 2263 	add	a,#0xfc
      000AE7 F5 81            [12] 2264 	mov	sp,a
                                   2265 ;	main.c:289: printf_tiny("\n\rStorage characters in buffer = 0\n\r");
      000AE9 74r8E            [12] 2266 	mov	a,#___str_44
      000AEB C0 E0            [24] 2267 	push	acc
      000AED 74s06            [12] 2268 	mov	a,#(___str_44 >> 8)
      000AEF C0 E0            [24] 2269 	push	acc
      000AF1 12r00r00         [24] 2270 	lcall	_printf_tiny
      000AF4 15 81            [12] 2271 	dec	sp
      000AF6 15 81            [12] 2272 	dec	sp
      000AF8 D0 00            [24] 2273 	pop	ar0
      000AFA D0 01            [24] 2274 	pop	ar1
      000AFC D0 02            [24] 2275 	pop	ar2
      000AFE D0 03            [24] 2276 	pop	ar3
      000B00 D0 04            [24] 2277 	pop	ar4
      000B02 D0 05            [24] 2278 	pop	ar5
      000B04 D0 06            [24] 2279 	pop	ar6
      000B06 D0 07            [24] 2280 	pop	ar7
                                   2281 ;	main.c:290: printf_tiny("\n\rFree Spaces in buffer = %d\n\r",(buff_size[k]));
      000B08 8E 82            [24] 2282 	mov	dpl,r6
      000B0A 8F 83            [24] 2283 	mov	dph,r7
      000B0C E0               [24] 2284 	movx	a,@dptr
      000B0D FE               [12] 2285 	mov	r6,a
      000B0E A3               [24] 2286 	inc	dptr
      000B0F E0               [24] 2287 	movx	a,@dptr
      000B10 FF               [12] 2288 	mov	r7,a
      000B11 C0 05            [24] 2289 	push	ar5
      000B13 C0 04            [24] 2290 	push	ar4
      000B15 C0 03            [24] 2291 	push	ar3
      000B17 C0 02            [24] 2292 	push	ar2
      000B19 C0 01            [24] 2293 	push	ar1
      000B1B C0 00            [24] 2294 	push	ar0
      000B1D C0 06            [24] 2295 	push	ar6
      000B1F C0 07            [24] 2296 	push	ar7
      000B21 74r16            [12] 2297 	mov	a,#___str_41
      000B23 C0 E0            [24] 2298 	push	acc
      000B25 74s06            [12] 2299 	mov	a,#(___str_41 >> 8)
      000B27 C0 E0            [24] 2300 	push	acc
      000B29 12r00r00         [24] 2301 	lcall	_printf_tiny
      000B2C E5 81            [12] 2302 	mov	a,sp
      000B2E 24 FC            [12] 2303 	add	a,#0xfc
      000B30 F5 81            [12] 2304 	mov	sp,a
                                   2305 ;	main.c:291: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000B32 74r35            [12] 2306 	mov	a,#___str_42
      000B34 C0 E0            [24] 2307 	push	acc
      000B36 74s06            [12] 2308 	mov	a,#(___str_42 >> 8)
      000B38 C0 E0            [24] 2309 	push	acc
      000B3A 12r00r00         [24] 2310 	lcall	_printf_tiny
      000B3D 15 81            [12] 2311 	dec	sp
      000B3F 15 81            [12] 2312 	dec	sp
      000B41 D0 00            [24] 2313 	pop	ar0
      000B43 D0 01            [24] 2314 	pop	ar1
      000B45 D0 02            [24] 2315 	pop	ar2
      000B47 D0 03            [24] 2316 	pop	ar3
      000B49 D0 04            [24] 2317 	pop	ar4
      000B4B D0 05            [24] 2318 	pop	ar5
                                   2319 ;	main.c:356: goto ishaan;
      000B4D D0 01            [24] 2320 	pop	ar1
      000B4F D0 00            [24] 2321 	pop	ar0
                                   2322 ;	main.c:291: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000B51                       2323 00188$:
                                   2324 ;	main.c:281: for(k=2; k<=(i+2); k++)
      000B51 0A               [12] 2325 	inc	r2
      000B52 BA 00 01         [24] 2326 	cjne	r2,#0x00,00415$
      000B55 0B               [12] 2327 	inc	r3
      000B56                       2328 00415$:
      000B56 02r09r7A         [24] 2329 	ljmp	00187$
      000B59                       2330 00141$:
                                   2331 ;	main.c:295: printf_tiny("\n\rNumber of storage characters = %d\n\r",char_stored);
      000B59 90r00r67         [24] 2332 	mov	dptr,#_main_char_stored_65536_49
      000B5C E0               [24] 2333 	movx	a,@dptr
      000B5D FE               [12] 2334 	mov	r6,a
      000B5E A3               [24] 2335 	inc	dptr
      000B5F E0               [24] 2336 	movx	a,@dptr
      000B60 FF               [12] 2337 	mov	r7,a
      000B61 C0 07            [24] 2338 	push	ar7
      000B63 C0 06            [24] 2339 	push	ar6
      000B65 C0 05            [24] 2340 	push	ar5
      000B67 C0 04            [24] 2341 	push	ar4
      000B69 C0 01            [24] 2342 	push	ar1
      000B6B C0 00            [24] 2343 	push	ar0
      000B6D C0 06            [24] 2344 	push	ar6
      000B6F C0 07            [24] 2345 	push	ar7
      000B71 74rC1            [12] 2346 	mov	a,#___str_46
      000B73 C0 E0            [24] 2347 	push	acc
      000B75 74s06            [12] 2348 	mov	a,#(___str_46 >> 8)
      000B77 C0 E0            [24] 2349 	push	acc
      000B79 12r00r00         [24] 2350 	lcall	_printf_tiny
      000B7C E5 81            [12] 2351 	mov	a,sp
      000B7E 24 FC            [12] 2352 	add	a,#0xfc
      000B80 F5 81            [12] 2353 	mov	sp,a
      000B82 D0 00            [24] 2354 	pop	ar0
      000B84 D0 01            [24] 2355 	pop	ar1
                                   2356 ;	main.c:296: printf_tiny("\n\rTotal number of characters received = %d\n\r",total_char);
      000B86 C0 01            [24] 2357 	push	ar1
      000B88 C0 00            [24] 2358 	push	ar0
      000B8A C0 00            [24] 2359 	push	ar0
      000B8C C0 01            [24] 2360 	push	ar1
      000B8E 74rE7            [12] 2361 	mov	a,#___str_47
      000B90 C0 E0            [24] 2362 	push	acc
      000B92 74s06            [12] 2363 	mov	a,#(___str_47 >> 8)
      000B94 C0 E0            [24] 2364 	push	acc
      000B96 12r00r00         [24] 2365 	lcall	_printf_tiny
      000B99 E5 81            [12] 2366 	mov	a,sp
      000B9B 24 FC            [12] 2367 	add	a,#0xfc
      000B9D F5 81            [12] 2368 	mov	sp,a
                                   2369 ;	main.c:297: printf_tiny("\n\rTotal number of buffers that were allocated since the start of the program = %d\n\r",(j));
      000B9F C0*00            [24] 2370 	push	_main_sloc0_1_0
      000BA1 C0*01            [24] 2371 	push	(_main_sloc0_1_0 + 1)
      000BA3 74r14            [12] 2372 	mov	a,#___str_48
      000BA5 C0 E0            [24] 2373 	push	acc
      000BA7 74s07            [12] 2374 	mov	a,#(___str_48 >> 8)
      000BA9 C0 E0            [24] 2375 	push	acc
      000BAB 12r00r00         [24] 2376 	lcall	_printf_tiny
      000BAE E5 81            [12] 2377 	mov	a,sp
      000BB0 24 FC            [12] 2378 	add	a,#0xfc
      000BB2 F5 81            [12] 2379 	mov	sp,a
      000BB4 D0 00            [24] 2380 	pop	ar0
      000BB6 D0 01            [24] 2381 	pop	ar1
      000BB8 D0 04            [24] 2382 	pop	ar4
      000BBA D0 05            [24] 2383 	pop	ar5
      000BBC D0 06            [24] 2384 	pop	ar6
      000BBE D0 07            [24] 2385 	pop	ar7
                                   2386 ;	main.c:298: printf_tiny("\n\rTotal storage characters stored since last '?' = %d\n\r",char_stored);
      000BC0 C0 05            [24] 2387 	push	ar5
      000BC2 C0 04            [24] 2388 	push	ar4
      000BC4 C0 01            [24] 2389 	push	ar1
      000BC6 C0 00            [24] 2390 	push	ar0
      000BC8 C0 06            [24] 2391 	push	ar6
      000BCA C0 07            [24] 2392 	push	ar7
      000BCC 74r68            [12] 2393 	mov	a,#___str_49
      000BCE C0 E0            [24] 2394 	push	acc
      000BD0 74s07            [12] 2395 	mov	a,#(___str_49 >> 8)
      000BD2 C0 E0            [24] 2396 	push	acc
      000BD4 12r00r00         [24] 2397 	lcall	_printf_tiny
      000BD7 E5 81            [12] 2398 	mov	a,sp
      000BD9 24 FC            [12] 2399 	add	a,#0xfc
      000BDB F5 81            [12] 2400 	mov	sp,a
                                   2401 ;	main.c:299: printf_tiny("\n\r-----------------------------------------------------------------------\n\r");
      000BDD 74r35            [12] 2402 	mov	a,#___str_42
      000BDF C0 E0            [24] 2403 	push	acc
      000BE1 74s06            [12] 2404 	mov	a,#(___str_42 >> 8)
      000BE3 C0 E0            [24] 2405 	push	acc
      000BE5 12r00r00         [24] 2406 	lcall	_printf_tiny
      000BE8 15 81            [12] 2407 	dec	sp
      000BEA 15 81            [12] 2408 	dec	sp
      000BEC D0 00            [24] 2409 	pop	ar0
      000BEE D0 01            [24] 2410 	pop	ar1
      000BF0 D0 04            [24] 2411 	pop	ar4
      000BF2 D0 05            [24] 2412 	pop	ar5
                                   2413 ;	main.c:300: char_stored=0;
      000BF4 90r00r67         [24] 2414 	mov	dptr,#_main_char_stored_65536_49
      000BF7 E4               [12] 2415 	clr	a
      000BF8 F0               [24] 2416 	movx	@dptr,a
      000BF9 A3               [24] 2417 	inc	dptr
      000BFA F0               [24] 2418 	movx	@dptr,a
                                   2419 ;	main.c:301: count=0;
      000BFB 90r00r69         [24] 2420 	mov	dptr,#_main_count_65536_49
      000BFE F0               [24] 2421 	movx	@dptr,a
      000BFF A3               [24] 2422 	inc	dptr
      000C00 F0               [24] 2423 	movx	@dptr,a
      000C01 02r02rB5         [24] 2424 	ljmp	00119$
      000C04                       2425 00161$:
                                   2426 ;	main.c:304: else if(input_char == '=')
      000C04 74 3D            [12] 2427 	mov	a,#0x3d
      000C06 B5*04 02         [24] 2428 	cjne	a,_main_sloc2_1_0,00416$
      000C09 80 03            [24] 2429 	sjmp	00417$
      000C0B                       2430 00416$:
      000C0B 02r0Dr3A         [24] 2431 	ljmp	00158$
      000C0E                       2432 00417$:
                                   2433 ;	main.c:306: DEBUGPORT(4);
      000C0E 75 82 04         [24] 2434 	mov	dpl,#0x04
      000C11 C0 05            [24] 2435 	push	ar5
      000C13 C0 04            [24] 2436 	push	ar4
      000C15 C0 01            [24] 2437 	push	ar1
      000C17 C0 00            [24] 2438 	push	ar0
      000C19 12r00r07         [24] 2439 	lcall	_dataout
                                   2440 ;	main.c:307: printf_tiny("\n\rContents of Buffer 0\n\r");
      000C1C 74rA0            [12] 2441 	mov	a,#___str_50
      000C1E C0 E0            [24] 2442 	push	acc
      000C20 74s07            [12] 2443 	mov	a,#(___str_50 >> 8)
      000C22 C0 E0            [24] 2444 	push	acc
      000C24 12r00r00         [24] 2445 	lcall	_printf_tiny
      000C27 15 81            [12] 2446 	dec	sp
      000C29 15 81            [12] 2447 	dec	sp
      000C2B D0 00            [24] 2448 	pop	ar0
      000C2D D0 01            [24] 2449 	pop	ar1
      000C2F D0 04            [24] 2450 	pop	ar4
      000C31 D0 05            [24] 2451 	pop	ar5
                                   2452 ;	main.c:309: for((buff_0_count)=0; (buff_0_count)<char_stored; (buff_0_count)++)
      000C33 90r00r67         [24] 2453 	mov	dptr,#_main_char_stored_65536_49
      000C36 E0               [24] 2454 	movx	a,@dptr
      000C37 F5*07            [12] 2455 	mov	_main_sloc4_1_0,a
      000C39 A3               [24] 2456 	inc	dptr
      000C3A E0               [24] 2457 	movx	a,@dptr
      000C3B F5*08            [12] 2458 	mov	(_main_sloc4_1_0 + 1),a
      000C3D 7A 00            [12] 2459 	mov	r2,#0x00
      000C3F 7B 00            [12] 2460 	mov	r3,#0x00
      000C41                       2461 00190$:
      000C41 C3               [12] 2462 	clr	c
      000C42 EA               [12] 2463 	mov	a,r2
      000C43 95*07            [12] 2464 	subb	a,_main_sloc4_1_0
      000C45 EB               [12] 2465 	mov	a,r3
      000C46 95*08            [12] 2466 	subb	a,(_main_sloc4_1_0 + 1)
      000C48 40 03            [24] 2467 	jc	00418$
      000C4A 02r02rB5         [24] 2468 	ljmp	00119$
      000C4D                       2469 00418$:
                                   2470 ;	main.c:311: if(buff_0_count==0)
      000C4D EA               [12] 2471 	mov	a,r2
      000C4E 4B               [12] 2472 	orl	a,r3
      000C4F 70 4A            [24] 2473 	jnz	00148$
                                   2474 ;	main.c:313: printf_tiny("0x%x>> %x",(uint16_t)(buffer_0+buff_0_count),*((buffer_0)+(buff_0_count)));
      000C51 C0 00            [24] 2475 	push	ar0
      000C53 C0 01            [24] 2476 	push	ar1
      000C55 EA               [12] 2477 	mov	a,r2
      000C56 2C               [12] 2478 	add	a,r4
      000C57 F8               [12] 2479 	mov	r0,a
      000C58 EB               [12] 2480 	mov	a,r3
      000C59 3D               [12] 2481 	addc	a,r5
      000C5A F9               [12] 2482 	mov	r1,a
      000C5B 88 82            [24] 2483 	mov	dpl,r0
      000C5D 89 83            [24] 2484 	mov	dph,r1
      000C5F E0               [24] 2485 	movx	a,@dptr
      000C60 FF               [12] 2486 	mov	r7,a
      000C61 7E 00            [12] 2487 	mov	r6,#0x00
      000C63 C0 05            [24] 2488 	push	ar5
      000C65 C0 04            [24] 2489 	push	ar4
      000C67 C0 03            [24] 2490 	push	ar3
      000C69 C0 02            [24] 2491 	push	ar2
      000C6B C0 01            [24] 2492 	push	ar1
      000C6D C0 00            [24] 2493 	push	ar0
      000C6F C0 07            [24] 2494 	push	ar7
      000C71 C0 06            [24] 2495 	push	ar6
      000C73 C0 00            [24] 2496 	push	ar0
      000C75 C0 01            [24] 2497 	push	ar1
      000C77 74rB9            [12] 2498 	mov	a,#___str_51
      000C79 C0 E0            [24] 2499 	push	acc
      000C7B 74s07            [12] 2500 	mov	a,#(___str_51 >> 8)
      000C7D C0 E0            [24] 2501 	push	acc
      000C7F 12r00r00         [24] 2502 	lcall	_printf_tiny
      000C82 E5 81            [12] 2503 	mov	a,sp
      000C84 24 FA            [12] 2504 	add	a,#0xfa
      000C86 F5 81            [12] 2505 	mov	sp,a
      000C88 D0 00            [24] 2506 	pop	ar0
      000C8A D0 01            [24] 2507 	pop	ar1
      000C8C D0 02            [24] 2508 	pop	ar2
      000C8E D0 03            [24] 2509 	pop	ar3
      000C90 D0 04            [24] 2510 	pop	ar4
      000C92 D0 05            [24] 2511 	pop	ar5
      000C94 D0 01            [24] 2512 	pop	ar1
      000C96 D0 00            [24] 2513 	pop	ar0
      000C98 02r0Dr32         [24] 2514 	ljmp	00191$
      000C9B                       2515 00148$:
                                   2516 ;	main.c:315: else if((buff_0_count%16)!=0)
      000C9B 74 0F            [12] 2517 	mov	a,#0x0f
      000C9D 5A               [12] 2518 	anl	a,r2
      000C9E FE               [12] 2519 	mov	r6,a
      000C9F 7F 00            [12] 2520 	mov	r7,#0x00
      000CA1 4F               [12] 2521 	orl	a,r7
      000CA2 60 43            [24] 2522 	jz	00145$
                                   2523 ;	main.c:317: printf_tiny(" %x",*((buffer_0)+(buff_0_count)));
      000CA4 C0 00            [24] 2524 	push	ar0
      000CA6 C0 01            [24] 2525 	push	ar1
      000CA8 EA               [12] 2526 	mov	a,r2
      000CA9 2C               [12] 2527 	add	a,r4
      000CAA F5 82            [12] 2528 	mov	dpl,a
      000CAC EB               [12] 2529 	mov	a,r3
      000CAD 3D               [12] 2530 	addc	a,r5
      000CAE F5 83            [12] 2531 	mov	dph,a
      000CB0 E0               [24] 2532 	movx	a,@dptr
      000CB1 F8               [12] 2533 	mov	r0,a
      000CB2 79 00            [12] 2534 	mov	r1,#0x00
      000CB4 C0 05            [24] 2535 	push	ar5
      000CB6 C0 04            [24] 2536 	push	ar4
      000CB8 C0 03            [24] 2537 	push	ar3
      000CBA C0 02            [24] 2538 	push	ar2
      000CBC C0 01            [24] 2539 	push	ar1
      000CBE C0 00            [24] 2540 	push	ar0
      000CC0 C0 00            [24] 2541 	push	ar0
      000CC2 C0 01            [24] 2542 	push	ar1
      000CC4 74rC3            [12] 2543 	mov	a,#___str_52
      000CC6 C0 E0            [24] 2544 	push	acc
      000CC8 74s07            [12] 2545 	mov	a,#(___str_52 >> 8)
      000CCA C0 E0            [24] 2546 	push	acc
      000CCC 12r00r00         [24] 2547 	lcall	_printf_tiny
      000CCF E5 81            [12] 2548 	mov	a,sp
      000CD1 24 FC            [12] 2549 	add	a,#0xfc
      000CD3 F5 81            [12] 2550 	mov	sp,a
      000CD5 D0 00            [24] 2551 	pop	ar0
      000CD7 D0 01            [24] 2552 	pop	ar1
      000CD9 D0 02            [24] 2553 	pop	ar2
      000CDB D0 03            [24] 2554 	pop	ar3
      000CDD D0 04            [24] 2555 	pop	ar4
      000CDF D0 05            [24] 2556 	pop	ar5
      000CE1 D0 01            [24] 2557 	pop	ar1
      000CE3 D0 00            [24] 2558 	pop	ar0
      000CE5 80 4B            [24] 2559 	sjmp	00191$
      000CE7                       2560 00145$:
                                   2561 ;	main.c:319: else if(buff_0_count%16==0)
      000CE7 EE               [12] 2562 	mov	a,r6
      000CE8 4F               [12] 2563 	orl	a,r7
      000CE9 70 47            [24] 2564 	jnz	00191$
                                   2565 ;	main.c:321: printf_tiny("\n\r0x%x>> %x",(uint16_t)(buffer_0+buff_0_count),*((buffer_0)+(buff_0_count)));
      000CEB C0 00            [24] 2566 	push	ar0
      000CED C0 01            [24] 2567 	push	ar1
      000CEF EA               [12] 2568 	mov	a,r2
      000CF0 2C               [12] 2569 	add	a,r4
      000CF1 FE               [12] 2570 	mov	r6,a
      000CF2 EB               [12] 2571 	mov	a,r3
      000CF3 3D               [12] 2572 	addc	a,r5
      000CF4 FF               [12] 2573 	mov	r7,a
      000CF5 8E 82            [24] 2574 	mov	dpl,r6
      000CF7 8F 83            [24] 2575 	mov	dph,r7
      000CF9 E0               [24] 2576 	movx	a,@dptr
      000CFA F8               [12] 2577 	mov	r0,a
      000CFB 79 00            [12] 2578 	mov	r1,#0x00
      000CFD C0 05            [24] 2579 	push	ar5
      000CFF C0 04            [24] 2580 	push	ar4
      000D01 C0 03            [24] 2581 	push	ar3
      000D03 C0 02            [24] 2582 	push	ar2
      000D05 C0 01            [24] 2583 	push	ar1
      000D07 C0 00            [24] 2584 	push	ar0
      000D09 C0 00            [24] 2585 	push	ar0
      000D0B C0 01            [24] 2586 	push	ar1
      000D0D C0 06            [24] 2587 	push	ar6
      000D0F C0 07            [24] 2588 	push	ar7
      000D11 74rC7            [12] 2589 	mov	a,#___str_53
      000D13 C0 E0            [24] 2590 	push	acc
      000D15 74s07            [12] 2591 	mov	a,#(___str_53 >> 8)
      000D17 C0 E0            [24] 2592 	push	acc
      000D19 12r00r00         [24] 2593 	lcall	_printf_tiny
      000D1C E5 81            [12] 2594 	mov	a,sp
      000D1E 24 FA            [12] 2595 	add	a,#0xfa
      000D20 F5 81            [12] 2596 	mov	sp,a
      000D22 D0 00            [24] 2597 	pop	ar0
      000D24 D0 01            [24] 2598 	pop	ar1
      000D26 D0 02            [24] 2599 	pop	ar2
      000D28 D0 03            [24] 2600 	pop	ar3
      000D2A D0 04            [24] 2601 	pop	ar4
      000D2C D0 05            [24] 2602 	pop	ar5
                                   2603 ;	main.c:356: goto ishaan;
      000D2E D0 01            [24] 2604 	pop	ar1
      000D30 D0 00            [24] 2605 	pop	ar0
                                   2606 ;	main.c:321: printf_tiny("\n\r0x%x>> %x",(uint16_t)(buffer_0+buff_0_count),*((buffer_0)+(buff_0_count)));
      000D32                       2607 00191$:
                                   2608 ;	main.c:309: for((buff_0_count)=0; (buff_0_count)<char_stored; (buff_0_count)++)
      000D32 0A               [12] 2609 	inc	r2
      000D33 BA 00 01         [24] 2610 	cjne	r2,#0x00,00422$
      000D36 0B               [12] 2611 	inc	r3
      000D37                       2612 00422$:
      000D37 02r0Cr41         [24] 2613 	ljmp	00190$
      000D3A                       2614 00158$:
                                   2615 ;	main.c:327: else if (input_char == '@')
      000D3A 74 40            [12] 2616 	mov	a,#0x40
      000D3C B5*04 02         [24] 2617 	cjne	a,_main_sloc2_1_0,00423$
      000D3F 80 03            [24] 2618 	sjmp	00424$
      000D41                       2619 00423$:
      000D41 02r0Er95         [24] 2620 	ljmp	00155$
      000D44                       2621 00424$:
                                   2622 ;	main.c:329: DEBUGPORT(5);
      000D44 75 82 05         [24] 2623 	mov	dpl,#0x05
      000D47 C0 05            [24] 2624 	push	ar5
      000D49 C0 04            [24] 2625 	push	ar4
      000D4B C0 01            [24] 2626 	push	ar1
      000D4D C0 00            [24] 2627 	push	ar0
      000D4F 12r00r07         [24] 2628 	lcall	_dataout
                                   2629 ;	main.c:330: printf_tiny("\n\rFreeing Buffer 0 \n\r");
      000D52 74rD3            [12] 2630 	mov	a,#___str_54
      000D54 C0 E0            [24] 2631 	push	acc
      000D56 74s07            [12] 2632 	mov	a,#(___str_54 >> 8)
      000D58 C0 E0            [24] 2633 	push	acc
      000D5A 12r00r00         [24] 2634 	lcall	_printf_tiny
      000D5D 15 81            [12] 2635 	dec	sp
      000D5F 15 81            [12] 2636 	dec	sp
      000D61 D0 00            [24] 2637 	pop	ar0
      000D63 D0 01            [24] 2638 	pop	ar1
      000D65 D0 04            [24] 2639 	pop	ar4
      000D67 D0 05            [24] 2640 	pop	ar5
                                   2641 ;	main.c:331: free(buffer_0);
      000D69 8C 06            [24] 2642 	mov	ar6,r4
      000D6B 8D 07            [24] 2643 	mov	ar7,r5
      000D6D 7B 00            [12] 2644 	mov	r3,#0x00
      000D6F 8E 82            [24] 2645 	mov	dpl,r6
      000D71 8F 83            [24] 2646 	mov	dph,r7
      000D73 8B F0            [24] 2647 	mov	b,r3
      000D75 C0 05            [24] 2648 	push	ar5
      000D77 C0 04            [24] 2649 	push	ar4
      000D79 C0 01            [24] 2650 	push	ar1
      000D7B C0 00            [24] 2651 	push	ar0
      000D7D 12r00r00         [24] 2652 	lcall	_free
                                   2653 ;	main.c:332: printf_tiny("\n\rBuffer 0 is free\n\r");
      000D80 74rE9            [12] 2654 	mov	a,#___str_55
      000D82 C0 E0            [24] 2655 	push	acc
      000D84 74s07            [12] 2656 	mov	a,#(___str_55 >> 8)
      000D86 C0 E0            [24] 2657 	push	acc
      000D88 12r00r00         [24] 2658 	lcall	_printf_tiny
      000D8B 15 81            [12] 2659 	dec	sp
      000D8D 15 81            [12] 2660 	dec	sp
                                   2661 ;	main.c:334: printf_tiny("\n\rFreeing Buffer 1 \n\r");
      000D8F 74rFE            [12] 2662 	mov	a,#___str_56
      000D91 C0 E0            [24] 2663 	push	acc
      000D93 74s07            [12] 2664 	mov	a,#(___str_56 >> 8)
      000D95 C0 E0            [24] 2665 	push	acc
      000D97 12r00r00         [24] 2666 	lcall	_printf_tiny
      000D9A 15 81            [12] 2667 	dec	sp
      000D9C 15 81            [12] 2668 	dec	sp
                                   2669 ;	main.c:335: free(buffer_1);
      000D9E 90r00r01         [24] 2670 	mov	dptr,#_main_buffer_1_65536_49
      000DA1 E0               [24] 2671 	movx	a,@dptr
      000DA2 FE               [12] 2672 	mov	r6,a
      000DA3 A3               [24] 2673 	inc	dptr
      000DA4 E0               [24] 2674 	movx	a,@dptr
      000DA5 FF               [12] 2675 	mov	r7,a
      000DA6 7B 00            [12] 2676 	mov	r3,#0x00
      000DA8 8E 82            [24] 2677 	mov	dpl,r6
      000DAA 8F 83            [24] 2678 	mov	dph,r7
      000DAC 8B F0            [24] 2679 	mov	b,r3
      000DAE 12r00r00         [24] 2680 	lcall	_free
                                   2681 ;	main.c:336: printf_tiny("\n\rBuffer 1 is free\n\r");
      000DB1 74r14            [12] 2682 	mov	a,#___str_57
      000DB3 C0 E0            [24] 2683 	push	acc
      000DB5 74s08            [12] 2684 	mov	a,#(___str_57 >> 8)
      000DB7 C0 E0            [24] 2685 	push	acc
      000DB9 12r00r00         [24] 2686 	lcall	_printf_tiny
      000DBC 15 81            [12] 2687 	dec	sp
      000DBE 15 81            [12] 2688 	dec	sp
      000DC0 D0 00            [24] 2689 	pop	ar0
      000DC2 D0 01            [24] 2690 	pop	ar1
      000DC4 D0 04            [24] 2691 	pop	ar4
      000DC6 D0 05            [24] 2692 	pop	ar5
                                   2693 ;	main.c:338: for(total_buff_count=2; (total_buff_count)<(i+2); (total_buff_count)++)
      000DC8 74 02            [12] 2694 	mov	a,#0x02
      000DCA 25*02            [12] 2695 	add	a,_main_sloc1_1_0
      000DCC F5*07            [12] 2696 	mov	_main_sloc4_1_0,a
      000DCE E4               [12] 2697 	clr	a
      000DCF 35*03            [12] 2698 	addc	a,(_main_sloc1_1_0 + 1)
      000DD1 F5*08            [12] 2699 	mov	(_main_sloc4_1_0 + 1),a
      000DD3 7A 02            [12] 2700 	mov	r2,#0x02
      000DD5 7B 00            [12] 2701 	mov	r3,#0x00
      000DD7                       2702 00193$:
      000DD7 C0 00            [24] 2703 	push	ar0
      000DD9 C0 01            [24] 2704 	push	ar1
      000DDB A8*07            [24] 2705 	mov	r0,_main_sloc4_1_0
      000DDD A9*08            [24] 2706 	mov	r1,(_main_sloc4_1_0 + 1)
      000DDF C3               [12] 2707 	clr	c
      000DE0 EA               [12] 2708 	mov	a,r2
      000DE1 98               [12] 2709 	subb	a,r0
      000DE2 EB               [12] 2710 	mov	a,r3
      000DE3 99               [12] 2711 	subb	a,r1
      000DE4 D0 01            [24] 2712 	pop	ar1
      000DE6 D0 00            [24] 2713 	pop	ar0
      000DE8 40 03            [24] 2714 	jc	00425$
      000DEA 02r0Er7F         [24] 2715 	ljmp	00151$
      000DED                       2716 00425$:
                                   2717 ;	main.c:340: printf_tiny("\n\rFreeing buffer_%d \n\r",total_buff_count);
      000DED C0 00            [24] 2718 	push	ar0
      000DEF C0 01            [24] 2719 	push	ar1
      000DF1 C0 05            [24] 2720 	push	ar5
      000DF3 C0 04            [24] 2721 	push	ar4
      000DF5 C0 03            [24] 2722 	push	ar3
      000DF7 C0 02            [24] 2723 	push	ar2
      000DF9 C0 01            [24] 2724 	push	ar1
      000DFB C0 00            [24] 2725 	push	ar0
      000DFD C0 02            [24] 2726 	push	ar2
      000DFF C0 03            [24] 2727 	push	ar3
      000E01 74r29            [12] 2728 	mov	a,#___str_58
      000E03 C0 E0            [24] 2729 	push	acc
      000E05 74s08            [12] 2730 	mov	a,#(___str_58 >> 8)
      000E07 C0 E0            [24] 2731 	push	acc
      000E09 12r00r00         [24] 2732 	lcall	_printf_tiny
      000E0C E5 81            [12] 2733 	mov	a,sp
      000E0E 24 FC            [12] 2734 	add	a,#0xfc
      000E10 F5 81            [12] 2735 	mov	sp,a
      000E12 D0 00            [24] 2736 	pop	ar0
      000E14 D0 01            [24] 2737 	pop	ar1
      000E16 D0 02            [24] 2738 	pop	ar2
      000E18 D0 03            [24] 2739 	pop	ar3
                                   2740 ;	main.c:341: free(buffer_n[total_buff_count]);
      000E1A EA               [12] 2741 	mov	a,r2
      000E1B 2A               [12] 2742 	add	a,r2
      000E1C F8               [12] 2743 	mov	r0,a
      000E1D EB               [12] 2744 	mov	a,r3
      000E1E 33               [12] 2745 	rlc	a
      000E1F F9               [12] 2746 	mov	r1,a
      000E20 E8               [12] 2747 	mov	a,r0
      000E21 24r03            [12] 2748 	add	a,#_main_buffer_n_65536_49
      000E23 F5 82            [12] 2749 	mov	dpl,a
      000E25 E9               [12] 2750 	mov	a,r1
      000E26 34s00            [12] 2751 	addc	a,#(_main_buffer_n_65536_49 >> 8)
      000E28 F5 83            [12] 2752 	mov	dph,a
      000E2A E0               [24] 2753 	movx	a,@dptr
      000E2B F8               [12] 2754 	mov	r0,a
      000E2C A3               [24] 2755 	inc	dptr
      000E2D E0               [24] 2756 	movx	a,@dptr
      000E2E F9               [12] 2757 	mov	r1,a
      000E2F 7F 00            [12] 2758 	mov	r7,#0x00
      000E31 88 82            [24] 2759 	mov	dpl,r0
      000E33 89 83            [24] 2760 	mov	dph,r1
      000E35 8F F0            [24] 2761 	mov	b,r7
      000E37 C0 03            [24] 2762 	push	ar3
      000E39 C0 02            [24] 2763 	push	ar2
      000E3B C0 01            [24] 2764 	push	ar1
      000E3D C0 00            [24] 2765 	push	ar0
      000E3F 12r00r00         [24] 2766 	lcall	_free
      000E42 D0 00            [24] 2767 	pop	ar0
      000E44 D0 01            [24] 2768 	pop	ar1
      000E46 D0 02            [24] 2769 	pop	ar2
      000E48 D0 03            [24] 2770 	pop	ar3
                                   2771 ;	main.c:342: printf_tiny("\n\rBuffer %d is free \n\r",total_buff_count);
      000E4A C0 03            [24] 2772 	push	ar3
      000E4C C0 02            [24] 2773 	push	ar2
      000E4E C0 01            [24] 2774 	push	ar1
      000E50 C0 00            [24] 2775 	push	ar0
      000E52 C0 02            [24] 2776 	push	ar2
      000E54 C0 03            [24] 2777 	push	ar3
      000E56 74r40            [12] 2778 	mov	a,#___str_59
      000E58 C0 E0            [24] 2779 	push	acc
      000E5A 74s08            [12] 2780 	mov	a,#(___str_59 >> 8)
      000E5C C0 E0            [24] 2781 	push	acc
      000E5E 12r00r00         [24] 2782 	lcall	_printf_tiny
      000E61 E5 81            [12] 2783 	mov	a,sp
      000E63 24 FC            [12] 2784 	add	a,#0xfc
      000E65 F5 81            [12] 2785 	mov	sp,a
      000E67 D0 00            [24] 2786 	pop	ar0
      000E69 D0 01            [24] 2787 	pop	ar1
      000E6B D0 02            [24] 2788 	pop	ar2
      000E6D D0 03            [24] 2789 	pop	ar3
      000E6F D0 04            [24] 2790 	pop	ar4
      000E71 D0 05            [24] 2791 	pop	ar5
                                   2792 ;	main.c:338: for(total_buff_count=2; (total_buff_count)<(i+2); (total_buff_count)++)
      000E73 0A               [12] 2793 	inc	r2
      000E74 BA 00 01         [24] 2794 	cjne	r2,#0x00,00426$
      000E77 0B               [12] 2795 	inc	r3
      000E78                       2796 00426$:
      000E78 D0 01            [24] 2797 	pop	ar1
      000E7A D0 00            [24] 2798 	pop	ar0
      000E7C 02r0DrD7         [24] 2799 	ljmp	00193$
      000E7F                       2800 00151$:
                                   2801 ;	main.c:344: main();
      000E7F C0 05            [24] 2802 	push	ar5
      000E81 C0 04            [24] 2803 	push	ar4
      000E83 C0 01            [24] 2804 	push	ar1
      000E85 C0 00            [24] 2805 	push	ar0
      000E87 12r00r13         [24] 2806 	lcall	_main
      000E8A D0 00            [24] 2807 	pop	ar0
      000E8C D0 01            [24] 2808 	pop	ar1
      000E8E D0 04            [24] 2809 	pop	ar4
      000E90 D0 05            [24] 2810 	pop	ar5
      000E92 02r02rB5         [24] 2811 	ljmp	00119$
      000E95                       2812 00155$:
                                   2813 ;	main.c:346: else if (input_char == '#')
      000E95 74 23            [12] 2814 	mov	a,#0x23
      000E97 B5*04 02         [24] 2815 	cjne	a,_main_sloc2_1_0,00427$
      000E9A 80 03            [24] 2816 	sjmp	00428$
      000E9C                       2817 00427$:
      000E9C 02r02rB5         [24] 2818 	ljmp	00119$
      000E9F                       2819 00428$:
                                   2820 ;	main.c:348: printf_tiny("\n\r OPTIONS \n\r");
      000E9F C0 05            [24] 2821 	push	ar5
      000EA1 C0 04            [24] 2822 	push	ar4
      000EA3 C0 01            [24] 2823 	push	ar1
      000EA5 C0 00            [24] 2824 	push	ar0
      000EA7 74r66            [12] 2825 	mov	a,#___str_9
      000EA9 C0 E0            [24] 2826 	push	acc
      000EAB 74s01            [12] 2827 	mov	a,#(___str_9 >> 8)
      000EAD C0 E0            [24] 2828 	push	acc
      000EAF 12r00r00         [24] 2829 	lcall	_printf_tiny
      000EB2 15 81            [12] 2830 	dec	sp
      000EB4 15 81            [12] 2831 	dec	sp
                                   2832 ;	main.c:349: printf_tiny("You can enter characters to be stored in buffer 0\n\r");
      000EB6 74r74            [12] 2833 	mov	a,#___str_10
      000EB8 C0 E0            [24] 2834 	push	acc
      000EBA 74s01            [12] 2835 	mov	a,#(___str_10 >> 8)
      000EBC C0 E0            [24] 2836 	push	acc
      000EBE 12r00r00         [24] 2837 	lcall	_printf_tiny
      000EC1 15 81            [12] 2838 	dec	sp
      000EC3 15 81            [12] 2839 	dec	sp
                                   2840 ;	main.c:350: printf_tiny("Press + to create a new buffer of size between 30 and 300 bytes\n\r");
      000EC5 74rA8            [12] 2841 	mov	a,#___str_11
      000EC7 C0 E0            [24] 2842 	push	acc
      000EC9 74s01            [12] 2843 	mov	a,#(___str_11 >> 8)
      000ECB C0 E0            [24] 2844 	push	acc
      000ECD 12r00r00         [24] 2845 	lcall	_printf_tiny
      000ED0 15 81            [12] 2846 	dec	sp
      000ED2 15 81            [12] 2847 	dec	sp
                                   2848 ;	main.c:351: printf_tiny("Press - to delete a buffer.\n\r");
      000ED4 74rEA            [12] 2849 	mov	a,#___str_12
      000ED6 C0 E0            [24] 2850 	push	acc
      000ED8 74s01            [12] 2851 	mov	a,#(___str_12 >> 8)
      000EDA C0 E0            [24] 2852 	push	acc
      000EDC 12r00r00         [24] 2853 	lcall	_printf_tiny
      000EDF 15 81            [12] 2854 	dec	sp
      000EE1 15 81            [12] 2855 	dec	sp
                                   2856 ;	main.c:352: printf_tiny("Press ? to generate a heap report.\n\r");
      000EE3 74r08            [12] 2857 	mov	a,#___str_13
      000EE5 C0 E0            [24] 2858 	push	acc
      000EE7 74s02            [12] 2859 	mov	a,#(___str_13 >> 8)
      000EE9 C0 E0            [24] 2860 	push	acc
      000EEB 12r00r00         [24] 2861 	lcall	_printf_tiny
      000EEE 15 81            [12] 2862 	dec	sp
      000EF0 15 81            [12] 2863 	dec	sp
                                   2864 ;	main.c:353: printf_tiny("Press = to display current contents of buffer 0.\n\r");
      000EF2 74r2D            [12] 2865 	mov	a,#___str_14
      000EF4 C0 E0            [24] 2866 	push	acc
      000EF6 74s02            [12] 2867 	mov	a,#(___str_14 >> 8)
      000EF8 C0 E0            [24] 2868 	push	acc
      000EFA 12r00r00         [24] 2869 	lcall	_printf_tiny
      000EFD 15 81            [12] 2870 	dec	sp
      000EFF 15 81            [12] 2871 	dec	sp
                                   2872 ;	main.c:354: printf_tiny("Press @ to free all buffers and start program again.\n\r");
      000F01 74r60            [12] 2873 	mov	a,#___str_15
      000F03 C0 E0            [24] 2874 	push	acc
      000F05 74s02            [12] 2875 	mov	a,#(___str_15 >> 8)
      000F07 C0 E0            [24] 2876 	push	acc
      000F09 12r00r00         [24] 2877 	lcall	_printf_tiny
      000F0C 15 81            [12] 2878 	dec	sp
      000F0E 15 81            [12] 2879 	dec	sp
                                   2880 ;	main.c:355: printf_tiny("Press # to see the menu again.\n\r");
      000F10 74r97            [12] 2881 	mov	a,#___str_16
      000F12 C0 E0            [24] 2882 	push	acc
      000F14 74s02            [12] 2883 	mov	a,#(___str_16 >> 8)
      000F16 C0 E0            [24] 2884 	push	acc
      000F18 12r00r00         [24] 2885 	lcall	_printf_tiny
      000F1B 15 81            [12] 2886 	dec	sp
      000F1D 15 81            [12] 2887 	dec	sp
      000F1F D0 00            [24] 2888 	pop	ar0
      000F21 D0 01            [24] 2889 	pop	ar1
      000F23 D0 04            [24] 2890 	pop	ar4
      000F25 D0 05            [24] 2891 	pop	ar5
                                   2892 ;	main.c:356: goto ishaan;
                                   2893 ;	main.c:359: }
      000F27 02r02rB5         [24] 2894 	ljmp	00119$
                                   2895 ;------------------------------------------------------------
                                   2896 ;Allocation info for local variables in function 'num_input'
                                   2897 ;------------------------------------------------------------
                                   2898 ;digit                     Allocated with name '_num_input_digit_65536_86'
                                   2899 ;digit_store               Allocated with name '_num_input_digit_store_65536_86'
                                   2900 ;counter                   Allocated with name '_num_input_counter_65536_86'
                                   2901 ;number                    Allocated with name '_num_input_number_65536_86'
                                   2902 ;buffer_number             Allocated with name '_num_input_buffer_number_131072_90'
                                   2903 ;------------------------------------------------------------
                                   2904 ;	main.c:365: uint16_t num_input()
                                   2905 ;	-----------------------------------------
                                   2906 ;	 function num_input
                                   2907 ;	-----------------------------------------
      000F2A                       2908 _num_input:
                                   2909 ;	main.c:370: __xdata uint8_t digit = 0;
      000F2A 90r00rD5         [24] 2910 	mov	dptr,#_num_input_digit_65536_86
      000F2D E4               [12] 2911 	clr	a
      000F2E F0               [24] 2912 	movx	@dptr,a
                                   2913 ;	main.c:372: __xdata uint8_t counter = 0;
      000F2F 90r00rE0         [24] 2914 	mov	dptr,#_num_input_counter_65536_86
      000F32 F0               [24] 2915 	movx	@dptr,a
                                   2916 ;	main.c:373: __xdata uint16_t number = 0;
      000F33 90r00rE1         [24] 2917 	mov	dptr,#_num_input_number_65536_86
      000F36 F0               [24] 2918 	movx	@dptr,a
      000F37 A3               [24] 2919 	inc	dptr
      000F38 F0               [24] 2920 	movx	@dptr,a
                                   2921 ;	main.c:376: while(digit!=13)
      000F39                       2922 00107$:
      000F39 90r00rD5         [24] 2923 	mov	dptr,#_num_input_digit_65536_86
      000F3C E0               [24] 2924 	movx	a,@dptr
      000F3D FF               [12] 2925 	mov	r7,a
      000F3E BF 0D 02         [24] 2926 	cjne	r7,#0x0d,00145$
      000F41 80 5F            [24] 2927 	sjmp	00109$
      000F43                       2928 00145$:
                                   2929 ;	main.c:379: digit=getchar();
      000F43 12r10r51         [24] 2930 	lcall	_getchar
      000F46 AE 82            [24] 2931 	mov	r6,dpl
      000F48 AF 83            [24] 2932 	mov	r7,dph
      000F4A 90r00rD5         [24] 2933 	mov	dptr,#_num_input_digit_65536_86
      000F4D EE               [12] 2934 	mov	a,r6
      000F4E F0               [24] 2935 	movx	@dptr,a
                                   2936 ;	main.c:381: if((digit >= '0') && (digit <= '9'))
      000F4F BE 30 00         [24] 2937 	cjne	r6,#0x30,00146$
      000F52                       2938 00146$:
      000F52 40 31            [24] 2939 	jc	00104$
      000F54 EE               [12] 2940 	mov	a,r6
      000F55 24 C6            [12] 2941 	add	a,#0xff - 0x39
      000F57 40 2C            [24] 2942 	jc	00104$
                                   2943 ;	main.c:383: putchar(digit);
      000F59 8E 05            [24] 2944 	mov	ar5,r6
      000F5B 7F 00            [12] 2945 	mov	r7,#0x00
      000F5D 8D 82            [24] 2946 	mov	dpl,r5
      000F5F 8F 83            [24] 2947 	mov	dph,r7
      000F61 C0 06            [24] 2948 	push	ar6
      000F63 12r10r32         [24] 2949 	lcall	_putchar
      000F66 D0 06            [24] 2950 	pop	ar6
                                   2951 ;	main.c:384: digit_store[counter]=digit-'0';
      000F68 90r00rE0         [24] 2952 	mov	dptr,#_num_input_counter_65536_86
      000F6B E0               [24] 2953 	movx	a,@dptr
      000F6C FF               [12] 2954 	mov	r7,a
      000F6D 24rD6            [12] 2955 	add	a,#_num_input_digit_store_65536_86
      000F6F F5 82            [12] 2956 	mov	dpl,a
      000F71 E4               [12] 2957 	clr	a
      000F72 34s00            [12] 2958 	addc	a,#(_num_input_digit_store_65536_86 >> 8)
      000F74 F5 83            [12] 2959 	mov	dph,a
      000F76 8E 05            [24] 2960 	mov	ar5,r6
      000F78 ED               [12] 2961 	mov	a,r5
      000F79 24 D0            [12] 2962 	add	a,#0xd0
      000F7B FD               [12] 2963 	mov	r5,a
      000F7C F0               [24] 2964 	movx	@dptr,a
                                   2965 ;	main.c:385: counter++;
      000F7D 90r00rE0         [24] 2966 	mov	dptr,#_num_input_counter_65536_86
      000F80 EF               [12] 2967 	mov	a,r7
      000F81 04               [12] 2968 	inc	a
      000F82 F0               [24] 2969 	movx	@dptr,a
      000F83 80 B4            [24] 2970 	sjmp	00107$
      000F85                       2971 00104$:
                                   2972 ;	main.c:388: else if(digit==8) //check for backspace
      000F85 BE 08 B1         [24] 2973 	cjne	r6,#0x08,00107$
                                   2974 ;	main.c:390: putchar(8);     //print backspace
      000F88 90 00 08         [24] 2975 	mov	dptr,#0x0008
      000F8B 12r10r32         [24] 2976 	lcall	_putchar
                                   2977 ;	main.c:391: putchar(32);    //print space
      000F8E 90 00 20         [24] 2978 	mov	dptr,#0x0020
      000F91 12r10r32         [24] 2979 	lcall	_putchar
                                   2980 ;	main.c:392: putchar(8);     //print backspace
      000F94 90 00 08         [24] 2981 	mov	dptr,#0x0008
      000F97 12r10r32         [24] 2982 	lcall	_putchar
                                   2983 ;	main.c:393: counter--;
      000F9A 90r00rE0         [24] 2984 	mov	dptr,#_num_input_counter_65536_86
      000F9D E0               [24] 2985 	movx	a,@dptr
      000F9E 14               [12] 2986 	dec	a
      000F9F F0               [24] 2987 	movx	@dptr,a
      000FA0 80 97            [24] 2988 	sjmp	00107$
      000FA2                       2989 00109$:
                                   2990 ;	main.c:396: printf_tiny("\n\r");
      000FA2 74r57            [12] 2991 	mov	a,#___str_60
      000FA4 C0 E0            [24] 2992 	push	acc
      000FA6 74s08            [12] 2993 	mov	a,#(___str_60 >> 8)
      000FA8 C0 E0            [24] 2994 	push	acc
      000FAA 12r00r00         [24] 2995 	lcall	_printf_tiny
      000FAD 15 81            [12] 2996 	dec	sp
      000FAF 15 81            [12] 2997 	dec	sp
                                   2998 ;	main.c:398: for(int buffer_number=0; buffer_number<counter; buffer_number++)
      000FB1 90r00rE0         [24] 2999 	mov	dptr,#_num_input_counter_65536_86
      000FB4 E0               [24] 3000 	movx	a,@dptr
      000FB5 FF               [12] 3001 	mov	r7,a
      000FB6 7D 00            [12] 3002 	mov	r5,#0x00
      000FB8 7E 00            [12] 3003 	mov	r6,#0x00
      000FBA                       3004 00112$:
      000FBA 8F 03            [24] 3005 	mov	ar3,r7
      000FBC 7C 00            [12] 3006 	mov	r4,#0x00
      000FBE C3               [12] 3007 	clr	c
      000FBF ED               [12] 3008 	mov	a,r5
      000FC0 9B               [12] 3009 	subb	a,r3
      000FC1 EE               [12] 3010 	mov	a,r6
      000FC2 64 80            [12] 3011 	xrl	a,#0x80
      000FC4 8C F0            [24] 3012 	mov	b,r4
      000FC6 63 F0 80         [24] 3013 	xrl	b,#0x80
      000FC9 95 F0            [12] 3014 	subb	a,b
      000FCB 50 59            [24] 3015 	jnc	00110$
                                   3016 ;	main.c:400: number*= 10;
      000FCD 90r00rE1         [24] 3017 	mov	dptr,#_num_input_number_65536_86
      000FD0 E0               [24] 3018 	movx	a,@dptr
      000FD1 FB               [12] 3019 	mov	r3,a
      000FD2 A3               [24] 3020 	inc	dptr
      000FD3 E0               [24] 3021 	movx	a,@dptr
      000FD4 FC               [12] 3022 	mov	r4,a
      000FD5 90r00r00         [24] 3023 	mov	dptr,#__mulint_PARM_2
      000FD8 EB               [12] 3024 	mov	a,r3
      000FD9 F0               [24] 3025 	movx	@dptr,a
      000FDA EC               [12] 3026 	mov	a,r4
      000FDB A3               [24] 3027 	inc	dptr
      000FDC F0               [24] 3028 	movx	@dptr,a
      000FDD 90 00 0A         [24] 3029 	mov	dptr,#0x000a
      000FE0 C0 07            [24] 3030 	push	ar7
      000FE2 C0 06            [24] 3031 	push	ar6
      000FE4 C0 05            [24] 3032 	push	ar5
      000FE6 12r00r00         [24] 3033 	lcall	__mulint
      000FE9 AB 82            [24] 3034 	mov	r3,dpl
      000FEB AC 83            [24] 3035 	mov	r4,dph
      000FED D0 05            [24] 3036 	pop	ar5
      000FEF D0 06            [24] 3037 	pop	ar6
      000FF1 D0 07            [24] 3038 	pop	ar7
      000FF3 90r00rE1         [24] 3039 	mov	dptr,#_num_input_number_65536_86
      000FF6 EB               [12] 3040 	mov	a,r3
      000FF7 F0               [24] 3041 	movx	@dptr,a
      000FF8 EC               [12] 3042 	mov	a,r4
      000FF9 A3               [24] 3043 	inc	dptr
      000FFA F0               [24] 3044 	movx	@dptr,a
                                   3045 ;	main.c:401: number+= digit_store[buffer_number];
      000FFB ED               [12] 3046 	mov	a,r5
      000FFC 24rD6            [12] 3047 	add	a,#_num_input_digit_store_65536_86
      000FFE F5 82            [12] 3048 	mov	dpl,a
      001000 EE               [12] 3049 	mov	a,r6
      001001 34s00            [12] 3050 	addc	a,#(_num_input_digit_store_65536_86 >> 8)
      001003 F5 83            [12] 3051 	mov	dph,a
      001005 E0               [24] 3052 	movx	a,@dptr
      001006 FC               [12] 3053 	mov	r4,a
      001007 7B 00            [12] 3054 	mov	r3,#0x00
      001009 90r00rE1         [24] 3055 	mov	dptr,#_num_input_number_65536_86
      00100C E0               [24] 3056 	movx	a,@dptr
      00100D F9               [12] 3057 	mov	r1,a
      00100E A3               [24] 3058 	inc	dptr
      00100F E0               [24] 3059 	movx	a,@dptr
      001010 FA               [12] 3060 	mov	r2,a
      001011 EC               [12] 3061 	mov	a,r4
      001012 29               [12] 3062 	add	a,r1
      001013 F9               [12] 3063 	mov	r1,a
      001014 EB               [12] 3064 	mov	a,r3
      001015 3A               [12] 3065 	addc	a,r2
      001016 FA               [12] 3066 	mov	r2,a
      001017 90r00rE1         [24] 3067 	mov	dptr,#_num_input_number_65536_86
      00101A E9               [12] 3068 	mov	a,r1
      00101B F0               [24] 3069 	movx	@dptr,a
      00101C EA               [12] 3070 	mov	a,r2
      00101D A3               [24] 3071 	inc	dptr
      00101E F0               [24] 3072 	movx	@dptr,a
                                   3073 ;	main.c:398: for(int buffer_number=0; buffer_number<counter; buffer_number++)
      00101F 0D               [12] 3074 	inc	r5
      001020 BD 00 97         [24] 3075 	cjne	r5,#0x00,00112$
      001023 0E               [12] 3076 	inc	r6
      001024 80 94            [24] 3077 	sjmp	00112$
      001026                       3078 00110$:
                                   3079 ;	main.c:404: return number;
      001026 90r00rE1         [24] 3080 	mov	dptr,#_num_input_number_65536_86
      001029 E0               [24] 3081 	movx	a,@dptr
      00102A FE               [12] 3082 	mov	r6,a
      00102B A3               [24] 3083 	inc	dptr
      00102C E0               [24] 3084 	movx	a,@dptr
                                   3085 ;	main.c:405: }
      00102D 8E 82            [24] 3086 	mov	dpl,r6
      00102F F5 83            [12] 3087 	mov	dph,a
      001031 22               [24] 3088 	ret
                                   3089 ;------------------------------------------------------------
                                   3090 ;Allocation info for local variables in function 'putchar'
                                   3091 ;------------------------------------------------------------
                                   3092 ;c                         Allocated with name '_putchar_c_65536_92'
                                   3093 ;------------------------------------------------------------
                                   3094 ;	main.c:411: int putchar (int c)
                                   3095 ;	-----------------------------------------
                                   3096 ;	 function putchar
                                   3097 ;	-----------------------------------------
      001032                       3098 _putchar:
      001032 AF 83            [24] 3099 	mov	r7,dph
      001034 E5 82            [12] 3100 	mov	a,dpl
      001036 90r00rE3         [24] 3101 	mov	dptr,#_putchar_c_65536_92
      001039 F0               [24] 3102 	movx	@dptr,a
      00103A EF               [12] 3103 	mov	a,r7
      00103B A3               [24] 3104 	inc	dptr
      00103C F0               [24] 3105 	movx	@dptr,a
                                   3106 ;	main.c:413: while (!TI);
      00103D                       3107 00101$:
      00103D 30 99 FD         [24] 3108 	jnb	_TI,00101$
                                   3109 ;	main.c:415: SBUF = c;           // load serial port with transmit value
      001040 90r00rE3         [24] 3110 	mov	dptr,#_putchar_c_65536_92
      001043 E0               [24] 3111 	movx	a,@dptr
      001044 FE               [12] 3112 	mov	r6,a
      001045 A3               [24] 3113 	inc	dptr
      001046 E0               [24] 3114 	movx	a,@dptr
      001047 FF               [12] 3115 	mov	r7,a
      001048 8E 99            [24] 3116 	mov	_SBUF,r6
                                   3117 ;	main.c:416: TI = 0;             // clear TI flag
                                   3118 ;	assignBit
      00104A C2 99            [12] 3119 	clr	_TI
                                   3120 ;	main.c:418: return c;
      00104C 8E 82            [24] 3121 	mov	dpl,r6
      00104E 8F 83            [24] 3122 	mov	dph,r7
                                   3123 ;	main.c:419: }
      001050 22               [24] 3124 	ret
                                   3125 ;------------------------------------------------------------
                                   3126 ;Allocation info for local variables in function 'getchar'
                                   3127 ;------------------------------------------------------------
                                   3128 ;	main.c:425: int getchar (void)
                                   3129 ;	-----------------------------------------
                                   3130 ;	 function getchar
                                   3131 ;	-----------------------------------------
      001051                       3132 _getchar:
                                   3133 ;	main.c:427: while (!RI);
      001051                       3134 00101$:
                                   3135 ;	main.c:430: RI = 0;                         // clear RI flag
                                   3136 ;	assignBit
      001051 10 98 02         [24] 3137 	jbc	_RI,00114$
      001054 80 FB            [24] 3138 	sjmp	00101$
      001056                       3139 00114$:
                                   3140 ;	main.c:431: return SBUF;                    // return character from SBUF
      001056 AE 99            [24] 3141 	mov	r6,_SBUF
      001058 7F 00            [12] 3142 	mov	r7,#0x00
      00105A 8E 82            [24] 3143 	mov	dpl,r6
      00105C 8F 83            [24] 3144 	mov	dph,r7
                                   3145 ;	main.c:432: }
      00105E 22               [24] 3146 	ret
                                   3147 	.area CSEG    (CODE)
                                   3148 	.area CONST   (CODE)
                                   3149 	.area CONST   (CODE)
      000000                       3150 ___str_0:
      000000 0A                    3151 	.db 0x0a
      000001 0D                    3152 	.db 0x0d
      000002 2A 2A 2A 2A 2A 2A 2A  3153 	.ascii "****************************** WELCOME *********************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 20 57 45 4C 43
             4F 4D 45 20 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      00003E 2A 2A 2A 2A 2A 2A 2A  3154 	.ascii "*********"
             2A 2A
      000047 0A                    3155 	.db 0x0a
      000048 0D                    3156 	.db 0x0d
      000049 00                    3157 	.db 0x00
                                   3158 	.area CSEG    (CODE)
                                   3159 	.area CONST   (CODE)
      00004A                       3160 ___str_1:
      00004A 0A                    3161 	.db 0x0a
      00004B 0D                    3162 	.db 0x0d
      00004C 45 6E 74 65 72 20 66  3163 	.ascii "Enter four digit number between 48-4800 for buffer size"
             6F 75 72 20 64 69 67
             69 74 20 6E 75 6D 62
             65 72 20 62 65 74 77
             65 65 6E 20 34 38 2D
             34 38 30 30 20 66 6F
             72 20 62 75 66 66 65
             72 20 73 69 7A 65
      000083 0A                    3164 	.db 0x0a
      000084 0D                    3165 	.db 0x0d
      000085 00                    3166 	.db 0x00
                                   3167 	.area CSEG    (CODE)
                                   3168 	.area CONST   (CODE)
      000086                       3169 ___str_2:
      000086 54 68 65 20 49 6E 70  3170 	.ascii "The Input number is=%d"
             75 74 20 6E 75 6D 62
             65 72 20 69 73 3D 25
             64
      00009C 0A                    3171 	.db 0x0a
      00009D 0D                    3172 	.db 0x0d
      00009E 00                    3173 	.db 0x00
                                   3174 	.area CSEG    (CODE)
                                   3175 	.area CONST   (CODE)
      00009F                       3176 ___str_3:
      00009F 49 6E 76 61 6C 69 64  3177 	.ascii "Invalid input. Please try again"
             20 69 6E 70 75 74 2E
             20 50 6C 65 61 73 65
             20 74 72 79 20 61 67
             61 69 6E
      0000BE 0A                    3178 	.db 0x0a
      0000BF 0D                    3179 	.db 0x0d
      0000C0 00                    3180 	.db 0x00
                                   3181 	.area CSEG    (CODE)
                                   3182 	.area CONST   (CODE)
      0000C1                       3183 ___str_4:
      0000C1 6D 61 6C 6C 6F 63 20  3184 	.ascii "malloc buffer 0 failed"
             62 75 66 66 65 72 20
             30 20 66 61 69 6C 65
             64
      0000D7 0A                    3185 	.db 0x0a
      0000D8 0D                    3186 	.db 0x0d
      0000D9 00                    3187 	.db 0x00
                                   3188 	.area CSEG    (CODE)
                                   3189 	.area CONST   (CODE)
      0000DA                       3190 ___str_5:
      0000DA 6D 61 6C 6C 6F 63 20  3191 	.ascii "malloc buffer 1 failed"
             62 75 66 66 65 72 20
             31 20 66 61 69 6C 65
             64
      0000F0 0A                    3192 	.db 0x0a
      0000F1 0D                    3193 	.db 0x0d
      0000F2 00                    3194 	.db 0x00
                                   3195 	.area CSEG    (CODE)
                                   3196 	.area CONST   (CODE)
      0000F3                       3197 ___str_6:
      0000F3 53 74 61 72 74 20 41  3198 	.ascii "Start Address of buffer_0 = 0x%x"
             64 64 72 65 73 73 20
             6F 66 20 62 75 66 66
             65 72 5F 30 20 3D 20
             30 78 25 78
      000113 0A                    3199 	.db 0x0a
      000114 0D                    3200 	.db 0x0d
      000115 00                    3201 	.db 0x00
                                   3202 	.area CSEG    (CODE)
                                   3203 	.area CONST   (CODE)
      000116                       3204 ___str_7:
      000116 53 74 61 72 74 20 41  3205 	.ascii "Start Address of buffer_1 = 0x%x"
             64 64 72 65 73 73 20
             6F 66 20 62 75 66 66
             65 72 5F 31 20 3D 20
             30 78 25 78
      000136 0A                    3206 	.db 0x0a
      000137 0D                    3207 	.db 0x0d
      000138 00                    3208 	.db 0x00
                                   3209 	.area CSEG    (CODE)
                                   3210 	.area CONST   (CODE)
      000139                       3211 ___str_8:
      000139 42 75 66 66 65 72 20  3212 	.ascii "Buffer 0 and Buffer 1 successfully Created"
             30 20 61 6E 64 20 42
             75 66 66 65 72 20 31
             20 73 75 63 63 65 73
             73 66 75 6C 6C 79 20
             43 72 65 61 74 65 64
      000163 0A                    3213 	.db 0x0a
      000164 0D                    3214 	.db 0x0d
      000165 00                    3215 	.db 0x00
                                   3216 	.area CSEG    (CODE)
                                   3217 	.area CONST   (CODE)
      000166                       3218 ___str_9:
      000166 0A                    3219 	.db 0x0a
      000167 0D                    3220 	.db 0x0d
      000168 20 4F 50 54 49 4F 4E  3221 	.ascii " OPTIONS "
             53 20
      000171 0A                    3222 	.db 0x0a
      000172 0D                    3223 	.db 0x0d
      000173 00                    3224 	.db 0x00
                                   3225 	.area CSEG    (CODE)
                                   3226 	.area CONST   (CODE)
      000174                       3227 ___str_10:
      000174 59 6F 75 20 63 61 6E  3228 	.ascii "You can enter characters to be stored in buffer 0"
             20 65 6E 74 65 72 20
             63 68 61 72 61 63 74
             65 72 73 20 74 6F 20
             62 65 20 73 74 6F 72
             65 64 20 69 6E 20 62
             75 66 66 65 72 20 30
      0001A5 0A                    3229 	.db 0x0a
      0001A6 0D                    3230 	.db 0x0d
      0001A7 00                    3231 	.db 0x00
                                   3232 	.area CSEG    (CODE)
                                   3233 	.area CONST   (CODE)
      0001A8                       3234 ___str_11:
      0001A8 50 72 65 73 73 20 2B  3235 	.ascii "Press + to create a new buffer of size between 30 and 300 by"
             20 74 6F 20 63 72 65
             61 74 65 20 61 20 6E
             65 77 20 62 75 66 66
             65 72 20 6F 66 20 73
             69 7A 65 20 62 65 74
             77 65 65 6E 20 33 30
             20 61 6E 64 20 33 30
             30 20 62 79
      0001E4 74 65 73              3236 	.ascii "tes"
      0001E7 0A                    3237 	.db 0x0a
      0001E8 0D                    3238 	.db 0x0d
      0001E9 00                    3239 	.db 0x00
                                   3240 	.area CSEG    (CODE)
                                   3241 	.area CONST   (CODE)
      0001EA                       3242 ___str_12:
      0001EA 50 72 65 73 73 20 2D  3243 	.ascii "Press - to delete a buffer."
             20 74 6F 20 64 65 6C
             65 74 65 20 61 20 62
             75 66 66 65 72 2E
      000205 0A                    3244 	.db 0x0a
      000206 0D                    3245 	.db 0x0d
      000207 00                    3246 	.db 0x00
                                   3247 	.area CSEG    (CODE)
                                   3248 	.area CONST   (CODE)
      000208                       3249 ___str_13:
      000208 50 72 65 73 73 20 3F  3250 	.ascii "Press ? to generate a heap report."
             20 74 6F 20 67 65 6E
             65 72 61 74 65 20 61
             20 68 65 61 70 20 72
             65 70 6F 72 74 2E
      00022A 0A                    3251 	.db 0x0a
      00022B 0D                    3252 	.db 0x0d
      00022C 00                    3253 	.db 0x00
                                   3254 	.area CSEG    (CODE)
                                   3255 	.area CONST   (CODE)
      00022D                       3256 ___str_14:
      00022D 50 72 65 73 73 20 3D  3257 	.ascii "Press = to display current contents of buffer 0."
             20 74 6F 20 64 69 73
             70 6C 61 79 20 63 75
             72 72 65 6E 74 20 63
             6F 6E 74 65 6E 74 73
             20 6F 66 20 62 75 66
             66 65 72 20 30 2E
      00025D 0A                    3258 	.db 0x0a
      00025E 0D                    3259 	.db 0x0d
      00025F 00                    3260 	.db 0x00
                                   3261 	.area CSEG    (CODE)
                                   3262 	.area CONST   (CODE)
      000260                       3263 ___str_15:
      000260 50 72 65 73 73 20 40  3264 	.ascii "Press @ to free all buffers and start program again."
             20 74 6F 20 66 72 65
             65 20 61 6C 6C 20 62
             75 66 66 65 72 73 20
             61 6E 64 20 73 74 61
             72 74 20 70 72 6F 67
             72 61 6D 20 61 67 61
             69 6E 2E
      000294 0A                    3265 	.db 0x0a
      000295 0D                    3266 	.db 0x0d
      000296 00                    3267 	.db 0x00
                                   3268 	.area CSEG    (CODE)
                                   3269 	.area CONST   (CODE)
      000297                       3270 ___str_16:
      000297 50 72 65 73 73 20 23  3271 	.ascii "Press # to see the menu again."
             20 74 6F 20 73 65 65
             20 74 68 65 20 6D 65
             6E 75 20 61 67 61 69
             6E 2E
      0002B5 0A                    3272 	.db 0x0a
      0002B6 0D                    3273 	.db 0x0d
      0002B7 00                    3274 	.db 0x00
                                   3275 	.area CSEG    (CODE)
                                   3276 	.area CONST   (CODE)
      0002B8                       3277 ___str_17:
      0002B8 0A                    3278 	.db 0x0a
      0002B9 0D                    3279 	.db 0x0d
      0002BA 2A 2A 2A 2A 2A 2A 2A  3280 	.ascii "****************************THANK YOU***********************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             54 48 41 4E 4B 20 59
             4F 55 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      0002F6 2A 2A 2A 2A 2A        3281 	.ascii "*****"
      0002FB 0A                    3282 	.db 0x0a
      0002FC 0D                    3283 	.db 0x0d
      0002FD 00                    3284 	.db 0x00
                                   3285 	.area CSEG    (CODE)
                                   3286 	.area CONST   (CODE)
      0002FE                       3287 ___str_18:
      0002FE 43 72 65 61 74 65 64  3288 	.ascii "Created by Gauriech Ishaan Pilla."
             20 62 79 20 47 61 75
             72 69 65 63 68 20 49
             73 68 61 61 6E 20 50
             69 6C 6C 61 2E
      00031F 0A                    3289 	.db 0x0a
      000320 0D                    3290 	.db 0x0d
      000321 00                    3291 	.db 0x00
                                   3292 	.area CSEG    (CODE)
                                   3293 	.area CONST   (CODE)
      000322                       3294 ___str_19:
      000322 0A                    3295 	.db 0x0a
      000323 0D                    3296 	.db 0x0d
      000324 45 6E 74 65 72 20 74  3297 	.ascii "Enter the character or press # to see menu again"
             68 65 20 63 68 61 72
             61 63 74 65 72 20 6F
             72 20 70 72 65 73 73
             20 23 20 74 6F 20 73
             65 65 20 6D 65 6E 75
             20 61 67 61 69 6E
      000354 0A                    3298 	.db 0x0a
      000355 0D                    3299 	.db 0x0d
      000356 00                    3300 	.db 0x00
                                   3301 	.area CSEG    (CODE)
                                   3302 	.area CONST   (CODE)
      000357                       3303 ___str_20:
      000357 0A                    3304 	.db 0x0a
      000358 0D                    3305 	.db 0x0d
      000359 0A                    3306 	.db 0x0a
      00035A 0D                    3307 	.db 0x0d
      00035B 00                    3308 	.db 0x00
                                   3309 	.area CSEG    (CODE)
                                   3310 	.area CONST   (CODE)
      00035C                       3311 ___str_21:
      00035C 0A                    3312 	.db 0x0a
      00035D 0D                    3313 	.db 0x0d
      00035E 42 75 66 66 65 72 20  3314 	.ascii "Buffer 0 is full."
             30 20 69 73 20 66 75
             6C 6C 2E
      00036F 0A                    3315 	.db 0x0a
      000370 0D                    3316 	.db 0x0d
      000371 00                    3317 	.db 0x00
                                   3318 	.area CSEG    (CODE)
                                   3319 	.area CONST   (CODE)
      000372                       3320 ___str_22:
      000372 0A                    3321 	.db 0x0a
      000373 0D                    3322 	.db 0x0d
      000374 20 41 6C 6C 6F 63 61  3323 	.ascii " Allocate a new Buffer "
             74 65 20 61 20 6E 65
             77 20 42 75 66 66 65
             72 20
      00038B 0A                    3324 	.db 0x0a
      00038C 0D                    3325 	.db 0x0d
      00038D 00                    3326 	.db 0x00
                                   3327 	.area CSEG    (CODE)
                                   3328 	.area CONST   (CODE)
      00038E                       3329 ___str_23:
      00038E 0A                    3330 	.db 0x0a
      00038F 0D                    3331 	.db 0x0d
      000390 45 6E 74 65 72 20 74  3332 	.ascii "Enter the buffer size between 30 and 300"
             68 65 20 62 75 66 66
             65 72 20 73 69 7A 65
             20 62 65 74 77 65 65
             6E 20 33 30 20 61 6E
             64 20 33 30 30
      0003B8 0A                    3333 	.db 0x0a
      0003B9 0D                    3334 	.db 0x0d
      0003BA 00                    3335 	.db 0x00
                                   3336 	.area CSEG    (CODE)
                                   3337 	.area CONST   (CODE)
      0003BB                       3338 ___str_24:
      0003BB 0A                    3339 	.db 0x0a
      0003BC 0D                    3340 	.db 0x0d
      0003BD 4D 65 6D 6F 72 79 20  3341 	.ascii "Memory Allocation for Buffer_%d Failed"
             41 6C 6C 6F 63 61 74
             69 6F 6E 20 66 6F 72
             20 42 75 66 66 65 72
             5F 25 64 20 46 61 69
             6C 65 64
      0003E3 0A                    3342 	.db 0x0a
      0003E4 0D                    3343 	.db 0x0d
      0003E5 50 72 65 73 73 20 27  3344 	.ascii "Press '+' to Try again"
             2B 27 20 74 6F 20 54
             72 79 20 61 67 61 69
             6E
      0003FB 0A                    3345 	.db 0x0a
      0003FC 0D                    3346 	.db 0x0d
      0003FD 00                    3347 	.db 0x00
                                   3348 	.area CSEG    (CODE)
                                   3349 	.area CONST   (CODE)
      0003FE                       3350 ___str_25:
      0003FE 0A                    3351 	.db 0x0a
      0003FF 0D                    3352 	.db 0x0d
      000400 4D 65 6D 6F 72 79 20  3353 	.ascii "Memory Allocation Successful for Buffer_%d"
             41 6C 6C 6F 63 61 74
             69 6F 6E 20 53 75 63
             63 65 73 73 66 75 6C
             20 66 6F 72 20 42 75
             66 66 65 72 5F 25 64
      00042A 0A                    3354 	.db 0x0a
      00042B 0D                    3355 	.db 0x0d
      00042C 00                    3356 	.db 0x00
                                   3357 	.area CSEG    (CODE)
                                   3358 	.area CONST   (CODE)
      00042D                       3359 ___str_26:
      00042D 0A                    3360 	.db 0x0a
      00042E 0D                    3361 	.db 0x0d
      00042F 42 75 66 66 65 72 5F  3362 	.ascii "Buffer_%d allocated of size %d"
             25 64 20 61 6C 6C 6F
             63 61 74 65 64 20 6F
             66 20 73 69 7A 65 20
             25 64
      00044D 0A                    3363 	.db 0x0a
      00044E 0D                    3364 	.db 0x0d
      00044F 00                    3365 	.db 0x00
                                   3366 	.area CSEG    (CODE)
                                   3367 	.area CONST   (CODE)
      000450                       3368 ___str_27:
      000450 0A                    3369 	.db 0x0a
      000451 0D                    3370 	.db 0x0d
      000452 53 74 61 72 74 20 41  3371 	.ascii "Start Address of buffer_%d = 0x%x"
             64 64 72 65 73 73 20
             6F 66 20 62 75 66 66
             65 72 5F 25 64 20 3D
             20 30 78 25 78
      000473 0A                    3372 	.db 0x0a
      000474 0D                    3373 	.db 0x0d
      000475 00                    3374 	.db 0x00
                                   3375 	.area CSEG    (CODE)
                                   3376 	.area CONST   (CODE)
      000476                       3377 ___str_28:
      000476 0A                    3378 	.db 0x0a
      000477 0D                    3379 	.db 0x0d
      000478 45 6E 74 65 72 20 61  3380 	.ascii "Enter a valid buffer number"
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             6E 75 6D 62 65 72
      000493 0A                    3381 	.db 0x0a
      000494 0D                    3382 	.db 0x0d
      000495 00                    3383 	.db 0x00
                                   3384 	.area CSEG    (CODE)
                                   3385 	.area CONST   (CODE)
      000496                       3386 ___str_29:
      000496 0A                    3387 	.db 0x0a
      000497 0D                    3388 	.db 0x0d
      000498 42 75 66 66 65 72 20  3389 	.ascii "Buffer 0 cannot be deleted!"
             30 20 63 61 6E 6E 6F
             74 20 62 65 20 64 65
             6C 65 74 65 64 21
      0004B3 0A                    3390 	.db 0x0a
      0004B4 0D                    3391 	.db 0x0d
      0004B5 00                    3392 	.db 0x00
                                   3393 	.area CSEG    (CODE)
                                   3394 	.area CONST   (CODE)
      0004B6                       3395 ___str_30:
      0004B6 0A                    3396 	.db 0x0a
      0004B7 0D                    3397 	.db 0x0d
      0004B8 44 65 6C 65 74 69 6E  3398 	.ascii "Deleting buffer 1"
             67 20 62 75 66 66 65
             72 20 31
      0004C9 0A                    3399 	.db 0x0a
      0004CA 0D                    3400 	.db 0x0d
      0004CB 00                    3401 	.db 0x00
                                   3402 	.area CSEG    (CODE)
                                   3403 	.area CONST   (CODE)
      0004CC                       3404 ___str_31:
      0004CC 42 75 66 66 65 72 20  3405 	.ascii "Buffer 1 is free"
             31 20 69 73 20 66 72
             65 65
      0004DC 00                    3406 	.db 0x00
                                   3407 	.area CSEG    (CODE)
                                   3408 	.area CONST   (CODE)
      0004DD                       3409 ___str_32:
      0004DD 0A                    3410 	.db 0x0a
      0004DE 0D                    3411 	.db 0x0d
      0004DF 44 65 6C 65 74 69 6E  3412 	.ascii "Deleting buffer %d "
             67 20 62 75 66 66 65
             72 20 25 64 20
      0004F2 0A                    3413 	.db 0x0a
      0004F3 0D                    3414 	.db 0x0d
      0004F4 00                    3415 	.db 0x00
                                   3416 	.area CSEG    (CODE)
                                   3417 	.area CONST   (CODE)
      0004F5                       3418 ___str_33:
      0004F5 0A                    3419 	.db 0x0a
      0004F6 0D                    3420 	.db 0x0d
      0004F7 42 75 66 66 65 72 20  3421 	.ascii "Buffer %d is Free"
             25 64 20 69 73 20 46
             72 65 65
      000508 0A                    3422 	.db 0x0a
      000509 0D                    3423 	.db 0x0d
      00050A 00                    3424 	.db 0x00
                                   3425 	.area CSEG    (CODE)
                                   3426 	.area CONST   (CODE)
      00050B                       3427 ___str_34:
      00050B 0A                    3428 	.db 0x0a
      00050C 0D                    3429 	.db 0x0d
      00050D 45 6E 74 65 72 20 61  3430 	.ascii "Enter a valid buffer number"
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             6E 75 6D 62 65 72
      000528 0A                    3431 	.db 0x0a
      000529 0D                    3432 	.db 0x0d
      00052A 50 72 65 73 73 20 27  3433 	.ascii "Press '-' to delete any valid buffer"
             2D 27 20 74 6F 20 64
             65 6C 65 74 65 20 61
             6E 79 20 76 61 6C 69
             64 20 62 75 66 66 65
             72
      00054E 0A                    3434 	.db 0x0a
      00054F 0D                    3435 	.db 0x0d
      000550 00                    3436 	.db 0x00
                                   3437 	.area CSEG    (CODE)
                                   3438 	.area CONST   (CODE)
      000551                       3439 ___str_35:
      000551 2A 2A 2A 2A 2A 2A 2A  3440 	.ascii "****************************** HEAP REPORT *****************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 20 48 45 41 50
             20 52 45 50 4F 52 54
             20 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      00058D 2A 2A 2A 2A 2A 2A 2A  3441 	.ascii "*************"
             2A 2A 2A 2A 2A 2A
      00059A 00                    3442 	.db 0x00
                                   3443 	.area CSEG    (CODE)
                                   3444 	.area CONST   (CODE)
      00059B                       3445 ___str_36:
      00059B 0A                    3446 	.db 0x0a
      00059C 0D                    3447 	.db 0x0d
      00059D 42 75 66 66 65 72 20  3448 	.ascii "Buffer 0"
             30
      0005A5 0A                    3449 	.db 0x0a
      0005A6 0D                    3450 	.db 0x0d
      0005A7 00                    3451 	.db 0x00
                                   3452 	.area CSEG    (CODE)
                                   3453 	.area CONST   (CODE)
      0005A8                       3454 ___str_37:
      0005A8 0A                    3455 	.db 0x0a
      0005A9 0D                    3456 	.db 0x0d
      0005AA 53 74 61 72 74 20 41  3457 	.ascii "Start Address = 0x%x"
             64 64 72 65 73 73 20
             3D 20 30 78 25 78
      0005BE 0A                    3458 	.db 0x0a
      0005BF 0D                    3459 	.db 0x0d
      0005C0 00                    3460 	.db 0x00
                                   3461 	.area CSEG    (CODE)
                                   3462 	.area CONST   (CODE)
      0005C1                       3463 ___str_38:
      0005C1 0A                    3464 	.db 0x0a
      0005C2 0D                    3465 	.db 0x0d
      0005C3 45 6E 64 69 6E 67 20  3466 	.ascii "Ending Address = 0x%x"
             41 64 64 72 65 73 73
             20 3D 20 30 78 25 78
      0005D8 0A                    3467 	.db 0x0a
      0005D9 0D                    3468 	.db 0x0d
      0005DA 00                    3469 	.db 0x00
                                   3470 	.area CSEG    (CODE)
                                   3471 	.area CONST   (CODE)
      0005DB                       3472 ___str_39:
      0005DB 0A                    3473 	.db 0x0a
      0005DC 0D                    3474 	.db 0x0d
      0005DD 42 75 66 66 65 72 20  3475 	.ascii "Buffer Size = %d"
             53 69 7A 65 20 3D 20
             25 64
      0005ED 0A                    3476 	.db 0x0a
      0005EE 0D                    3477 	.db 0x0d
      0005EF 00                    3478 	.db 0x00
                                   3479 	.area CSEG    (CODE)
                                   3480 	.area CONST   (CODE)
      0005F0                       3481 ___str_40:
      0005F0 0A                    3482 	.db 0x0a
      0005F1 0D                    3483 	.db 0x0d
      0005F2 53 74 6F 72 61 67 65  3484 	.ascii "Storage characters in buffer = %d"
             20 63 68 61 72 61 63
             74 65 72 73 20 69 6E
             20 62 75 66 66 65 72
             20 3D 20 25 64
      000613 0A                    3485 	.db 0x0a
      000614 0D                    3486 	.db 0x0d
      000615 00                    3487 	.db 0x00
                                   3488 	.area CSEG    (CODE)
                                   3489 	.area CONST   (CODE)
      000616                       3490 ___str_41:
      000616 0A                    3491 	.db 0x0a
      000617 0D                    3492 	.db 0x0d
      000618 46 72 65 65 20 53 70  3493 	.ascii "Free Spaces in buffer = %d"
             61 63 65 73 20 69 6E
             20 62 75 66 66 65 72
             20 3D 20 25 64
      000632 0A                    3494 	.db 0x0a
      000633 0D                    3495 	.db 0x0d
      000634 00                    3496 	.db 0x00
                                   3497 	.area CSEG    (CODE)
                                   3498 	.area CONST   (CODE)
      000635                       3499 ___str_42:
      000635 0A                    3500 	.db 0x0a
      000636 0D                    3501 	.db 0x0d
      000637 2D 2D 2D 2D 2D 2D 2D  3502 	.ascii "------------------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      000673 2D 2D 2D 2D 2D 2D 2D  3503 	.ascii "-----------"
             2D 2D 2D 2D
      00067E 0A                    3504 	.db 0x0a
      00067F 0D                    3505 	.db 0x0d
      000680 00                    3506 	.db 0x00
                                   3507 	.area CSEG    (CODE)
                                   3508 	.area CONST   (CODE)
      000681                       3509 ___str_43:
      000681 0A                    3510 	.db 0x0a
      000682 0D                    3511 	.db 0x0d
      000683 42 75 66 66 65 72 20  3512 	.ascii "Buffer 1"
             31
      00068B 0A                    3513 	.db 0x0a
      00068C 0D                    3514 	.db 0x0d
      00068D 00                    3515 	.db 0x00
                                   3516 	.area CSEG    (CODE)
                                   3517 	.area CONST   (CODE)
      00068E                       3518 ___str_44:
      00068E 0A                    3519 	.db 0x0a
      00068F 0D                    3520 	.db 0x0d
      000690 53 74 6F 72 61 67 65  3521 	.ascii "Storage characters in buffer = 0"
             20 63 68 61 72 61 63
             74 65 72 73 20 69 6E
             20 62 75 66 66 65 72
             20 3D 20 30
      0006B0 0A                    3522 	.db 0x0a
      0006B1 0D                    3523 	.db 0x0d
      0006B2 00                    3524 	.db 0x00
                                   3525 	.area CSEG    (CODE)
                                   3526 	.area CONST   (CODE)
      0006B3                       3527 ___str_45:
      0006B3 0A                    3528 	.db 0x0a
      0006B4 0D                    3529 	.db 0x0d
      0006B5 42 75 66 66 65 72 20  3530 	.ascii "Buffer %d"
             25 64
      0006BE 0A                    3531 	.db 0x0a
      0006BF 0D                    3532 	.db 0x0d
      0006C0 00                    3533 	.db 0x00
                                   3534 	.area CSEG    (CODE)
                                   3535 	.area CONST   (CODE)
      0006C1                       3536 ___str_46:
      0006C1 0A                    3537 	.db 0x0a
      0006C2 0D                    3538 	.db 0x0d
      0006C3 4E 75 6D 62 65 72 20  3539 	.ascii "Number of storage characters = %d"
             6F 66 20 73 74 6F 72
             61 67 65 20 63 68 61
             72 61 63 74 65 72 73
             20 3D 20 25 64
      0006E4 0A                    3540 	.db 0x0a
      0006E5 0D                    3541 	.db 0x0d
      0006E6 00                    3542 	.db 0x00
                                   3543 	.area CSEG    (CODE)
                                   3544 	.area CONST   (CODE)
      0006E7                       3545 ___str_47:
      0006E7 0A                    3546 	.db 0x0a
      0006E8 0D                    3547 	.db 0x0d
      0006E9 54 6F 74 61 6C 20 6E  3548 	.ascii "Total number of characters received = %d"
             75 6D 62 65 72 20 6F
             66 20 63 68 61 72 61
             63 74 65 72 73 20 72
             65 63 65 69 76 65 64
             20 3D 20 25 64
      000711 0A                    3549 	.db 0x0a
      000712 0D                    3550 	.db 0x0d
      000713 00                    3551 	.db 0x00
                                   3552 	.area CSEG    (CODE)
                                   3553 	.area CONST   (CODE)
      000714                       3554 ___str_48:
      000714 0A                    3555 	.db 0x0a
      000715 0D                    3556 	.db 0x0d
      000716 54 6F 74 61 6C 20 6E  3557 	.ascii "Total number of buffers that were allocated since the start "
             75 6D 62 65 72 20 6F
             66 20 62 75 66 66 65
             72 73 20 74 68 61 74
             20 77 65 72 65 20 61
             6C 6C 6F 63 61 74 65
             64 20 73 69 6E 63 65
             20 74 68 65 20 73 74
             61 72 74 20
      000752 6F 66 20 74 68 65 20  3558 	.ascii "of the program = %d"
             70 72 6F 67 72 61 6D
             20 3D 20 25 64
      000765 0A                    3559 	.db 0x0a
      000766 0D                    3560 	.db 0x0d
      000767 00                    3561 	.db 0x00
                                   3562 	.area CSEG    (CODE)
                                   3563 	.area CONST   (CODE)
      000768                       3564 ___str_49:
      000768 0A                    3565 	.db 0x0a
      000769 0D                    3566 	.db 0x0d
      00076A 54 6F 74 61 6C 20 73  3567 	.ascii "Total storage characters stored since last '?' = %d"
             74 6F 72 61 67 65 20
             63 68 61 72 61 63 74
             65 72 73 20 73 74 6F
             72 65 64 20 73 69 6E
             63 65 20 6C 61 73 74
             20 27 3F 27 20 3D 20
             25 64
      00079D 0A                    3568 	.db 0x0a
      00079E 0D                    3569 	.db 0x0d
      00079F 00                    3570 	.db 0x00
                                   3571 	.area CSEG    (CODE)
                                   3572 	.area CONST   (CODE)
      0007A0                       3573 ___str_50:
      0007A0 0A                    3574 	.db 0x0a
      0007A1 0D                    3575 	.db 0x0d
      0007A2 43 6F 6E 74 65 6E 74  3576 	.ascii "Contents of Buffer 0"
             73 20 6F 66 20 42 75
             66 66 65 72 20 30
      0007B6 0A                    3577 	.db 0x0a
      0007B7 0D                    3578 	.db 0x0d
      0007B8 00                    3579 	.db 0x00
                                   3580 	.area CSEG    (CODE)
                                   3581 	.area CONST   (CODE)
      0007B9                       3582 ___str_51:
      0007B9 30 78 25 78 3E 3E 20  3583 	.ascii "0x%x>> %x"
             25 78
      0007C2 00                    3584 	.db 0x00
                                   3585 	.area CSEG    (CODE)
                                   3586 	.area CONST   (CODE)
      0007C3                       3587 ___str_52:
      0007C3 20 25 78              3588 	.ascii " %x"
      0007C6 00                    3589 	.db 0x00
                                   3590 	.area CSEG    (CODE)
                                   3591 	.area CONST   (CODE)
      0007C7                       3592 ___str_53:
      0007C7 0A                    3593 	.db 0x0a
      0007C8 0D                    3594 	.db 0x0d
      0007C9 30 78 25 78 3E 3E 20  3595 	.ascii "0x%x>> %x"
             25 78
      0007D2 00                    3596 	.db 0x00
                                   3597 	.area CSEG    (CODE)
                                   3598 	.area CONST   (CODE)
      0007D3                       3599 ___str_54:
      0007D3 0A                    3600 	.db 0x0a
      0007D4 0D                    3601 	.db 0x0d
      0007D5 46 72 65 65 69 6E 67  3602 	.ascii "Freeing Buffer 0 "
             20 42 75 66 66 65 72
             20 30 20
      0007E6 0A                    3603 	.db 0x0a
      0007E7 0D                    3604 	.db 0x0d
      0007E8 00                    3605 	.db 0x00
                                   3606 	.area CSEG    (CODE)
                                   3607 	.area CONST   (CODE)
      0007E9                       3608 ___str_55:
      0007E9 0A                    3609 	.db 0x0a
      0007EA 0D                    3610 	.db 0x0d
      0007EB 42 75 66 66 65 72 20  3611 	.ascii "Buffer 0 is free"
             30 20 69 73 20 66 72
             65 65
      0007FB 0A                    3612 	.db 0x0a
      0007FC 0D                    3613 	.db 0x0d
      0007FD 00                    3614 	.db 0x00
                                   3615 	.area CSEG    (CODE)
                                   3616 	.area CONST   (CODE)
      0007FE                       3617 ___str_56:
      0007FE 0A                    3618 	.db 0x0a
      0007FF 0D                    3619 	.db 0x0d
      000800 46 72 65 65 69 6E 67  3620 	.ascii "Freeing Buffer 1 "
             20 42 75 66 66 65 72
             20 31 20
      000811 0A                    3621 	.db 0x0a
      000812 0D                    3622 	.db 0x0d
      000813 00                    3623 	.db 0x00
                                   3624 	.area CSEG    (CODE)
                                   3625 	.area CONST   (CODE)
      000814                       3626 ___str_57:
      000814 0A                    3627 	.db 0x0a
      000815 0D                    3628 	.db 0x0d
      000816 42 75 66 66 65 72 20  3629 	.ascii "Buffer 1 is free"
             31 20 69 73 20 66 72
             65 65
      000826 0A                    3630 	.db 0x0a
      000827 0D                    3631 	.db 0x0d
      000828 00                    3632 	.db 0x00
                                   3633 	.area CSEG    (CODE)
                                   3634 	.area CONST   (CODE)
      000829                       3635 ___str_58:
      000829 0A                    3636 	.db 0x0a
      00082A 0D                    3637 	.db 0x0d
      00082B 46 72 65 65 69 6E 67  3638 	.ascii "Freeing buffer_%d "
             20 62 75 66 66 65 72
             5F 25 64 20
      00083D 0A                    3639 	.db 0x0a
      00083E 0D                    3640 	.db 0x0d
      00083F 00                    3641 	.db 0x00
                                   3642 	.area CSEG    (CODE)
                                   3643 	.area CONST   (CODE)
      000840                       3644 ___str_59:
      000840 0A                    3645 	.db 0x0a
      000841 0D                    3646 	.db 0x0d
      000842 42 75 66 66 65 72 20  3647 	.ascii "Buffer %d is free "
             25 64 20 69 73 20 66
             72 65 65 20
      000854 0A                    3648 	.db 0x0a
      000855 0D                    3649 	.db 0x0d
      000856 00                    3650 	.db 0x00
                                   3651 	.area CSEG    (CODE)
                                   3652 	.area CONST   (CODE)
      000857                       3653 ___str_60:
      000857 0A                    3654 	.db 0x0a
      000858 0D                    3655 	.db 0x0d
      000859 00                    3656 	.db 0x00
                                   3657 	.area CSEG    (CODE)
                                   3658 	.area XINIT   (CODE)
                                   3659 	.area CABS    (ABS,CODE)
